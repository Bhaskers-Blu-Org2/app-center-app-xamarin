// Code generated by SimpleSwaggerGenerator 1.0.6256.33542
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace MobileCenterApi
{
    using SimpleAuth;
    using System.Net.Http;
    using System.Threading.Tasks;
    using System.Linq;
    using System.Collections.Generic;
    using Models;

    /// <summary>
    /// Mobile Center Frontdoor Graph API Service
    /// </summary>
    public partial class MobileCenterAPIServiceApiKeyApi : BasicAuthApi
    {
        //public MobileCenterAPIServiceApiKeyApi (string apiKey, HttpMessageHandler handler = null ) : base (apiKey, "X-API-Token", AuthLocation.Header, handler )
        //{
        //    Initialize();
        //}
    	/// <summary>
        /// An optional partial-method to perform custom initialization.
        ///</summary>
        partial void CustomInitialize();
        /// <summary>
        /// Gets the Account.
        /// </summary>
        public virtual AccountClass Account { get; private set; }

        /// <summary>
        /// Gets the CrashOperations.
        /// </summary>
        public virtual CrashOperationsClass Crash { get; private set; }

        /// <summary>
        /// Gets the BuildOperations.
        /// </summary>
        public virtual BuildOperationsClass Build { get; private set; }

        /// <summary>
        /// Gets the Test.
        /// </summary>
        public virtual TestClass Test { get; private set; }

        /// <summary>
        /// Gets the Data.
        /// </summary>
        public virtual DataClass Data { get; private set; }

        /// <summary>
        /// Gets the Distribute.
        /// </summary>
        public virtual DistributeClass Distribute { get; private set; }

        /// <summary>
        /// Gets the Analytics.
        /// </summary>
        public virtual AnalyticsClass Analytics { get; private set; }

        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            this.Account = new AccountClass(this);
            this.Crash = new CrashOperationsClass(this);
            this.Build = new BuildOperationsClass(this);
            this.Test = new TestClass(this);
            this.Data = new DataClass(this);
            this.Distribute = new DistributeClass(this);
            this.Analytics = new AnalyticsClass(this);
            this.BaseAddress = new System.Uri("https://api.mobile.azure.com/");
            CustomInitialize();
        }

        public class AccountClass
        {
            MobileCenterAPIServiceApiKeyApi api;
            public AccountClass(MobileCenterAPIServiceApiKeyApi api)
            {
                this.api = api;
            }
            /// <summary>
            /// Accepts all pending invitations to distribution groups for the specified
            /// user
            /// </summary>
            public Task AcceptGroupsInvitation()
            {
                var path = "/v0.1/user/invitations/distribution_groups/accept";
                return api.Post ( body: null, path: path, authenticated: true );
            }

            /// <summary>
            /// Rejects a pending invitation for the specified user
            /// </summary>
            /// <param name='invitationToken'>
            /// The app invitation token that was sent to the user
            /// </param>
            public Task RejectInvitation(string invitationToken)
            {
                if (invitationToken == null)
                {
                    throw new System.Exception("Parameter 'invitationToken' cannot be null");
                }
                var path = "/v0.1/user/invitations/apps/{invitation_token}/reject";
                var queryParameters = new Dictionary<string,string>();
                if (invitationToken != null)
                {
                    queryParameters.Add("invitation_token", string.Format("{0}", invitationToken));
                }
                return api.Post ( body: null, path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Accepts a pending invitation for the specified user
            /// </summary>
            /// <param name='invitationToken'>
            /// The app invitation token that was sent to the user
            /// </param>
            public Task AcceptInvitation(string invitationToken)
            {
                if (invitationToken == null)
                {
                    throw new System.Exception("Parameter 'invitationToken' cannot be null");
                }
                var path = "/v0.1/user/invitations/apps/{invitation_token}/accept";
                var queryParameters = new Dictionary<string,string>();
                if (invitationToken != null)
                {
                    queryParameters.Add("invitation_token", string.Format("{0}", invitationToken));
                }
                return api.Post ( body: null, path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Returns the user profile data
            /// </summary>
            public Task<UserProfileResponse> GetUserProfile()
            {
                var path = "/v0.1/user";
                return api.Get<UserProfileResponse> ( path: path, authenticated: true );
            }

            /// <summary>
            /// Updates the user profile and returns the updated user data
            /// </summary>
            /// <param name='user'>
            /// The data for the created user
            /// </param>
            public Task<UserProfileResponse> UpdateUserProfile(UserUpdateRequest user)
            {
                if (user == null)
                {
                    throw new System.Exception("Parameter 'user' cannot be null");
                }
                var path = "/v0.1/user";
                return api.Patch<UserProfileResponse> ( user, path: path, authenticated: true );
            }

            /// <summary>
            /// Creates a new app for the organizatiion and returns it to the caller
            /// </summary>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='app'>
            /// The data for the app
            /// </param>
            public Task<AppResponse> CreateOrganizationApp(string orgName, AppRequest app)
            {
                if (orgName == null)
                {
                    throw new System.Exception("Parameter 'orgName' cannot be null");
                }
                if (app == null)
                {
                    throw new System.Exception("Parameter 'app' cannot be null");
                }
                if (app != null)
                {
                    app.Validate();
                }
                var path = "/v0.1/orgs/{org_name}/apps";
                var queryParameters = new Dictionary<string,string>();
                if (orgName != null)
                {
                    queryParameters.Add("org_name", string.Format("{0}", orgName));
                }
                return api.Post<AppResponse> ( app, path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Returns a list of apps for the organization
            /// </summary>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            public Task<AppResponse[]> GetApps(string orgName)
            {
                if (orgName == null)
                {
                    throw new System.Exception("Parameter 'orgName' cannot be null");
                }
                var path = "/v0.1/orgs/{org_name}/apps";
                var queryParameters = new Dictionary<string,string>();
                if (orgName != null)
                {
                    queryParameters.Add("org_name", string.Format("{0}", orgName));
                }
                return api.Get<AppResponse[]> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Removes the user from the app
            /// </summary>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='userEmail'>
            /// The email of the user to Invites
            /// </param>
            public Task DeleteAppUser(string ownerName, string appName, string userEmail)
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                if (userEmail == null)
                {
                    throw new System.Exception("Parameter 'userEmail' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/users/{user_email}";
                var queryParameters = new Dictionary<string,string>();
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                if (userEmail != null)
                {
                    queryParameters.Add("user_email", string.Format("{0}", userEmail));
                }
                return api.Delete ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Returns the users associated with the app specified with the given app name
            /// which belongs to the given owner.
            /// </summary>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<UserProfileResponse[]> GetAppUsers(string ownerName, string appName)
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/users";
                var queryParameters = new Dictionary<string,string>();
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<UserProfileResponse[]> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Returns the testers associated with the app specified with the given app
            /// name which belongs to the given owner.
            /// </summary>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<UserProfileResponse[]> GetAppTesters(string ownerName, string appName)
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/testers";
                var queryParameters = new Dictionary<string,string>();
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<UserProfileResponse[]> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Invites a new or existing user to an app
            /// </summary>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='userEmail'>
            /// The email of the user to Invites
            /// </param>
            public Task InviteAppUser(string ownerName, string appName, string userEmail)
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                if (userEmail == null)
                {
                    throw new System.Exception("Parameter 'userEmail' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/invitations/{user_email}";
                var queryParameters = new Dictionary<string,string>();
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                if (userEmail != null)
                {
                    queryParameters.Add("user_email", string.Format("{0}", userEmail));
                }
                return api.Post ( body: null, path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Removes a user's invitation to an app
            /// </summary>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='userEmail'>
            /// The email of the user to Invites
            /// </param>
            public Task DeleteAppInvitation(string ownerName, string appName, string userEmail)
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                if (userEmail == null)
                {
                    throw new System.Exception("Parameter 'userEmail' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/invitations/{user_email}";
                var queryParameters = new Dictionary<string,string>();
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                if (userEmail != null)
                {
                    queryParameters.Add("user_email", string.Format("{0}", userEmail));
                }
                return api.Delete ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Gets the pending invitations for the app
            /// </summary>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<AppInvitationDetailResponse> GetAppInvitations(string ownerName, string appName)
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/invitations";
                var queryParameters = new Dictionary<string,string>();
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<AppInvitationDetailResponse> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Returns a list of member details in the distribution group specified
            /// </summary>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            /// <param name='excludePendingInvitations'>
            /// Whether to exclude pending invitations in the response
            /// </param>
            public Task<DistributionGroupUserGetResponse[]> GetDistributionGroupUsers(string ownerName, string appName, string distributionGroupName, bool? excludePendingInvitations = default(bool?))
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                if (distributionGroupName == null)
                {
                    throw new System.Exception("Parameter 'distributionGroupName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members";
                var queryParameters = new Dictionary<string,string>();
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                if (distributionGroupName != null)
                {
                    queryParameters.Add("distribution_group_name", string.Format("{0}", distributionGroupName));
                }
                if (excludePendingInvitations != null)
                {
                    queryParameters.Add("exclude_pending_invitations", string.Format("{0}", excludePendingInvitations?.ToString().ToLower()));
                }
                return api.Get<DistributionGroupUserGetResponse[]> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Adds the members to the specified distribution group
            /// </summary>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            /// <param name='members'>
            /// The list of members to add
            /// </param>
            public Task<DistributionGroupUserPostResponse[]> CreateDistributionGroupUsers(string ownerName, string appName, string distributionGroupName, DistributionGroupUserRequest members)
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                if (distributionGroupName == null)
                {
                    throw new System.Exception("Parameter 'distributionGroupName' cannot be null");
                }
                if (members == null)
                {
                    throw new System.Exception("Parameter 'members' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members";
                var queryParameters = new Dictionary<string,string>();
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                if (distributionGroupName != null)
                {
                    queryParameters.Add("distribution_group_name", string.Format("{0}", distributionGroupName));
                }
                return api.Post<DistributionGroupUserPostResponse[]> ( members, path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Remove the users from the distribution group
            /// </summary>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            /// <param name='members'>
            /// The list of members to add
            /// </param>
            public Task<DistributionGroupUserDeleteResponse> DeleteDistributionGroupUsers(string ownerName, string appName, string distributionGroupName, DistributionGroupUserRequest members)
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                if (distributionGroupName == null)
                {
                    throw new System.Exception("Parameter 'distributionGroupName' cannot be null");
                }
                if (members == null)
                {
                    throw new System.Exception("Parameter 'members' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members";
                var queryParameters = new Dictionary<string,string>();
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                if (distributionGroupName != null)
                {
                    queryParameters.Add("distribution_group_name", string.Format("{0}", distributionGroupName));
                }
                return api.Delete<DistributionGroupUserDeleteResponse> ( members, path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Returns a single distribution group for a given distribution group name
            /// </summary>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            public Task<DistributionGroupResponse> GetDistributionGroup(string ownerName, string appName, string distributionGroupName)
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                if (distributionGroupName == null)
                {
                    throw new System.Exception("Parameter 'distributionGroupName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}";
                var queryParameters = new Dictionary<string,string>();
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                if (distributionGroupName != null)
                {
                    queryParameters.Add("distribution_group_name", string.Format("{0}", distributionGroupName));
                }
                return api.Get<DistributionGroupResponse> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Updates the attributes of distribution group
            /// </summary>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            /// <param name='distributionGroup'>
            /// The attributes to update for the distribution group
            /// </param>
            public Task<DistributionGroupResponse> UpdateDistributionGroup(string ownerName, string appName, string distributionGroupName, DistributionGroupPatchRequest distributionGroup)
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                if (distributionGroupName == null)
                {
                    throw new System.Exception("Parameter 'distributionGroupName' cannot be null");
                }
                if (distributionGroup == null)
                {
                    throw new System.Exception("Parameter 'distributionGroup' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}";
                var queryParameters = new Dictionary<string,string>();
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                if (distributionGroupName != null)
                {
                    queryParameters.Add("distribution_group_name", string.Format("{0}", distributionGroupName));
                }
                return api.Patch<DistributionGroupResponse> ( distributionGroup, path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Deletes a distribution group
            /// </summary>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            public Task DeleteDistributionGroup(string appName, string ownerName, string distributionGroupName)
            {
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (distributionGroupName == null)
                {
                    throw new System.Exception("Parameter 'distributionGroupName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}";
                var queryParameters = new Dictionary<string,string>();
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (distributionGroupName != null)
                {
                    queryParameters.Add("distribution_group_name", string.Format("{0}", distributionGroupName));
                }
                return api.Delete ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Returns a list of distribution groups in the app specified
            /// </summary>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<DistributionGroupResponse[]> GetDistributionGroups(string ownerName, string appName)
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups";
                var queryParameters = new Dictionary<string,string>();
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<DistributionGroupResponse[]> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Creates a new distribution group and returns it to the caller
            /// </summary>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='distributionGroup'>
            /// The data for the distribution group
            /// </param>
            public Task<DistributionGroupResponse> CreateDistributionGroup(string ownerName, string appName, DistributionGroupRequest distributionGroup)
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                if (distributionGroup == null)
                {
                    throw new System.Exception("Parameter 'distributionGroup' cannot be null");
                }
                if (distributionGroup != null)
                {
                    distributionGroup.Validate();
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups";
                var queryParameters = new Dictionary<string,string>();
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Post<DistributionGroupResponse> ( distributionGroup, path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Return a specific app with the given app name which belongs to the given
            /// owner.
            /// </summary>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<AppResponse> GetApp(string ownerName, string appName)
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}";
                var queryParameters = new Dictionary<string,string>();
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<AppResponse> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Partially updates a single app
            /// </summary>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='app'>
            /// The partial data for the app
            /// </param>
            public Task<AppResponse> UpdateApp(string appName, string ownerName, AppPatchRequest app = default(AppPatchRequest))
            {
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}";
                var queryParameters = new Dictionary<string,string>();
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                return api.Patch<AppResponse> ( app, path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Delete an app
            /// </summary>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            public Task DeleteApp(string appName, string ownerName)
            {
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}";
                var queryParameters = new Dictionary<string,string>();
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                return api.Delete ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Creates a new app and returns it to the caller
            /// </summary>
            /// <param name='app'>
            /// The data for the app
            /// </param>
            public Task<AppResponse> CreateApp(AppRequest app)
            {
                if (app == null)
                {
                    throw new System.Exception("Parameter 'app' cannot be null");
                }
                if (app != null)
                {
                    app.Validate();
                }
                var path = "/v0.1/apps";
                return api.Post<AppResponse> ( app, path: path, authenticated: true );
            }

            /// <summary>
            /// Returns a list of apps
            /// </summary>
            public Task<AppResponse[]> GetApps1()
            {
                var path = "/v0.1/apps";
                return api.Get<AppResponse[]> ( path: path, authenticated: true );
            }

        }

        public class CrashOperationsClass
        {
            MobileCenterAPIServiceApiKeyApi api;
            public CrashOperationsClass(MobileCenterAPIServiceApiKeyApi api)
            {
                this.api = api;
            }
            /// <summary>
            /// Gets the json of a specific crash
            /// </summary>
            /// <param name='crashId'>
            /// id of a specific error
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<object> GetCrashRaw(string crashId, string ownerName, string appName)
            {
                if (crashId == null)
                {
                    throw new System.Exception("Parameter 'crashId' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/management/crashes/apps/{owner_name}/{app_name}/crashes/{crash_id}/raw";
                var queryParameters = new Dictionary<string,string>();
                if (crashId != null)
                {
                    queryParameters.Add("crash_id", string.Format("{0}", crashId));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<object> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Gets a list of application versions
            /// </summary>
            /// <remarks>
            /// Gets a list of application versions
            /// </remarks>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<AppVersion[]> GetAppVersions(string ownerName, string appName)
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/versions";
                var queryParameters = new Dictionary<string,string>();
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<AppVersion[]> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Marks a symbol by id (uuid) as ignored
            /// </summary>
            /// <param name='symbolId'>
            /// The ID of the symbol (uuid of the symbol)
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<Symbol> PostIgnoreSymbol(string symbolId, string ownerName, string appName)
            {
                if (symbolId == null)
                {
                    throw new System.Exception("Parameter 'symbolId' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/ignore";
                var queryParameters = new Dictionary<string,string>();
                if (symbolId != null)
                {
                    queryParameters.Add("symbol_id", string.Format("{0}", symbolId));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Post<Symbol> ( body: null, path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Returns a particular symbol by id (uuid) for the provided application
            /// </summary>
            /// <param name='symbolId'>
            /// The ID of the symbol (uuid of the symbol)
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<Symbol> GetSymbol(string symbolId, string ownerName, string appName)
            {
                if (symbolId == null)
                {
                    throw new System.Exception("Parameter 'symbolId' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}";
                var queryParameters = new Dictionary<string,string>();
                if (symbolId != null)
                {
                    queryParameters.Add("symbol_id", string.Format("{0}", symbolId));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<Symbol> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Returns the list of all symbols for the provided application
            /// </summary>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<Symbol[]> GetSymbols(string ownerName, string appName)
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/symbols";
                var queryParameters = new Dictionary<string,string>();
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<Symbol[]> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Gets a symbol upload by id for the specified application
            /// </summary>
            /// <param name='symbolUploadId'>
            /// The ID of the symbol upload
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<SymbolUpload> GetSymbolUpload(string symbolUploadId, string ownerName, string appName)
            {
                if (symbolUploadId == null)
                {
                    throw new System.Exception("Parameter 'symbolUploadId' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}";
                var queryParameters = new Dictionary<string,string>();
                if (symbolUploadId != null)
                {
                    queryParameters.Add("symbol_upload_id", string.Format("{0}", symbolUploadId));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<SymbolUpload> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Commits or aborts the symbol upload process for a new set of symbols for
            /// the specified application
            /// </summary>
            /// <param name='symbolUploadId'>
            /// The ID of the symbol upload
            /// </param>
            /// <param name='body'>
            /// The symbol information
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<SymbolUpload> PatchSymbolUpload(string symbolUploadId, SymbolUploadEndRequest body, string ownerName, string appName)
            {
                if (symbolUploadId == null)
                {
                    throw new System.Exception("Parameter 'symbolUploadId' cannot be null");
                }
                if (body == null)
                {
                    throw new System.Exception("Parameter 'body' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}";
                var queryParameters = new Dictionary<string,string>();
                if (symbolUploadId != null)
                {
                    queryParameters.Add("symbol_upload_id", string.Format("{0}", symbolUploadId));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Patch<SymbolUpload> ( body, path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Deletes a symbol upload by id for the specified application
            /// </summary>
            /// <param name='symbolUploadId'>
            /// The ID of the symbol upload
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<SymbolUpload> DeleteSymbolUpload(string symbolUploadId, string ownerName, string appName)
            {
                if (symbolUploadId == null)
                {
                    throw new System.Exception("Parameter 'symbolUploadId' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}";
                var queryParameters = new Dictionary<string,string>();
                if (symbolUploadId != null)
                {
                    queryParameters.Add("symbol_upload_id", string.Format("{0}", symbolUploadId));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Delete<SymbolUpload> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Gets a list of all uploads for the specified application
            /// </summary>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<SymbolUpload[]> GetSymbolUploads(string ownerName, string appName)
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads";
                var queryParameters = new Dictionary<string,string>();
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<SymbolUpload[]> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Begins the symbol upload process for a new set of symbols for the specified
            /// application
            /// </summary>
            /// <param name='body'>
            /// The symbol information
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<SymbolUploadBeginResponse> PostSymbolUpload(SymbolUploadBeginRequest body, string ownerName, string appName)
            {
                if (body == null)
                {
                    throw new System.Exception("Parameter 'body' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads";
                var queryParameters = new Dictionary<string,string>();
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Post<SymbolUploadBeginResponse> ( body, path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Gets a stacktrace for a specific error
            /// </summary>
            /// <param name='crashGroupId'>
            /// id of a specific group
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<Stacktrace> GetGroupStacktrace(string crashGroupId, string ownerName, string appName)
            {
                if (crashGroupId == null)
                {
                    throw new System.Exception("Parameter 'crashGroupId' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/stacktrace";
                var queryParameters = new Dictionary<string,string>();
                if (crashGroupId != null)
                {
                    queryParameters.Add("crash_group_id", string.Format("{0}", crashGroupId));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<Stacktrace> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Gets a stacktrace for a specific error
            /// </summary>
            /// <param name='crashGroupId'>
            /// id of a specific group
            /// </param>
            /// <param name='crashId'>
            /// id of a specific error
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<Stacktrace> GetErrorStacktrace(string crashGroupId, string crashId, string ownerName, string appName)
            {
                if (crashGroupId == null)
                {
                    throw new System.Exception("Parameter 'crashGroupId' cannot be null");
                }
                if (crashId == null)
                {
                    throw new System.Exception("Parameter 'crashId' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/stacktrace";
                var queryParameters = new Dictionary<string,string>();
                if (crashGroupId != null)
                {
                    queryParameters.Add("crash_group_id", string.Format("{0}", crashGroupId));
                }
                if (crashId != null)
                {
                    queryParameters.Add("crash_id", string.Format("{0}", crashId));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<Stacktrace> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Gets a specific error for an app
            /// </summary>
            /// <param name='crashGroupId'>
            /// id of a specific group
            /// </param>
            /// <param name='crashId'>
            /// id of a specific error
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='includeReport'>
            /// true if the error should include the raw error report. Default is false
            /// </param>
            /// <param name='includeLog'>
            /// true if the error should include the custom log report. Default is false
            /// </param>
            public Task<Crash> GetCrash(string crashGroupId, string crashId, string ownerName, string appName, bool? includeReport = false, bool? includeLog = false)
            {
                if (crashGroupId == null)
                {
                    throw new System.Exception("Parameter 'crashGroupId' cannot be null");
                }
                if (crashId == null)
                {
                    throw new System.Exception("Parameter 'crashId' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}";
                var queryParameters = new Dictionary<string,string>();
                if (crashGroupId != null)
                {
                    queryParameters.Add("crash_group_id", string.Format("{0}", crashGroupId));
                }
                if (crashId != null)
                {
                    queryParameters.Add("crash_id", string.Format("{0}", crashId));
                }
                if (includeReport != null)
                {
                    queryParameters.Add("include_report", string.Format("{0}", includeReport?.ToString().ToLower()));
                }
                if (includeLog != null)
                {
                    queryParameters.Add("include_log", string.Format("{0}", includeLog?.ToString().ToLower()));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<Crash> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Gets all crashes of the app
            /// </summary>
            /// <param name='crashGroupId'>
            /// id of a specific group
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='includeReport'>
            /// true if the error should include the raw error report. Default is false
            /// </param>
            /// <param name='includeLog'>
            /// true if the error should include the custom log report. Default is false
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='appVersion'>
            /// version
            /// </param>
            /// <param name='errorType'>
            /// Possible values include: 'something', 'else'
            /// </param>
            public Task<Crash[]> GetCrashes(string crashGroupId, string ownerName, string appName, bool? includeReport = false, bool? includeLog = false, System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), string appVersion = default(string), ErrorType? errorType = default(ErrorType?))
            {
                if (crashGroupId == null)
                {
                    throw new System.Exception("Parameter 'crashGroupId' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes";
                var queryParameters = new Dictionary<string,string>();
                if (crashGroupId != null)
                {
                    queryParameters.Add("crash_group_id", string.Format("{0}", crashGroupId));
                }
                if (includeReport != null)
                {
                    queryParameters.Add("include_report", string.Format("{0}", includeReport?.ToString().ToLower()));
                }
                if (includeLog != null)
                {
                    queryParameters.Add("include_log", string.Format("{0}", includeLog?.ToString().ToLower()));
                }
                if (dateFrom != null)
                {
                    queryParameters.Add("date_from", string.Format("{0}", dateFrom?.ToString()));
                }
                if (dateTo != null)
                {
                    queryParameters.Add("date_to", string.Format("{0}", dateTo?.ToString()));
                }
                if (appVersion != null)
                {
                    queryParameters.Add("app_version", string.Format("{0}", appVersion));
                }
                if (errorType != null)
                {
                    queryParameters.Add("error_type", string.Format("{0}", errorType?.GetEnumMember()));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<Crash[]> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Gets a specific group
            /// </summary>
            /// <param name='crashGroupId'>
            /// id of a specific group
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<CrashGroup> GetCrashGroup(string crashGroupId, string ownerName, string appName)
            {
                if (crashGroupId == null)
                {
                    throw new System.Exception("Parameter 'crashGroupId' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}";
                var queryParameters = new Dictionary<string,string>();
                if (crashGroupId != null)
                {
                    queryParameters.Add("crash_group_id", string.Format("{0}", crashGroupId));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<CrashGroup> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Updates a group
            /// </summary>
            /// <param name='crashGroupId'>
            /// id of a specific group
            /// </param>
            /// <param name='group'>
            /// Group change object. All fields are optional and only provided fields will
            /// get updated.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<CrashGroup> PatchCrashGroup(string crashGroupId, CrashGroupChange group, string ownerName, string appName)
            {
                if (crashGroupId == null)
                {
                    throw new System.Exception("Parameter 'crashGroupId' cannot be null");
                }
                if (group == null)
                {
                    throw new System.Exception("Parameter 'group' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}";
                var queryParameters = new Dictionary<string,string>();
                if (crashGroupId != null)
                {
                    queryParameters.Add("crash_group_id", string.Format("{0}", crashGroupId));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Patch<CrashGroup> ( group, path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Gets a list of crashes
            /// </summary>
            /// <remarks>
            /// Gets a list of crashes
            /// </remarks>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='lastOccurrenceFrom'>
            /// Earliest date when the last time a crash occured in a error group
            /// </param>
            /// <param name='lastOccurrenceTo'>
            /// Latest date when the last time a crash occured in a error group
            /// </param>
            /// <param name='appVersion'>
            /// version
            /// </param>
            /// <param name='groupType'>
            /// Possible values include: 'GroupType1', 'GroupType2'
            /// </param>
            /// <param name='groupStatus'>
            /// Possible values include: 'open', 'closed', 'ignored'
            /// </param>
            /// <param name='groupTextSearch'>
            /// A freetext search that matches in error, error types, error stack_traces
            /// and error user
            /// </param>
            public Task<CrashGroup[]> GetCrashGroups(string ownerName, string appName, System.DateTime? lastOccurrenceFrom = default(System.DateTime?), System.DateTime? lastOccurrenceTo = default(System.DateTime?), string appVersion = default(string), GroupType? groupType = default(GroupType?), GroupStatus? groupStatus = default(GroupStatus?), string groupTextSearch = default(string))
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/crash_groups";
                var queryParameters = new Dictionary<string,string>();
                if (lastOccurrenceFrom != null)
                {
                    queryParameters.Add("last_occurrence_from", string.Format("{0}", lastOccurrenceFrom?.ToString()));
                }
                if (lastOccurrenceTo != null)
                {
                    queryParameters.Add("last_occurrence_to", string.Format("{0}", lastOccurrenceTo?.ToString()));
                }
                if (appVersion != null)
                {
                    queryParameters.Add("app_version", string.Format("{0}", appVersion));
                }
                if (groupType != null)
                {
                    queryParameters.Add("group_type", string.Format("{0}", groupType?.GetEnumMember()));
                }
                if (groupStatus != null)
                {
                    queryParameters.Add("group_status", string.Format("{0}", groupStatus?.GetEnumMember()));
                }
                if (groupTextSearch != null)
                {
                    queryParameters.Add("group_text_search", string.Format("{0}", groupTextSearch));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<CrashGroup[]> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<CrashGroupCounts> GetCrashGroupCounts(string ownerName, string appName)
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/crash_group_counts";
                var queryParameters = new Dictionary<string,string>();
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<CrashGroupCounts> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

        }

        public class BuildOperationsClass
        {
            MobileCenterAPIServiceApiKeyApi api;
            public BuildOperationsClass(MobileCenterAPIServiceApiKeyApi api)
            {
                this.api = api;
            }
            /// <summary>
            /// Gets the Xcode versions available to this app
            /// </summary>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<XcodeVersion[]> GetXcodeVersions(string ownerName, string appName)
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/xcode_versions";
                var queryParameters = new Dictionary<string,string>();
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<XcodeVersion[]> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Gets the repositories available from the source code host
            /// </summary>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='form'>
            /// The selected form of the object. Possible values include: 'lite', 'full'
            /// </param>
            public Task<SourceRepository[]> GetRepositories(string sourceHost, string ownerName, string appName, Form? form = default(Form?))
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/source_hosts/{source_host}/repositories";
                var queryParameters = new Dictionary<string,string>();
                if (sourceHost != null)
                {
                    queryParameters.Add("source_host", string.Format("{0}", sourceHost));
                }
                if (form != null)
                {
                    queryParameters.Add("form", string.Format("{0}", form?.GetEnumMember()));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<SourceRepository[]> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Returns the repository build configuration status of the app
            /// </summary>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='includeInactive'>
            /// Include inactive configurations if none are active
            /// </param>
            public Task<RepoConfig[]> GetRepositoryConfiguration(string ownerName, string appName, bool? includeInactive = default(bool?))
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/repo_config";
                var queryParameters = new Dictionary<string,string>();
                if (includeInactive != null)
                {
                    queryParameters.Add("includeInactive", string.Format("{0}", includeInactive?.ToString().ToLower()));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<RepoConfig[]> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Configures the repository for build
            /// </summary>
            /// <param name='repo'>
            /// The repository information
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<SuccessResponse> CreateRepositoryConfiguration(RepoInfo repo, string ownerName, string appName)
            {
                if (repo == null)
                {
                    throw new System.Exception("Parameter 'repo' cannot be null");
                }
                if (repo != null)
                {
                    repo.Validate();
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/repo_config";
                var queryParameters = new Dictionary<string,string>();
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Post<SuccessResponse> ( repo, path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Removes the configuration for the respository
            /// </summary>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<SuccessResponse> DeleteRepositoryConfiguration(string ownerName, string appName)
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/repo_config";
                var queryParameters = new Dictionary<string,string>();
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Delete<SuccessResponse> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Returns commit information for a batch of shas
            /// </summary>
            /// <param name='shaCollection'>
            /// A collection of commit SHAs comma-delimited
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='form'>
            /// The selected form of the object. Possible values include: 'lite', 'full'
            /// </param>
            public Task<Branch[]> GetCommits(string shaCollection, string ownerName, string appName, Form? form = default(Form?))
            {
                if (shaCollection == null)
                {
                    throw new System.Exception("Parameter 'shaCollection' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/commits/batch/{sha_collection}";
                var queryParameters = new Dictionary<string,string>();
                if (shaCollection != null)
                {
                    queryParameters.Add("sha_collection", string.Format("{0}", shaCollection));
                }
                if (form != null)
                {
                    queryParameters.Add("form", string.Format("{0}", form?.GetEnumMember()));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<Branch[]> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Get the build log
            /// </summary>
            /// <param name='buildId'>
            /// The build ID
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
			public Task<LogResponse> GetBuildLogs(int buildId, string ownerName, string appName)
            {
                if (buildId <= 0)
                {
                    throw new System.Exception("Validation Failed: ExclusiveMinimum, 'buildId', 0");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}/logs";
                var queryParameters = new Dictionary<string,string>();
                queryParameters.Add("build_id", string.Format("{0}", buildId.ToString()));
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<LogResponse> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Gets the download URI
            /// </summary>
            /// <param name='buildId'>
            /// The build ID
            /// </param>
            /// <param name='downloadType'>
            /// The download type. Possible values include: 'build', 'symbols', 'logs'
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task GetBuildDownload(int buildId, DownloadType downloadType, string ownerName, string appName)
            {
                if (buildId <= 0)
                {
                    throw new System.Exception("Validation Failed: ExclusiveMinimum, 'buildId', 0");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}/downloads/{download_type}";
                var queryParameters = new Dictionary<string,string>();
                queryParameters.Add("build_id", string.Format("{0}", buildId.ToString()));
                queryParameters.Add("download_type", string.Format("{0}", downloadType.GetEnumMember()));
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Returns the build detail for the given build ID
            /// </summary>
            /// <param name='buildId'>
            /// The build ID
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<Build> GetBuild(int buildId, string ownerName, string appName)
            {
                if (buildId <= 0)
                {
                    throw new System.Exception("Validation Failed: ExclusiveMinimum, 'buildId', 0");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}";
                var queryParameters = new Dictionary<string,string>();
                queryParameters.Add("build_id", string.Format("{0}", buildId.ToString()));
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<Build> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Cancels a build
            /// </summary>
            /// <param name='buildId'>
            /// The build ID
            /// </param>
            /// <param name='properties'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<Build> UpdateBuildStatus(int buildId, BuildPatch properties, string ownerName, string appName)
            {
                if (buildId <= 0)
                {
                    throw new System.Exception("Validation Failed: ExclusiveMinimum, 'buildId', 0");
                }
                if (properties == null)
                {
                    throw new System.Exception("Parameter 'properties' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}";
                var queryParameters = new Dictionary<string,string>();
                queryParameters.Add("build_id", string.Format("{0}", buildId.ToString()));
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Patch<Build> ( properties, path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Returns the projects in the repository for the branch, for all toolsets
            /// </summary>
            /// <param name='branch'>
            /// The branch name
            /// </param>
            /// <param name='os'>
            /// The desired OS for the project scan; normally the same as the app OS.
            /// Possible values include: 'iOS', 'Android'
            /// </param>
            /// <param name='platform'>
            /// The desired platform for the project scan. Possible values include:
            /// 'Objective-C-Swift', 'React-Native', 'Xamarin', 'Java'
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<ToolsetProjects> GetProjectInformation(string branch, Os os, Platform platform, string ownerName, string appName)
            {
                if (branch == null)
                {
                    throw new System.Exception("Parameter 'branch' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/toolset_projects";
                var queryParameters = new Dictionary<string,string>();
                if (branch != null)
                {
                    queryParameters.Add("branch", string.Format("{0}", branch));
                }
                queryParameters.Add("os", string.Format("{0}", os.GetEnumMember()));
                queryParameters.Add("platform", string.Format("{0}", platform.GetEnumMember()));
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<ToolsetProjects> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Gets the branch configuration
            /// </summary>
            /// <param name='branch'>
            /// The branch name
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<BranchConfiguration> GetBranchConfiguration(string branch, string ownerName, string appName)
            {
                if (branch == null)
                {
                    throw new System.Exception("Parameter 'branch' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config";
                var queryParameters = new Dictionary<string,string>();
                if (branch != null)
                {
                    queryParameters.Add("branch", string.Format("{0}", branch));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<BranchConfiguration> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Configures the branch for build
            /// </summary>
            /// <param name='branch'>
            /// The branch name
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<BranchConfiguration> CreateBranchConfiguration(string branch, string ownerName, string appName)
            {
                if (branch == null)
                {
                    throw new System.Exception("Parameter 'branch' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config";
                var queryParameters = new Dictionary<string,string>();
                if (branch != null)
                {
                    queryParameters.Add("branch", string.Format("{0}", branch));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Post<BranchConfiguration> ( body: null, path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Reconfigures the branch for build
            /// </summary>
            /// <param name='branch'>
            /// The branch name
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            //public Task<BranchConfiguration> UpdateBranchConfiguration(string branch, string ownerName, string appName)
            //{
            //    if (branch == null)
            //    {
            //        throw new System.Exception("Parameter 'branch' cannot be null");
            //    }
            //    if (ownerName == null)
            //    {
            //        throw new System.Exception("Parameter 'ownerName' cannot be null");
            //    }
            //    if (appName == null)
            //    {
            //        throw new System.Exception("Parameter 'appName' cannot be null");
            //    }
            //    var path = "/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config";
            //    var queryParameters = new Dictionary<string,string>();
            //    if (branch != null)
            //    {
            //        queryParameters.Add("branch", string.Format("{0}", branch));
            //    }
            //    if (ownerName != null)
            //    {
            //        queryParameters.Add("owner_name", string.Format("{0}", ownerName));
            //    }
            //    if (appName != null)
            //    {
            //        queryParameters.Add("app_name", string.Format("{0}", appName));
            //    }
            //    return api.Put<BranchConfiguration> ( path: path, queryParameters: queryParameters, authenticated: true );
            //}

            /// <summary>
            /// Deletes the branch build configuration
            /// </summary>
            /// <param name='branch'>
            /// The branch name
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<SuccessResponse> DeleteBranchConfiguration(string branch, string ownerName, string appName)
            {
                if (branch == null)
                {
                    throw new System.Exception("Parameter 'branch' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config";
                var queryParameters = new Dictionary<string,string>();
                if (branch != null)
                {
                    queryParameters.Add("branch", string.Format("{0}", branch));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Delete<SuccessResponse> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Returns the list of builds for the branch
            /// </summary>
            /// <param name='branch'>
            /// The branch name
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<Build[]> GetBranchBuilds(string branch, string ownerName, string appName)
            {
                if (branch == null)
                {
                    throw new System.Exception("Parameter 'branch' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/builds";
                var queryParameters = new Dictionary<string,string>();
                if (branch != null)
                {
                    queryParameters.Add("branch", string.Format("{0}", branch));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<Build[]> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Create a build
            /// </summary>
            /// <param name='branch'>
            /// The branch name
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='paramsParameter'>
            /// Parameters of the build
            /// </param>
            public Task<Build[]> QueueBuild(string branch, string ownerName, string appName, BuildParams paramsParameter = default(BuildParams))
            {
                if (branch == null)
                {
                    throw new System.Exception("Parameter 'branch' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/builds";
                var queryParameters = new Dictionary<string,string>();
                if (branch != null)
                {
                    queryParameters.Add("branch", string.Format("{0}", branch));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Post<Build[]> ( paramsParameter, path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Returns the list of Git branches for this application
            /// </summary>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<BranchStatus[]> GetBranches(string ownerName, string appName)
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/branches";
                var queryParameters = new Dictionary<string,string>();
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<BranchStatus[]> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

        }

        public class TestClass
        {
            MobileCenterAPIServiceApiKeyApi api;
            public TestClass(MobileCenterAPIServiceApiKeyApi api)
            {
                this.api = api;
            }
            /// <summary>
            /// Returns list of all test runs for a given test series
            /// </summary>
            /// <param name='testSeriesSlug'>
            /// The slug of the test series
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<TestRun[]> GetAllTestRunsForSeries(string testSeriesSlug, string ownerName, string appName)
            {
                if (testSeriesSlug == null)
                {
                    throw new System.Exception("Parameter 'testSeriesSlug' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}/test_runs";
                var queryParameters = new Dictionary<string,string>();
                if (testSeriesSlug != null)
                {
                    queryParameters.Add("test_series_slug", string.Format("{0}", testSeriesSlug));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<TestRun[]> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Deletes a single test series
            /// </summary>
            /// <param name='testSeriesSlug'>
            /// The slug of the test series
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task DeleteTestSeries(string testSeriesSlug, string ownerName, string appName)
            {
                if (testSeriesSlug == null)
                {
                    throw new System.Exception("Parameter 'testSeriesSlug' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}";
                var queryParameters = new Dictionary<string,string>();
                if (testSeriesSlug != null)
                {
                    queryParameters.Add("test_series_slug", string.Format("{0}", testSeriesSlug));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Delete ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Updates name and slug of a test series
            /// </summary>
            /// <param name='testSeriesSlug'>
            /// The slug of the test series
            /// </param>
            /// <param name='name'>
            /// New name of the new test series
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<TestSeries> PatchTestSeries(string testSeriesSlug, string name, string ownerName, string appName)
            {
                if (testSeriesSlug == null)
                {
                    throw new System.Exception("Parameter 'testSeriesSlug' cannot be null");
                }
                if (name == null)
                {
                    throw new System.Exception("Parameter 'name' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}";
                var queryParameters = new Dictionary<string,string>();
                if (testSeriesSlug != null)
                {
                    queryParameters.Add("test_series_slug", string.Format("{0}", testSeriesSlug));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                var formsParameters = new Dictionary<string,string>();
                if (name != null)
                {
                    formsParameters.Add("name", string.Format("{0}", name));
                }
                var formsContent = new FormUrlEncodedContent(formsParameters);
                return api.Patch<TestSeries> ( formsContent, path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Returns list of all test series for an application
            /// </summary>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<TestSeries[]> GetAllTestSeries(string ownerName, string appName)
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/test_series";
                var queryParameters = new Dictionary<string,string>();
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<TestSeries[]> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Creates new test series for an application
            /// </summary>
            /// <param name='name'>
            /// Name of the new test series
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<TestSeries> CreateTestSeries(string name, string ownerName, string appName)
            {
                if (name == null)
                {
                    throw new System.Exception("Parameter 'name' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/test_series";
                var queryParameters = new Dictionary<string,string>();
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                var formsParameters = new Dictionary<string,string>();
                if (name != null)
                {
                    formsParameters.Add("name", string.Format("{0}", name));
                }
                var formsContent = new FormUrlEncodedContent(formsParameters);
                return api.Post<TestSeries> ( formsContent, path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Gets state of the test run
            /// </summary>
            /// <param name='testRunId'>
            /// The ID of the test run
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<TestRunState> GetTestRunState(string testRunId, string ownerName, string appName)
            {
                if (testRunId == null)
                {
                    throw new System.Exception("Parameter 'testRunId' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/state";
                var queryParameters = new Dictionary<string,string>();
                if (testRunId != null)
                {
                    queryParameters.Add("test_run_id", string.Format("{0}", testRunId));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<TestRunState> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Starts test run
            /// </summary>
            /// <param name='testRunId'>
            /// The ID of the test run
            /// </param>
            /// <param name='startOptions'>
            /// Option required to start the test run
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<TestCloudStartTestRunResult> StartTestRun(string testRunId, TestCloudStartTestRunOptions startOptions, string ownerName, string appName)
            {
                if (testRunId == null)
                {
                    throw new System.Exception("Parameter 'testRunId' cannot be null");
                }
                if (startOptions == null)
                {
                    throw new System.Exception("Parameter 'startOptions' cannot be null");
                }
                if (startOptions != null)
                {
                    startOptions.Validate();
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/start";
                var queryParameters = new Dictionary<string,string>();
                if (testRunId != null)
                {
                    queryParameters.Add("test_run_id", string.Format("{0}", testRunId));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Post<TestCloudStartTestRunResult> ( startOptions, path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Returns a single test report
            /// </summary>
            /// <param name='testRunId'>
            /// The ID of the test run
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<TestReport> GetTestReport(System.Guid testRunId, string ownerName, string appName)
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/report";
                var queryParameters = new Dictionary<string,string>();
                queryParameters.Add("test_run_id", string.Format("{0}", testRunId.ToString()));
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<TestReport> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Adds file with the given hash to a test run
            /// </summary>
            /// <param name='testRunId'>
            /// The ID of the test run
            /// </param>
            /// <param name='fileInfo'>
            /// File hash information
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<TestCloudFileHashResponse[]> UploadHashesBatch(string testRunId, TestCloudFileHash[] fileInfo, string ownerName, string appName)
            {
                if (testRunId == null)
                {
                    throw new System.Exception("Parameter 'testRunId' cannot be null");
                }
                if (fileInfo == null)
                {
                    throw new System.Exception("Parameter 'fileInfo' cannot be null");
                }
                if (fileInfo != null)
                {
                    foreach (var element in fileInfo)
                    {
                        if (element != null)
                        {
                            element.Validate();
                        }
                    }
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/hashes/batch";
                var queryParameters = new Dictionary<string,string>();
                if (testRunId != null)
                {
                    queryParameters.Add("test_run_id", string.Format("{0}", testRunId));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Post<TestCloudFileHashResponse[]> ( fileInfo, path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Adds file with the given hash to a test run
            /// </summary>
            /// <param name='testRunId'>
            /// The ID of the test run
            /// </param>
            /// <param name='fileInfo'>
            /// File hash information
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<TestUploadHashHeaders> UploadHash(string testRunId, TestCloudFileHashDeprecated fileInfo, string ownerName, string appName)
            {
                if (testRunId == null)
                {
                    throw new System.Exception("Parameter 'testRunId' cannot be null");
                }
                if (fileInfo == null)
                {
                    throw new System.Exception("Parameter 'fileInfo' cannot be null");
                }
                if (fileInfo != null)
                {
                    fileInfo.Validate();
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/hashes";
                var queryParameters = new Dictionary<string,string>();
                if (testRunId != null)
                {
                    queryParameters.Add("test_run_id", string.Format("{0}", testRunId));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Post<TestUploadHashHeaders> ( fileInfo, path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Uploads file for a test run
            /// </summary>
            /// <param name='testRunId'>
            /// The ID of the test run
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<TestStartUploadingFileHeaders> StartUploadingFile(string testRunId, string ownerName, string appName)
            {
                if (testRunId == null)
                {
                    throw new System.Exception("Parameter 'testRunId' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/files";
                var queryParameters = new Dictionary<string,string>();
                if (testRunId != null)
                {
                    queryParameters.Add("test_run_id", string.Format("{0}", testRunId));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Post<TestStartUploadingFileHeaders> ( body: null, path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Returns a single test runs
            /// </summary>
            /// <param name='testRunId'>
            /// The ID of the test run
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<TestRun> GetTestRun(System.Guid testRunId, string ownerName, string appName)
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}";
                var queryParameters = new Dictionary<string,string>();
                queryParameters.Add("test_run_id", string.Format("{0}", testRunId.ToString()));
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<TestRun> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Returns a list of test runs
            /// </summary>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<TestRun[]> GetTestRuns(string ownerName, string appName)
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/test_runs";
                var queryParameters = new Dictionary<string,string>();
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<TestRun[]> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Creates a new test run
            /// </summary>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<TestCreateTestRunHeaders> CreateTestRun(string ownerName, string appName)
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/test_runs";
                var queryParameters = new Dictionary<string,string>();
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Post<TestCreateTestRunHeaders> ( body: null, path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Get information about the currently active subscriptions, if any
            /// </summary>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<Subscription> GetSubscriptions(string ownerName, string appName)
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/subscriptions";
                var queryParameters = new Dictionary<string,string>();
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<Subscription> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Accept a free trial subscription
            /// </summary>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<Subscription> CreateSubscription(string ownerName, string appName)
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/subscriptions";
                var queryParameters = new Dictionary<string,string>();
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Post<Subscription> ( body: null, path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Creates a short ID for a list of devices
            /// </summary>
            /// <param name='devices'>
            /// List of device IDs
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<DeviceSelection> CreateDeviceSelection(string[] devices, string ownerName, string appName)
            {
                if (devices == null)
                {
                    throw new System.Exception("Parameter 'devices' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/device_selection";
                var queryParameters = new Dictionary<string,string>();
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                var formsParameters = new Dictionary<string,string>();
                if (devices != null)
                {
                    formsParameters.Add("devices", string.Format("{0}", string.Join(",", devices)));
                }
                var formsContent = new FormUrlEncodedContent(formsParameters);
                return api.Post<DeviceSelection> ( formsContent, path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Returns a list of available devices
            /// </summary>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='appUploadId'>
            /// The ID of the test run
            /// </param>
            public Task<DeviceConfiguration[]> GetDeviceConfigurations(string ownerName, string appName, System.Guid? appUploadId = default(System.Guid?))
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/device_configurations";
                var queryParameters = new Dictionary<string,string>();
                if (appUploadId != null)
                {
                    queryParameters.Add("app_upload_id", string.Format("{0}", appUploadId?.ToString()));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<DeviceConfiguration[]> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

        }

        public class DataClass
        {
            MobileCenterAPIServiceApiKeyApi api;
            public DataClass(MobileCenterAPIServiceApiKeyApi api)
            {
                this.api = api;
            }
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<object> GetTableRow(string subscriptionId, string tableName, string id, string ownerName, string appName)
            {
                if (subscriptionId == null)
                {
                    throw new System.Exception("Parameter 'subscriptionId' cannot be null");
                }
                if (tableName == null)
                {
                    throw new System.Exception("Parameter 'tableName' cannot be null");
                }
                if (id == null)
                {
                    throw new System.Exception("Parameter 'id' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/tables/{tableName}/data/{id}";
                var queryParameters = new Dictionary<string,string>();
                if (subscriptionId != null)
                {
                    queryParameters.Add("subscription_id", string.Format("{0}", subscriptionId));
                }
                if (tableName != null)
                {
                    queryParameters.Add("tableName", string.Format("{0}", tableName));
                }
                if (id != null)
                {
                    queryParameters.Add("id", string.Format("{0}", id));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<object> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='permanent'>
            /// </param>
            public Task<object> DeleteTableRow(string subscriptionId, string tableName, string id, string ownerName, string appName, bool? permanent = default(bool?))
            {
                if (subscriptionId == null)
                {
                    throw new System.Exception("Parameter 'subscriptionId' cannot be null");
                }
                if (tableName == null)
                {
                    throw new System.Exception("Parameter 'tableName' cannot be null");
                }
                if (id == null)
                {
                    throw new System.Exception("Parameter 'id' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/tables/{tableName}/data/{id}";
                var queryParameters = new Dictionary<string,string>();
                if (subscriptionId != null)
                {
                    queryParameters.Add("subscription_id", string.Format("{0}", subscriptionId));
                }
                if (tableName != null)
                {
                    queryParameters.Add("tableName", string.Format("{0}", tableName));
                }
                if (id != null)
                {
                    queryParameters.Add("id", string.Format("{0}", id));
                }
                if (permanent != null)
                {
                    queryParameters.Add("permanent", string.Format("{0}", permanent?.ToString().ToLower()));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Delete<object> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='skip'>
            /// </param>
            /// <param name='take'>
            /// </param>
            /// <param name='sort'>
            /// </param>
            public Task<object> GetTableData(string subscriptionId, string tableName, string ownerName, string appName, int? skip = default(int?), int? take = default(int?), string sort = default(string))
            {
                if (subscriptionId == null)
                {
                    throw new System.Exception("Parameter 'subscriptionId' cannot be null");
                }
                if (tableName == null)
                {
                    throw new System.Exception("Parameter 'tableName' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/tables/{tableName}/data";
                var queryParameters = new Dictionary<string,string>();
                if (subscriptionId != null)
                {
                    queryParameters.Add("subscription_id", string.Format("{0}", subscriptionId));
                }
                if (tableName != null)
                {
                    queryParameters.Add("tableName", string.Format("{0}", tableName));
                }
                if (skip != null)
                {
                    queryParameters.Add("skip", string.Format("{0}", skip?.ToString()));
                }
                if (take != null)
                {
                    queryParameters.Add("take", string.Format("{0}", take?.ToString()));
                }
                if (sort != null)
                {
                    queryParameters.Add("sort", string.Format("{0}", sort));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<object> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='import'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<object> ImportTableData(string subscriptionId, string tableName, ImportDataContainer import, string ownerName, string appName)
            {
                if (subscriptionId == null)
                {
                    throw new System.Exception("Parameter 'subscriptionId' cannot be null");
                }
                if (tableName == null)
                {
                    throw new System.Exception("Parameter 'tableName' cannot be null");
                }
                if (import == null)
                {
                    throw new System.Exception("Parameter 'import' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/tables/{tableName}/data";
                var queryParameters = new Dictionary<string,string>();
                if (subscriptionId != null)
                {
                    queryParameters.Add("subscription_id", string.Format("{0}", subscriptionId));
                }
                if (tableName != null)
                {
                    queryParameters.Add("tableName", string.Format("{0}", tableName));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Post<object> ( import, path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<object> ClearTableData(string subscriptionId, string tableName, string ownerName, string appName)
            {
                if (subscriptionId == null)
                {
                    throw new System.Exception("Parameter 'subscriptionId' cannot be null");
                }
                if (tableName == null)
                {
                    throw new System.Exception("Parameter 'tableName' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/tables/{tableName}/data";
                var queryParameters = new Dictionary<string,string>();
                if (subscriptionId != null)
                {
                    queryParameters.Add("subscription_id", string.Format("{0}", subscriptionId));
                }
                if (tableName != null)
                {
                    queryParameters.Add("tableName", string.Format("{0}", tableName));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Delete<object> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='columnName'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<object> GetColumn(string subscriptionId, string tableName, string columnName, string ownerName, string appName)
            {
                if (subscriptionId == null)
                {
                    throw new System.Exception("Parameter 'subscriptionId' cannot be null");
                }
                if (tableName == null)
                {
                    throw new System.Exception("Parameter 'tableName' cannot be null");
                }
                if (columnName == null)
                {
                    throw new System.Exception("Parameter 'columnName' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/tables/{tableName}/columns/{columnName}";
                var queryParameters = new Dictionary<string,string>();
                if (subscriptionId != null)
                {
                    queryParameters.Add("subscription_id", string.Format("{0}", subscriptionId));
                }
                if (tableName != null)
                {
                    queryParameters.Add("tableName", string.Format("{0}", tableName));
                }
                if (columnName != null)
                {
                    queryParameters.Add("columnName", string.Format("{0}", columnName));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<object> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='columnName'>
            /// </param>
            /// <param name='column'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<object> UpdateColumn(string subscriptionId, string tableName, string columnName, TableColumn column, string ownerName, string appName)
            {
                if (subscriptionId == null)
                {
                    throw new System.Exception("Parameter 'subscriptionId' cannot be null");
                }
                if (tableName == null)
                {
                    throw new System.Exception("Parameter 'tableName' cannot be null");
                }
                if (columnName == null)
                {
                    throw new System.Exception("Parameter 'columnName' cannot be null");
                }
                if (column == null)
                {
                    throw new System.Exception("Parameter 'column' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/tables/{tableName}/columns/{columnName}";
                var queryParameters = new Dictionary<string,string>();
                if (subscriptionId != null)
                {
                    queryParameters.Add("subscription_id", string.Format("{0}", subscriptionId));
                }
                if (tableName != null)
                {
                    queryParameters.Add("tableName", string.Format("{0}", tableName));
                }
                if (columnName != null)
                {
                    queryParameters.Add("columnName", string.Format("{0}", columnName));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Put<object> ( column, path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='columnName'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<object> DeleteColumn(string subscriptionId, string tableName, string columnName, string ownerName, string appName)
            {
                if (subscriptionId == null)
                {
                    throw new System.Exception("Parameter 'subscriptionId' cannot be null");
                }
                if (tableName == null)
                {
                    throw new System.Exception("Parameter 'tableName' cannot be null");
                }
                if (columnName == null)
                {
                    throw new System.Exception("Parameter 'columnName' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/tables/{tableName}/columns/{columnName}";
                var queryParameters = new Dictionary<string,string>();
                if (subscriptionId != null)
                {
                    queryParameters.Add("subscription_id", string.Format("{0}", subscriptionId));
                }
                if (tableName != null)
                {
                    queryParameters.Add("tableName", string.Format("{0}", tableName));
                }
                if (columnName != null)
                {
                    queryParameters.Add("columnName", string.Format("{0}", columnName));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Delete<object> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<object> GetColumnList(string subscriptionId, string tableName, string ownerName, string appName)
            {
                if (subscriptionId == null)
                {
                    throw new System.Exception("Parameter 'subscriptionId' cannot be null");
                }
                if (tableName == null)
                {
                    throw new System.Exception("Parameter 'tableName' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/tables/{tableName}/columns";
                var queryParameters = new Dictionary<string,string>();
                if (subscriptionId != null)
                {
                    queryParameters.Add("subscription_id", string.Format("{0}", subscriptionId));
                }
                if (tableName != null)
                {
                    queryParameters.Add("tableName", string.Format("{0}", tableName));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<object> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='column'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<object> UpdateColumnList(string subscriptionId, string tableName, TableColumn column, string ownerName, string appName)
            {
                if (subscriptionId == null)
                {
                    throw new System.Exception("Parameter 'subscriptionId' cannot be null");
                }
                if (tableName == null)
                {
                    throw new System.Exception("Parameter 'tableName' cannot be null");
                }
                if (column == null)
                {
                    throw new System.Exception("Parameter 'column' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/tables/{tableName}/columns";
                var queryParameters = new Dictionary<string,string>();
                if (subscriptionId != null)
                {
                    queryParameters.Add("subscription_id", string.Format("{0}", subscriptionId));
                }
                if (tableName != null)
                {
                    queryParameters.Add("tableName", string.Format("{0}", tableName));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Post<object> ( column, path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<object> GetTable(string subscriptionId, string tableName, string ownerName, string appName)
            {
                if (subscriptionId == null)
                {
                    throw new System.Exception("Parameter 'subscriptionId' cannot be null");
                }
                if (tableName == null)
                {
                    throw new System.Exception("Parameter 'tableName' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/tables/{tableName}";
                var queryParameters = new Dictionary<string,string>();
                if (subscriptionId != null)
                {
                    queryParameters.Add("subscription_id", string.Format("{0}", subscriptionId));
                }
                if (tableName != null)
                {
                    queryParameters.Add("tableName", string.Format("{0}", tableName));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<object> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='table'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<object> UpdateTable(string subscriptionId, string tableName, Table table, string ownerName, string appName)
            {
                if (subscriptionId == null)
                {
                    throw new System.Exception("Parameter 'subscriptionId' cannot be null");
                }
                if (tableName == null)
                {
                    throw new System.Exception("Parameter 'tableName' cannot be null");
                }
                if (table == null)
                {
                    throw new System.Exception("Parameter 'table' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/tables/{tableName}";
                var queryParameters = new Dictionary<string,string>();
                if (subscriptionId != null)
                {
                    queryParameters.Add("subscription_id", string.Format("{0}", subscriptionId));
                }
                if (tableName != null)
                {
                    queryParameters.Add("tableName", string.Format("{0}", tableName));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Put<object> ( table, path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<object> DeleteTable(string subscriptionId, string tableName, string ownerName, string appName)
            {
                if (subscriptionId == null)
                {
                    throw new System.Exception("Parameter 'subscriptionId' cannot be null");
                }
                if (tableName == null)
                {
                    throw new System.Exception("Parameter 'tableName' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/tables/{tableName}";
                var queryParameters = new Dictionary<string,string>();
                if (subscriptionId != null)
                {
                    queryParameters.Add("subscription_id", string.Format("{0}", subscriptionId));
                }
                if (tableName != null)
                {
                    queryParameters.Add("tableName", string.Format("{0}", tableName));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Delete<object> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<object> GetTableList(string subscriptionId, string ownerName, string appName)
            {
                if (subscriptionId == null)
                {
                    throw new System.Exception("Parameter 'subscriptionId' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/tables";
                var queryParameters = new Dictionary<string,string>();
                if (subscriptionId != null)
                {
                    queryParameters.Add("subscription_id", string.Format("{0}", subscriptionId));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<object> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='table'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<object> CreateTable(string subscriptionId, Table table, string ownerName, string appName)
            {
                if (subscriptionId == null)
                {
                    throw new System.Exception("Parameter 'subscriptionId' cannot be null");
                }
                if (table == null)
                {
                    throw new System.Exception("Parameter 'table' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/tables";
                var queryParameters = new Dictionary<string,string>();
                if (subscriptionId != null)
                {
                    queryParameters.Add("subscription_id", string.Format("{0}", subscriptionId));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Post<object> ( table, path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<object> DeleteResourceGroup(string subscriptionId, string ownerName, string appName)
            {
                if (subscriptionId == null)
                {
                    throw new System.Exception("Parameter 'subscriptionId' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/resourceGroups";
                var queryParameters = new Dictionary<string,string>();
                if (subscriptionId != null)
                {
                    queryParameters.Add("subscription_id", string.Format("{0}", subscriptionId));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Delete<object> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<object> GetResourceGroup(string subscriptionId, string ownerName, string appName)
            {
                if (subscriptionId == null)
                {
                    throw new System.Exception("Parameter 'subscriptionId' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/resourceGroups";
                var queryParameters = new Dictionary<string,string>();
                if (subscriptionId != null)
                {
                    queryParameters.Add("subscription_id", string.Format("{0}", subscriptionId));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<object> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<object> GetKeys(string subscriptionId, string ownerName, string appName)
            {
                if (subscriptionId == null)
                {
                    throw new System.Exception("Parameter 'subscriptionId' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/push/keys";
                var queryParameters = new Dictionary<string,string>();
                if (subscriptionId != null)
                {
                    queryParameters.Add("subscription_id", string.Format("{0}", subscriptionId));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<object> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<object> GetConfiguration(string subscriptionId, string ownerName, string appName)
            {
                if (subscriptionId == null)
                {
                    throw new System.Exception("Parameter 'subscriptionId' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/push/config";
                var queryParameters = new Dictionary<string,string>();
                if (subscriptionId != null)
                {
                    queryParameters.Add("subscription_id", string.Format("{0}", subscriptionId));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<object> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='hubDescription'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<object> SetConfiguration(string subscriptionId, PushConfig hubDescription, string ownerName, string appName)
            {
                if (subscriptionId == null)
                {
                    throw new System.Exception("Parameter 'subscriptionId' cannot be null");
                }
                if (hubDescription == null)
                {
                    throw new System.Exception("Parameter 'hubDescription' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/push/config";
                var queryParameters = new Dictionary<string,string>();
                if (subscriptionId != null)
                {
                    queryParameters.Add("subscription_id", string.Format("{0}", subscriptionId));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Post<object> ( hubDescription, path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<object> GetNotificationHub(string subscriptionId, string ownerName, string appName)
            {
                if (subscriptionId == null)
                {
                    throw new System.Exception("Parameter 'subscriptionId' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/push";
                var queryParameters = new Dictionary<string,string>();
                if (subscriptionId != null)
                {
                    queryParameters.Add("subscription_id", string.Format("{0}", subscriptionId));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<object> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<object> Ping(string subscriptionId, string ownerName, string appName)
            {
                if (subscriptionId == null)
                {
                    throw new System.Exception("Parameter 'subscriptionId' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/ping/";
                var queryParameters = new Dictionary<string,string>();
                if (subscriptionId != null)
                {
                    queryParameters.Add("subscription_id", string.Format("{0}", subscriptionId));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<object> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<object> GetConfiguration1(string subscriptionId, string ownerName, string appName)
            {
                if (subscriptionId == null)
                {
                    throw new System.Exception("Parameter 'subscriptionId' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/identity";
                var queryParameters = new Dictionary<string,string>();
                if (subscriptionId != null)
                {
                    queryParameters.Add("subscription_id", string.Format("{0}", subscriptionId));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<object> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<object> SetConfiguration1(string subscriptionId, string ownerName, string appName)
            {
                if (subscriptionId == null)
                {
                    throw new System.Exception("Parameter 'subscriptionId' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/identity";
                var queryParameters = new Dictionary<string,string>();
                if (subscriptionId != null)
                {
                    queryParameters.Add("subscription_id", string.Format("{0}", subscriptionId));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Post<object> ( body: null, path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='type'>
            /// Possible values include: 'appsvc', 'push'
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<object> GetDeploymentOperations(string subscriptionId, Type type, string ownerName, string appName)
            {
                if (subscriptionId == null)
                {
                    throw new System.Exception("Parameter 'subscriptionId' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/deployments/{type}/operations";
                var queryParameters = new Dictionary<string,string>();
                if (subscriptionId != null)
                {
                    queryParameters.Add("subscription_id", string.Format("{0}", subscriptionId));
                }
                queryParameters.Add("type", string.Format("{0}", type.GetEnumMember()));
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<object> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='type'>
            /// Possible values include: 'appsvc', 'push'
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<object> SubmitDeployment(string subscriptionId, Type type, string ownerName, string appName)
            {
                if (subscriptionId == null)
                {
                    throw new System.Exception("Parameter 'subscriptionId' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/deployments/{type}/";
                var queryParameters = new Dictionary<string,string>();
                if (subscriptionId != null)
                {
                    queryParameters.Add("subscription_id", string.Format("{0}", subscriptionId));
                }
                queryParameters.Add("type", string.Format("{0}", type.GetEnumMember()));
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Post<object> ( body: null, path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='type'>
            /// Possible values include: 'appsvc', 'push'
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<object> GetDeployment(string subscriptionId, Type type, string ownerName, string appName)
            {
                if (subscriptionId == null)
                {
                    throw new System.Exception("Parameter 'subscriptionId' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/deployments/{type}/";
                var queryParameters = new Dictionary<string,string>();
                if (subscriptionId != null)
                {
                    queryParameters.Add("subscription_id", string.Format("{0}", subscriptionId));
                }
                queryParameters.Add("type", string.Format("{0}", type.GetEnumMember()));
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<object> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

        }

        public class DistributeClass
        {
            MobileCenterAPIServiceApiKeyApi api;
            public DistributeClass(MobileCenterAPIServiceApiKeyApi api)
            {
                this.api = api;
            }
            /// <summary>
            /// Get a release with id `release_id`. if `release_id` is `latest`, return the
            /// latest release that was distributed to the current user (from all the
            /// distribution groups).
            /// </summary>
            /// <param name='releaseId'>
            /// The ID of the release, or `latest` to get the latest release from all the
            /// distribution groups assigned to the current user.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<ReleaseDetails> GetReleaseOrLatestRelease(string releaseId, string ownerName, string appName)
            {
                if (releaseId == null)
                {
                    throw new System.Exception("Parameter 'releaseId' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}";
                var queryParameters = new Dictionary<string,string>();
                if (releaseId != null)
                {
                    queryParameters.Add("release_id", string.Format("{0}", releaseId));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<ReleaseDetails> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Updates a release.
            /// </summary>
            /// <param name='releaseId'>
            /// The ID of the release
            /// </param>
            /// <param name='body'>
            /// The release information.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<ReleaseDetails> PatchV01AppsReleases(double releaseId, ReleaseUpdateRequest body, string ownerName, string appName)
            {
                if (body == null)
                {
                    throw new System.Exception("Parameter 'body' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}";
                var queryParameters = new Dictionary<string,string>();
                queryParameters.Add("release_id", string.Format("{0}", releaseId.ToString()));
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Patch<ReleaseDetails> ( body, path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Deletes a release.
            /// </summary>
            /// <param name='releaseId'>
            /// The ID of the release
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task DeleteV01AppsReleases(string releaseId, string ownerName, string appName)
            {
                if (releaseId == null)
                {
                    throw new System.Exception("Parameter 'releaseId' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}";
                var queryParameters = new Dictionary<string,string>();
                if (releaseId != null)
                {
                    queryParameters.Add("release_id", string.Format("{0}", releaseId));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Delete ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Return detailed information about releases.
            /// </summary>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='publishedOnly'>
            /// when true, filters out releases that were uplaoded but were never
            /// distributed. Releases that under deleted distribution groups will not be
            /// filtered out.
            /// </param>
            /// <param name='filter'>
            /// OBSOLETE. Will be removed in next version. An OData style filter. Currently
            /// only support the 'eq' comparision type. E.g. ?$filter=status eq 'Available'
            /// </param>
            public Task<ReleaseDetails[]> GetV01AppsReleases(string ownerName, string appName, bool? publishedOnly = default(bool?), string filter = default(string))
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/releases";
                var queryParameters = new Dictionary<string,string>();
                if (publishedOnly != null)
                {
                    queryParameters.Add("published_only", string.Format("{0}", publishedOnly?.ToString().ToLower()));
                }
                if (filter != null)
                {
                    queryParameters.Add("$filter", string.Format("{0}", filter));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<ReleaseDetails[]> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Commits or aborts the upload process for a release for the specified
            /// application
            /// </summary>
            /// <param name='uploadId'>
            /// The ID of the upload
            /// </param>
            /// <param name='body'>
            /// The release information
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<ReleaseUploadEndResponse> Uploads(string uploadId, ReleaseUploadEndRequest body, string ownerName, string appName)
            {
                if (uploadId == null)
                {
                    throw new System.Exception("Parameter 'uploadId' cannot be null");
                }
                if (body == null)
                {
                    throw new System.Exception("Parameter 'body' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/release_uploads/{upload_id}";
                var queryParameters = new Dictionary<string,string>();
                if (uploadId != null)
                {
                    queryParameters.Add("upload_id", string.Format("{0}", uploadId));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Patch<ReleaseUploadEndResponse> ( body, path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Begins the upload process for a new release for the specified application.
            /// </summary>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<ReleaseUploadBeginResponse> Uploads1(string ownerName, string appName)
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/release_uploads";
                var queryParameters = new Dictionary<string,string>();
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Post<ReleaseUploadBeginResponse> ( body: null, path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Get the latest release from every distribution group associated with an
            /// application.
            /// </summary>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<BasicReleaseDetails[]> GetLatestReleases(string ownerName, string appName)
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/recent_releases";
                var queryParameters = new Dictionary<string,string>();
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<BasicReleaseDetails[]> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Get the latest package from every distribution group associated with an
            /// application.
            /// </summary>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            [System.Obsolete()]
            public Task<BasicPackageDetails[]> GetLatestPackages(string ownerName, string appName)
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/recent_packages";
                var queryParameters = new Dictionary<string,string>();
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<BasicPackageDetails[]> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Get a package with id 'package_id'. if 'package_id' is 'latest', return the
            /// latest package that was distributed to the current user (from all the
            /// distribution groups).
            /// </summary>
            /// <param name='packageId'>
            /// The ID of the package, or 'latest' to get the latest package from all the
            /// distribution groups assigned to the current user.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            [System.Obsolete()]
            public Task<PackageDetails> GetPackageOrLatestPackage(string packageId, string ownerName, string appName)
            {
                if (packageId == null)
                {
                    throw new System.Exception("Parameter 'packageId' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/packages/{package_id}";
                var queryParameters = new Dictionary<string,string>();
                if (packageId != null)
                {
                    queryParameters.Add("package_id", string.Format("{0}", packageId));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<PackageDetails> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Updates a package.
            /// </summary>
            /// <param name='packageId'>
            /// The ID of the package
            /// </param>
            /// <param name='body'>
            /// The package information.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            [System.Obsolete()]
            public Task<PackageDetails> PatchV01AppsPackages(double packageId, PackageUpdateRequest body, string ownerName, string appName)
            {
                if (body == null)
                {
                    throw new System.Exception("Parameter 'body' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/packages/{package_id}";
                var queryParameters = new Dictionary<string,string>();
                queryParameters.Add("package_id", string.Format("{0}", packageId.ToString()));
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Patch<PackageDetails> ( body, path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Deletes a package.
            /// </summary>
            /// <param name='packageId'>
            /// The ID of the package
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            [System.Obsolete()]
            public Task DeleteV01AppsPackages(string packageId, string ownerName, string appName)
            {
                if (packageId == null)
                {
                    throw new System.Exception("Parameter 'packageId' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/packages/{package_id}";
                var queryParameters = new Dictionary<string,string>();
                if (packageId != null)
                {
                    queryParameters.Add("package_id", string.Format("{0}", packageId));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Delete ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Return detailed information about packages.
            /// </summary>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='publishedOnly'>
            /// when true, filters out packages that were uplaoded but were never
            /// distributed. Packages that under deleted distribution groups will not be
            /// filtered out.
            /// </param>
            /// <param name='filter'>
            /// OBSOLETE. Will be removed in next version. An OData style filter. Currently
            /// only support the 'eq' comparision type. E.g. ?$filter=status eq 'Available'
            /// </param>
            [System.Obsolete()]
            public Task<PackageDetails[]> GetV01AppsPackages(string ownerName, string appName, bool? publishedOnly = default(bool?), string filter = default(string))
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/packages";
                var queryParameters = new Dictionary<string,string>();
                if (publishedOnly != null)
                {
                    queryParameters.Add("published_only", string.Format("{0}", publishedOnly?.ToString().ToLower()));
                }
                if (filter != null)
                {
                    queryParameters.Add("$filter", string.Format("{0}", filter));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<PackageDetails[]> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Commits or aborts the upload process for a package for the specified
            /// application
            /// </summary>
            /// <param name='uploadId'>
            /// The ID of the upload
            /// </param>
            /// <param name='body'>
            /// The package information
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            [System.Obsolete()]
            public Task<PackageUploadEndResponse> Uploads2(string uploadId, PackageUploadEndRequest body, string ownerName, string appName)
            {
                if (uploadId == null)
                {
                    throw new System.Exception("Parameter 'uploadId' cannot be null");
                }
                if (body == null)
                {
                    throw new System.Exception("Parameter 'body' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/package_uploads/{upload_id}";
                var queryParameters = new Dictionary<string,string>();
                if (uploadId != null)
                {
                    queryParameters.Add("upload_id", string.Format("{0}", uploadId));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Patch<PackageUploadEndResponse> ( body, path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Begins the upload process for a new package for the specified application
            /// </summary>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            [System.Obsolete()]
            public Task<PackageUploadBeginResponse> Uploads3(string ownerName, string appName)
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/package_uploads";
                var queryParameters = new Dictionary<string,string>();
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Post<PackageUploadBeginResponse> ( body: null, path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Return detailed information about a distributed release in a given
            /// distribution group.
            /// </summary>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group.
            /// </param>
            /// <param name='releaseId'>
            /// Must be `latest`, a specific `release_id` is not supported at this time.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<ReleaseDetails> GetLatestReleaseForDistributionGroup(string distributionGroupName, string releaseId, string ownerName, string appName)
            {
                if (distributionGroupName == null)
                {
                    throw new System.Exception("Parameter 'distributionGroupName' cannot be null");
                }
                if (releaseId == null)
                {
                    throw new System.Exception("Parameter 'releaseId' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/releases/{release_id}";
                var queryParameters = new Dictionary<string,string>();
                if (distributionGroupName != null)
                {
                    queryParameters.Add("distribution_group_name", string.Format("{0}", distributionGroupName));
                }
                if (releaseId != null)
                {
                    queryParameters.Add("release_id", string.Format("{0}", releaseId));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<ReleaseDetails> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Deletes a release with id 'release_id' in a given distribution group.
            /// </summary>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group.
            /// </param>
            /// <param name='releaseId'>
            /// The ID identifying the unique release.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<object> DeleteReleaseForDistributionGroup(string distributionGroupName, string releaseId, string ownerName, string appName)
            {
                if (distributionGroupName == null)
                {
                    throw new System.Exception("Parameter 'distributionGroupName' cannot be null");
                }
                if (releaseId == null)
                {
                    throw new System.Exception("Parameter 'releaseId' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/releases/{release_id}";
                var queryParameters = new Dictionary<string,string>();
                if (distributionGroupName != null)
                {
                    queryParameters.Add("distribution_group_name", string.Format("{0}", distributionGroupName));
                }
                if (releaseId != null)
                {
                    queryParameters.Add("release_id", string.Format("{0}", releaseId));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Delete<object> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Return detailed information about distributed releases in a given
            /// distribution group.
            /// </summary>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<ReleaseDetails[]> GetReleasesForDistributionGroup(string distributionGroupName, string ownerName, string appName)
            {
                if (distributionGroupName == null)
                {
                    throw new System.Exception("Parameter 'distributionGroupName' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/releases";
                var queryParameters = new Dictionary<string,string>();
                if (distributionGroupName != null)
                {
                    queryParameters.Add("distribution_group_name", string.Format("{0}", distributionGroupName));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<ReleaseDetails[]> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Return detailed information about a distributed package in a given
            /// distribution group.
            /// </summary>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group.
            /// </param>
            /// <param name='packageId'>
            /// For GET calls, this must be 'latest', specific package_id's are not
            /// supported at this time.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            [System.Obsolete()]
            public Task<PackageDetails> GetLatestPackageForDistributionGroup(string distributionGroupName, string packageId, string ownerName, string appName)
            {
                if (distributionGroupName == null)
                {
                    throw new System.Exception("Parameter 'distributionGroupName' cannot be null");
                }
                if (packageId == null)
                {
                    throw new System.Exception("Parameter 'packageId' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/packages/{package_id}";
                var queryParameters = new Dictionary<string,string>();
                if (distributionGroupName != null)
                {
                    queryParameters.Add("distribution_group_name", string.Format("{0}", distributionGroupName));
                }
                if (packageId != null)
                {
                    queryParameters.Add("package_id", string.Format("{0}", packageId));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<PackageDetails> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Return detailed information about distributed packages in a given
            /// distribution group.
            /// </summary>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            [System.Obsolete()]
            public Task<PackageDetails[]> GetPackagesForDistributionGroup(string distributionGroupName, string ownerName, string appName)
            {
                if (distributionGroupName == null)
                {
                    throw new System.Exception("Parameter 'distributionGroupName' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/packages";
                var queryParameters = new Dictionary<string,string>();
                if (distributionGroupName != null)
                {
                    queryParameters.Add("distribution_group_name", string.Format("{0}", distributionGroupName));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<PackageDetails[]> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

        }

        public class AnalyticsClass
        {
            MobileCenterAPIServiceApiKeyApi api;
            public AnalyticsClass(MobileCenterAPIServiceApiKeyApi api)
            {
                this.api = api;
            }
            /// <summary>
            /// Count of active versions in the time range ordered by version.
            /// </summary>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='count'>
            /// The number of results to return
            /// </param>
            /// <param name='versions'>
            /// </param>
            public Task<Versions> VersionsMethod(System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), long? count = default(long?), string[] versions = default(string[]))
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/versions";
                var queryParameters = new Dictionary<string,string>();
                queryParameters.Add("start", string.Format("{0}", start.ToString()));
                if (end != null)
                {
                    queryParameters.Add("end", string.Format("{0}", end?.ToString()));
                }
                if (count != null)
                {
                    queryParameters.Add("count", string.Format("{0}", count?.ToString()));
                }
                if (versions != null)
                {
                    queryParameters.Add("versions", string.Format("{0}", string.Join("|", versions)));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<Versions> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Count of sessions per device in the time range
            /// </summary>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='interval'>
            /// Size of interval in ISO 8601 duration format.
            /// (PnYnMnDTnHnMnS|PnW|P&lt;date&gt;T&lt;time&gt;). The valid durations are 1
            /// day (P1D), 1 week (P1W), and 30 days (P30D).
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='versions'>
            /// </param>
            public Task<SessionsPerDevice> PerDeviceCounts(System.DateTime start, string interval, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), string[] versions = default(string[]))
            {
                if (interval == null)
                {
                    throw new System.Exception("Parameter 'interval' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/sessions_per_device";
                var queryParameters = new Dictionary<string,string>();
                queryParameters.Add("start", string.Format("{0}", start.ToString()));
                if (end != null)
                {
                    queryParameters.Add("end", string.Format("{0}", end?.ToString()));
                }
                if (interval != null)
                {
                    queryParameters.Add("interval", string.Format("{0}", interval));
                }
                if (versions != null)
                {
                    queryParameters.Add("versions", string.Format("{0}", string.Join("|", versions)));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<SessionsPerDevice> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Gets session duration .
            /// </summary>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='versions'>
            /// </param>
            public Task<SessionDurationsDistribution> SessionDurationsDistributionMethod(System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), string[] versions = default(string[]))
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/session_durations_distribution";
                var queryParameters = new Dictionary<string,string>();
                queryParameters.Add("start", string.Format("{0}", start.ToString()));
                if (end != null)
                {
                    queryParameters.Add("end", string.Format("{0}", end?.ToString()));
                }
                if (versions != null)
                {
                    queryParameters.Add("versions", string.Format("{0}", string.Join("|", versions)));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<SessionDurationsDistribution> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Count of sessions in the time range.
            /// </summary>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='interval'>
            /// Size of interval in ISO 8601 duration format.
            /// (PnYnMnDTnHnMnS|PnW|P&lt;date&gt;T&lt;time&gt;). The valid durations are 1
            /// day (P1D), 1 week (P1W), and 30 days (P30D).
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='versions'>
            /// </param>
            public Task<SessionCounts> SessionCountsMethod(System.DateTime start, string interval, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), string[] versions = default(string[]))
            {
                if (interval == null)
                {
                    throw new System.Exception("Parameter 'interval' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/session_counts";
                var queryParameters = new Dictionary<string,string>();
                queryParameters.Add("start", string.Format("{0}", start.ToString()));
                if (end != null)
                {
                    queryParameters.Add("end", string.Format("{0}", end?.ToString()));
                }
                if (interval != null)
                {
                    queryParameters.Add("interval", string.Format("{0}", interval));
                }
                if (versions != null)
                {
                    queryParameters.Add("versions", string.Format("{0}", string.Join("|", versions)));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<SessionCounts> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Places in the time range
            /// </summary>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='count'>
            /// The number of results to return
            /// </param>
            /// <param name='versions'>
            /// </param>
            public Task<Places> PlaceCounts(System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), long? count = default(long?), string[] versions = default(string[]))
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/places";
                var queryParameters = new Dictionary<string,string>();
                queryParameters.Add("start", string.Format("{0}", start.ToString()));
                if (end != null)
                {
                    queryParameters.Add("end", string.Format("{0}", end?.ToString()));
                }
                if (count != null)
                {
                    queryParameters.Add("count", string.Format("{0}", count?.ToString()));
                }
                if (versions != null)
                {
                    queryParameters.Add("versions", string.Format("{0}", string.Join("|", versions)));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<Places> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// OSes in the time range
            /// </summary>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='count'>
            /// The number of results to return
            /// </param>
            /// <param name='versions'>
            /// </param>
            public Task<OSes> OperatingSystemCounts(System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), long? count = default(long?), string[] versions = default(string[]))
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/oses";
                var queryParameters = new Dictionary<string,string>();
                queryParameters.Add("start", string.Format("{0}", start.ToString()));
                if (end != null)
                {
                    queryParameters.Add("end", string.Format("{0}", end?.ToString()));
                }
                if (count != null)
                {
                    queryParameters.Add("count", string.Format("{0}", count?.ToString()));
                }
                if (versions != null)
                {
                    queryParameters.Add("versions", string.Format("{0}", string.Join("|", versions)));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<OSes> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// models in the time range
            /// </summary>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='count'>
            /// The number of results to return
            /// </param>
            /// <param name='versions'>
            /// </param>
            public Task<AnalyticsModels> ModelCounts(System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), long? count = default(long?), string[] versions = default(string[]))
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/models";
                var queryParameters = new Dictionary<string,string>();
                queryParameters.Add("start", string.Format("{0}", start.ToString()));
                if (end != null)
                {
                    queryParameters.Add("end", string.Format("{0}", end?.ToString()));
                }
                if (count != null)
                {
                    queryParameters.Add("count", string.Format("{0}", count?.ToString()));
                }
                if (versions != null)
                {
                    queryParameters.Add("versions", string.Format("{0}", string.Join("|", versions)));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<AnalyticsModels> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Logs received between the specified start time and the current time. The
            /// API will return a maximum of 100 logs per call.
            /// </summary>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format. It must be within the
            /// current day in the UTC timezone. The default value is the start time of the
            /// current day in UTC timezone.
            /// </param>
            public Task<LogContainer> LogFlow(string ownerName, string appName, System.DateTime? start = default(System.DateTime?))
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/log_flow";
                var queryParameters = new Dictionary<string,string>();
                if (start != null)
                {
                    queryParameters.Add("start", string.Format("{0}", start?.ToString()));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<LogContainer> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// languages in the time range
            /// </summary>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='count'>
            /// The number of results to return
            /// </param>
            /// <param name='versions'>
            /// </param>
            public Task<Languages> LanguageCounts(System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), long? count = default(long?), string[] versions = default(string[]))
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/languages";
                var queryParameters = new Dictionary<string,string>();
                queryParameters.Add("start", string.Format("{0}", start.ToString()));
                if (end != null)
                {
                    queryParameters.Add("end", string.Format("{0}", end?.ToString()));
                }
                if (count != null)
                {
                    queryParameters.Add("count", string.Format("{0}", count?.ToString()));
                }
                if (versions != null)
                {
                    queryParameters.Add("versions", string.Format("{0}", string.Join("|", versions)));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<Languages> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Event properties value counts during the time range in descending order.
            /// Limited up to 5 values.
            /// </summary>
            /// <param name='eventName'>
            /// The id of the event
            /// </param>
            /// <param name='eventPropertyName'>
            /// The id of the event property
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='versions'>
            /// </param>
            /// <param name='count'>
            /// The number of property values to return
            /// </param>
            public Task<EventPropertyValues> EventPropertyCounts(string eventName, string eventPropertyName, System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), string[] versions = default(string[]), long? count = 5)
            {
                if (eventName == null)
                {
                    throw new System.Exception("Parameter 'eventName' cannot be null");
                }
                if (eventPropertyName == null)
                {
                    throw new System.Exception("Parameter 'eventPropertyName' cannot be null");
                }
                if (count > 10)
                {
                    throw new System.Exception("Validation Failed: InclusiveMaximum, 'count', 10");
                }
                if (count < 1)
                {
                    throw new System.Exception("Validation Failed: InclusiveMinimum, 'count', 1");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/properties/{event_property_name}/counts";
                var queryParameters = new Dictionary<string,string>();
                if (eventName != null)
                {
                    queryParameters.Add("event_name", string.Format("{0}", eventName));
                }
                if (eventPropertyName != null)
                {
                    queryParameters.Add("event_property_name", string.Format("{0}", eventPropertyName));
                }
                queryParameters.Add("start", string.Format("{0}", start.ToString()));
                if (end != null)
                {
                    queryParameters.Add("end", string.Format("{0}", end?.ToString()));
                }
                if (versions != null)
                {
                    queryParameters.Add("versions", string.Format("{0}", string.Join("|", versions)));
                }
                if (count != null)
                {
                    queryParameters.Add("count", string.Format("{0}", count?.ToString()));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<EventPropertyValues> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Event properties.  Up to the first 5 received properties.
            /// </summary>
            /// <param name='eventName'>
            /// The id of the event
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<EventProperties> EventPropertiesMethod(string eventName, string ownerName, string appName)
            {
                if (eventName == null)
                {
                    throw new System.Exception("Parameter 'eventName' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/properties";
                var queryParameters = new Dictionary<string,string>();
                if (eventName != null)
                {
                    queryParameters.Add("event_name", string.Format("{0}", eventName));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<EventProperties> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Count of events by interval in the time range.
            /// </summary>
            /// <param name='eventName'>
            /// The id of the event
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='versions'>
            /// </param>
            public Task<EventCount> EventCountMethod(string eventName, System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), string[] versions = default(string[]))
            {
                if (eventName == null)
                {
                    throw new System.Exception("Parameter 'eventName' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/event_count";
                var queryParameters = new Dictionary<string,string>();
                if (eventName != null)
                {
                    queryParameters.Add("event_name", string.Format("{0}", eventName));
                }
                queryParameters.Add("start", string.Format("{0}", start.ToString()));
                if (end != null)
                {
                    queryParameters.Add("end", string.Format("{0}", end?.ToString()));
                }
                if (versions != null)
                {
                    queryParameters.Add("versions", string.Format("{0}", string.Join("|", versions)));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<EventCount> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Count of devices for an event by interval in the time range.
            /// </summary>
            /// <param name='eventName'>
            /// The id of the event
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='versions'>
            /// </param>
            public Task<EventDeviceCount> EventDeviceCountMethod(string eventName, System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), string[] versions = default(string[]))
            {
                if (eventName == null)
                {
                    throw new System.Exception("Parameter 'eventName' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/device_count";
                var queryParameters = new Dictionary<string,string>();
                if (eventName != null)
                {
                    queryParameters.Add("event_name", string.Format("{0}", eventName));
                }
                queryParameters.Add("start", string.Format("{0}", start.ToString()));
                if (end != null)
                {
                    queryParameters.Add("end", string.Format("{0}", end?.ToString()));
                }
                if (versions != null)
                {
                    queryParameters.Add("versions", string.Format("{0}", string.Join("|", versions)));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<EventDeviceCount> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Count of events per session by interval in the time range.
            /// </summary>
            /// <param name='eventName'>
            /// The id of the event
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='versions'>
            /// </param>
            public Task<EventCountPerSession> EventPerSessionCount(string eventName, System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), string[] versions = default(string[]))
            {
                if (eventName == null)
                {
                    throw new System.Exception("Parameter 'eventName' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/count_per_session";
                var queryParameters = new Dictionary<string,string>();
                if (eventName != null)
                {
                    queryParameters.Add("event_name", string.Format("{0}", eventName));
                }
                queryParameters.Add("start", string.Format("{0}", start.ToString()));
                if (end != null)
                {
                    queryParameters.Add("end", string.Format("{0}", end?.ToString()));
                }
                if (versions != null)
                {
                    queryParameters.Add("versions", string.Format("{0}", string.Join("|", versions)));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<EventCountPerSession> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Count of events per device by interval in the time range.
            /// </summary>
            /// <param name='eventName'>
            /// The id of the event
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='versions'>
            /// </param>
            public Task<EventCountPerDevice> EventPerDeviceCount(string eventName, System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), string[] versions = default(string[]))
            {
                if (eventName == null)
                {
                    throw new System.Exception("Parameter 'eventName' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/count_per_device";
                var queryParameters = new Dictionary<string,string>();
                if (eventName != null)
                {
                    queryParameters.Add("event_name", string.Format("{0}", eventName));
                }
                queryParameters.Add("start", string.Format("{0}", start.ToString()));
                if (end != null)
                {
                    queryParameters.Add("end", string.Format("{0}", end?.ToString()));
                }
                if (versions != null)
                {
                    queryParameters.Add("versions", string.Format("{0}", string.Join("|", versions)));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<EventCountPerDevice> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Count of active events in the time range ordered by event.
            /// </summary>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='versions'>
            /// </param>
            /// <param name='eventName'>
            /// to select the specific events
            /// </param>
            /// <param name='top'>
            /// The maximum number of results to return. (0 will fetch all results)
            /// </param>
            /// <param name='skip'>
            /// The offset (starting at 0) of the first result to return. This parameter
            /// along with limit is used to perform pagination.
            /// </param>
            /// <param name='inlinecount'>
            /// Controls whether or not to include a count of all the items accross all
            /// pages. Possible values include: 'allpages', 'none'
            /// </param>
            /// <param name='orderby'>
            /// controls the sorting order and sorting based on which column
            /// </param>
            public Task<Events> EventsMethod(System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), string[] versions = default(string[]), string[] eventName = default(string[]), long? top = 30, long? skip = 0, Inlinecount? inlinecount = default(Inlinecount?), string orderby = "count desc")
            {
                if (top > 2000)
                {
                    throw new System.Exception("Validation Failed: InclusiveMaximum, 'top', 2000");
                }
                if (top < 0)
                {
                    throw new System.Exception("Validation Failed: InclusiveMinimum, 'top', 0");
                }
                if (skip < 0)
                {
                    throw new System.Exception("Validation Failed: InclusiveMinimum, 'skip', 0");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/events";
                var queryParameters = new Dictionary<string,string>();
                queryParameters.Add("start", string.Format("{0}", start.ToString()));
                if (end != null)
                {
                    queryParameters.Add("end", string.Format("{0}", end?.ToString()));
                }
                if (versions != null)
                {
                    queryParameters.Add("versions", string.Format("{0}", string.Join("|", versions)));
                }
                if (eventName != null)
                {
                    queryParameters.Add("event_name", string.Format("{0}", string.Join("|", eventName)));
                }
                if (top != null)
                {
                    queryParameters.Add("$top", string.Format("{0}", top?.ToString()));
                }
                if (skip != null)
                {
                    queryParameters.Add("$skip", string.Format("{0}", skip?.ToString()));
                }
                if (inlinecount != null)
                {
                    queryParameters.Add("$inlinecount", string.Format("{0}", inlinecount?.GetEnumMember()));
                }
                if (orderby != null)
                {
                    queryParameters.Add("$orderby", string.Format("{0}", orderby));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<Events> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Percentage of crash-free device by day in the time range based on the
            /// selected versions. Api will return -1 if crash devices is greater than
            /// active devices
            /// </summary>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='versions'>
            /// </param>
            public Task<CrashFreeDevicePercentages> CrashFreeDevicePercentagesMethod(System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), string[] versions = default(string[]))
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/crashfree_device_percentages";
                var queryParameters = new Dictionary<string,string>();
                queryParameters.Add("start", string.Format("{0}", start.ToString()));
                if (end != null)
                {
                    queryParameters.Add("end", string.Format("{0}", end?.ToString()));
                }
                if (versions != null)
                {
                    queryParameters.Add("versions", string.Format("{0}", string.Join("|", versions)));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<CrashFreeDevicePercentages> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Overall crashes and affected users count of the selected crash group with
            /// selected version
            /// </summary>
            /// <param name='crashGroupId'>
            /// The id of the crash group
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<CrashOverall> CrashGroupTotals(string crashGroupId, string version, string ownerName, string appName)
            {
                if (crashGroupId == null)
                {
                    throw new System.Exception("Parameter 'crashGroupId' cannot be null");
                }
                if (version == null)
                {
                    throw new System.Exception("Parameter 'version' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/overall";
                var queryParameters = new Dictionary<string,string>();
                if (crashGroupId != null)
                {
                    queryParameters.Add("crash_group_id", string.Format("{0}", crashGroupId));
                }
                if (version != null)
                {
                    queryParameters.Add("version", string.Format("{0}", version));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<CrashOverall> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// top OSes of the selected crash group with selected version
            /// </summary>
            /// <param name='crashGroupId'>
            /// The id of the crash group
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='top'>
            /// The maximum number of results to return. (0 will fetch all results)
            /// </param>
            public Task<CrashGroupOperatingSystems> CrashGroupOperatingSystemCounts(string crashGroupId, string version, string ownerName, string appName, long? top = 30)
            {
                if (crashGroupId == null)
                {
                    throw new System.Exception("Parameter 'crashGroupId' cannot be null");
                }
                if (version == null)
                {
                    throw new System.Exception("Parameter 'version' cannot be null");
                }
                if (top > 2000)
                {
                    throw new System.Exception("Validation Failed: InclusiveMaximum, 'top', 2000");
                }
                if (top < 0)
                {
                    throw new System.Exception("Validation Failed: InclusiveMinimum, 'top', 0");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/operating_systems";
                var queryParameters = new Dictionary<string,string>();
                if (crashGroupId != null)
                {
                    queryParameters.Add("crash_group_id", string.Format("{0}", crashGroupId));
                }
                if (version != null)
                {
                    queryParameters.Add("version", string.Format("{0}", version));
                }
                if (top != null)
                {
                    queryParameters.Add("$top", string.Format("{0}", top?.ToString()));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<CrashGroupOperatingSystems> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// top models of the selected crash group with selected version
            /// </summary>
            /// <param name='crashGroupId'>
            /// The id of the crash group
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='top'>
            /// The maximum number of results to return. (0 will fetch all results)
            /// </param>
            public Task<CrashGroupModels> CrashGroupModelCounts(string crashGroupId, string version, string ownerName, string appName, long? top = 30)
            {
                if (crashGroupId == null)
                {
                    throw new System.Exception("Parameter 'crashGroupId' cannot be null");
                }
                if (version == null)
                {
                    throw new System.Exception("Parameter 'version' cannot be null");
                }
                if (top > 2000)
                {
                    throw new System.Exception("Validation Failed: InclusiveMaximum, 'top', 2000");
                }
                if (top < 0)
                {
                    throw new System.Exception("Validation Failed: InclusiveMinimum, 'top', 0");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/models";
                var queryParameters = new Dictionary<string,string>();
                if (crashGroupId != null)
                {
                    queryParameters.Add("crash_group_id", string.Format("{0}", crashGroupId));
                }
                if (version != null)
                {
                    queryParameters.Add("version", string.Format("{0}", version));
                }
                if (top != null)
                {
                    queryParameters.Add("$top", string.Format("{0}", top?.ToString()));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<CrashGroupModels> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Count of crashes by day in the time range of the selected crash group with
            /// selected version
            /// </summary>
            /// <param name='crashGroupId'>
            /// The id of the crash group
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            public Task<CrashCounts> CrashGroupCountsMethod(string crashGroupId, string version, System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?))
            {
                if (crashGroupId == null)
                {
                    throw new System.Exception("Parameter 'crashGroupId' cannot be null");
                }
                if (version == null)
                {
                    throw new System.Exception("Parameter 'version' cannot be null");
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/crash_counts";
                var queryParameters = new Dictionary<string,string>();
                if (crashGroupId != null)
                {
                    queryParameters.Add("crash_group_id", string.Format("{0}", crashGroupId));
                }
                if (version != null)
                {
                    queryParameters.Add("version", string.Format("{0}", version));
                }
                queryParameters.Add("start", string.Format("{0}", start.ToString()));
                if (end != null)
                {
                    queryParameters.Add("end", string.Format("{0}", end?.ToString()));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<CrashCounts> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Overall crashes and affected users count of the selected crash groups with
            /// selected versions
            /// </summary>
            /// <param name='crashGroups'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public Task<CrashesOverallItem[]> CrashGroupsTotals(CrashGroupContainer crashGroups, string ownerName, string appName)
            {
                if (crashGroups == null)
                {
                    throw new System.Exception("Parameter 'crashGroups' cannot be null");
                }
                if (crashGroups != null)
                {
                    crashGroups.Validate();
                }
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups";
                var queryParameters = new Dictionary<string,string>();
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Post<CrashesOverallItem[]> ( crashGroups, path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Count of crashes by day in the time range based the selected versions.
            /// </summary>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='versions'>
            /// </param>
            public Task<CrashCounts> CrashCountsMethod(System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), string[] versions = default(string[]))
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/crash_counts";
                var queryParameters = new Dictionary<string,string>();
                queryParameters.Add("start", string.Format("{0}", start.ToString()));
                if (end != null)
                {
                    queryParameters.Add("end", string.Format("{0}", end?.ToString()));
                }
                if (versions != null)
                {
                    queryParameters.Add("versions", string.Format("{0}", string.Join("|", versions)));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<CrashCounts> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Count of active devices by interval in the time range.
            /// </summary>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='versions'>
            /// </param>
            public Task<ActiveDeviceCounts> DeviceCounts(System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), string[] versions = default(string[]))
            {
                if (ownerName == null)
                {
                    throw new System.Exception("Parameter 'ownerName' cannot be null");
                }
                if (appName == null)
                {
                    throw new System.Exception("Parameter 'appName' cannot be null");
                }
                var path = "/v0.1/apps/{owner_name}/{app_name}/analytics/active_device_counts";
                var queryParameters = new Dictionary<string,string>();
                queryParameters.Add("start", string.Format("{0}", start.ToString()));
                if (end != null)
                {
                    queryParameters.Add("end", string.Format("{0}", end?.ToString()));
                }
                if (versions != null)
                {
                    queryParameters.Add("versions", string.Format("{0}", string.Join("|", versions)));
                }
                if (ownerName != null)
                {
                    queryParameters.Add("owner_name", string.Format("{0}", ownerName));
                }
                if (appName != null)
                {
                    queryParameters.Add("app_name", string.Format("{0}", appName));
                }
                return api.Get<ActiveDeviceCounts> ( path: path, queryParameters: queryParameters, authenticated: true );
            }

        }

    }
}
// Code generated by SimpleSwaggerGenerator 1.0.6256.33542
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace MobileCenterApi
{
    using SimpleAuth;
    using System.Net.Http;
    using System.Threading.Tasks;
    using System.Linq;
    using System.Collections.Generic;
    using Models;

    /// <summary>
    /// Mobile Center Frontdoor Graph API Service
    /// </summary>
    public partial class MobileCenterAPIServiceBasicAuthApi : BasicAuthApi
    {
        public MobileCenterAPIServiceBasicAuthApi (string identifier, string encryptionKey, string loginUrl, HttpMessageHandler handler = null ) : base (identifier, encryptionKey, loginUrl, handler )
        {
            Initialize();
        }
    	/// <summary>
        /// An optional partial-method to perform custom initialization.
        ///</summary>
        partial void CustomInitialize();
        /// <summary>
        /// Gets the Account.
        /// </summary>
        public virtual AccountClass Account { get; private set; }

        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            this.Account = new AccountClass(this);
            this.BaseAddress = new System.Uri("https://api.mobile.azure.com/");
            CustomInitialize();
        }

        public class AccountClass
        {
            MobileCenterAPIServiceBasicAuthApi api;
            public AccountClass(MobileCenterAPIServiceBasicAuthApi api)
            {
                this.api = api;
            }
            /// <summary>
            /// Delete the api_token object with the specific id
            /// </summary>
            /// <param name='apiTokenId'>
            /// The unique ID (UUID) of the api token
            /// </param>
            public Task DeleteApiToken(string apiTokenId)
            {
                if (apiTokenId == null)
                {
                    throw new System.Exception("Parameter 'apiTokenId' cannot be null");
                }
                var path = "/v0.1/api_tokens/{api_token_id}";
                var queryParameters = new Dictionary<string,string>();
                if (apiTokenId != null)
                {
                    queryParameters.Add("api_token_id", string.Format("{0}", apiTokenId));
                }
                return api.Delete ( path: path, queryParameters: queryParameters, authenticated: true );
            }

            /// <summary>
            /// Returns api tokens for the authenticated user
            /// </summary>
            public Task<ApiTokensGetResponse[]> GetApiTokens()
            {
                var path = "/v0.1/api_tokens";
                return api.Get<ApiTokensGetResponse[]> ( path: path, authenticated: true );
            }

            /// <summary>
            /// Creates a new API token
            /// </summary>
            /// <param name='description'>
            /// Description of the token
            /// </param>
            public Task<ApiTokensCreateResponse> CreateApiToken(ApiTokensCreateRequest description = default(ApiTokensCreateRequest))
            {
                var path = "/v0.1/api_tokens";
                return api.Post<ApiTokensCreateResponse> ( description, path: path, authenticated: true );
            }

        }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class GetInAppUpdateTokenResponse
    {
        /// <summary>
        /// Initializes a new instance of the GetInAppUpdateTokenResponse
        /// class.
        /// </summary>
        public GetInAppUpdateTokenResponse() { }


        /// <summary>
        /// Gets or sets the api token generated will not be accessible again
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "api_token")]
        public string ApiToken { get; set; }

        public virtual void Validate()
        {
            if (ApiToken == null)
            {
                throw new System.Exception("Property 'ApiToken' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class ApiTokensCreateResponse
    {
        /// <summary>
        /// Initializes a new instance of the ApiTokensCreateResponse class.
        /// </summary>
        public ApiTokensCreateResponse() { }


        /// <summary>
        /// Gets or sets the unique id (UUID) of the api token
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the api token generated will not be accessible again
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "api_token")]
        public string ApiToken { get; set; }

        /// <summary>
        /// Gets or sets the description of the token
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the creation time
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "created_at")]
        public string CreatedAt { get; set; }

        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new System.Exception("Property 'Id' is required/");
            }
            if (ApiToken == null)
            {
                throw new System.Exception("Property 'ApiToken' is required/");
            }
            if (CreatedAt == null)
            {
                throw new System.Exception("Property 'CreatedAt' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class ApiTokensCreateRequest
    {
        /// <summary>
        /// Initializes a new instance of the ApiTokensCreateRequest class.
        /// </summary>
        public ApiTokensCreateRequest() { }


        /// <summary>
        /// Gets or sets the description of the token
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class ApiTokensGetResponse
    {
        /// <summary>
        /// Initializes a new instance of the ApiTokensGetResponse class.
        /// </summary>
        public ApiTokensGetResponse() { }


        /// <summary>
        /// Gets or sets the unique id (UUID) of the api token
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the description of the token
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the creation time
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "created_at")]
        public string CreatedAt { get; set; }

        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new System.Exception("Property 'Id' is required/");
            }
            if (CreatedAt == null)
            {
                throw new System.Exception("Property 'CreatedAt' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class Status
    {
        /// <summary>
        /// Initializes a new instance of the Status class.
        /// </summary>
        public Status() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public string StatusProperty { get; set; }

        public virtual void Validate()
        {
            if (StatusProperty == null)
            {
                throw new System.Exception("Property 'StatusProperty' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class Failure
    {
        /// <summary>
        /// Initializes a new instance of the Failure class.
        /// </summary>
        public Failure() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "message")]
        public string Message { get; set; }

        public virtual void Validate()
        {
            if (Message == null)
            {
                throw new System.Exception("Property 'Message' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class ErrorDetails
    {
        /// <summary>
        /// Initializes a new instance of the ErrorDetails class.
        /// </summary>
        public ErrorDetails() { }


        /// <summary>
        /// Gets or sets possible values include: 'BadRequest', 'Conflict',
        /// 'NotAcceptable', 'NotFound', 'InternalServerError', 'Unauthorized'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "code")]
        public ErrorDetailsCode Code { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "message")]
        public string Message { get; set; }

        public virtual void Validate()
        {
            if (Message == null)
            {
                throw new System.Exception("Property 'Message' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class ErrorResponse
    {
        /// <summary>
        /// Initializes a new instance of the ErrorResponse class.
        /// </summary>
        public ErrorResponse() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "error")]
        public ErrorDetails Error { get; set; }

        public virtual void Validate()
        {
            if (Error == null)
            {
                throw new System.Exception("Property 'Error' is required/");
            }
            if (this.Error != null)
            {
                this.Error.Validate();
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class AppPatchRequest
    {
        /// <summary>
        /// Initializes a new instance of the AppPatchRequest class.
        /// </summary>
        public AppPatchRequest() { }


        /// <summary>
        /// Gets or sets a short text describing the app
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the display name of the app
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "display_name")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets the name of the app used in URLs
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class AppRequest
    {
        /// <summary>
        /// Initializes a new instance of the AppRequest class.
        /// </summary>
        public AppRequest() { }


        /// <summary>
        /// Gets or sets a short text describing the app
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the descriptive name of the app. This can contain any
        /// characters
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "display_name")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets the name of the app used in URLs
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the OS the app will be running on. Possible values
        /// include: 'iOS', 'Android'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "os")]
        public AppRequestOs Os { get; set; }

        /// <summary>
        /// Gets or sets the platform of the app. Possible values include:
        /// 'Objective-C-Swift', 'Java', 'React-Native', 'Xamarin'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "platform")]
        public AppRequestPlatform Platform { get; set; }

        public virtual void Validate()
        {
            if (DisplayName == null)
            {
                throw new System.Exception("Property 'DisplayName' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class FeatureNameResponse
    {
        /// <summary>
        /// Initializes a new instance of the FeatureNameResponse class.
        /// </summary>
        public FeatureNameResponse() { }


        /// <summary>
        /// Gets or sets the unique name of the feature
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new System.Exception("Property 'Name' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class FeatureRequestResponse
    {
        /// <summary>
        /// Initializes a new instance of the FeatureRequestResponse class.
        /// </summary>
        public FeatureRequestResponse() { }


        /// <summary>
        /// Gets or sets the unique name of the feature
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the full (friendly) name of the feature.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "display_name")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets the state of the feature
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "state")]
        public int? State { get; set; }

        /// <summary>
        /// Gets or sets the friendly name of the feature
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new System.Exception("Property 'Name' is required/");
            }
            if (DisplayName == null)
            {
                throw new System.Exception("Property 'DisplayName' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class FeaturePatchRequest
    {
        /// <summary>
        /// Initializes a new instance of the FeaturePatchRequest class.
        /// </summary>
        public FeaturePatchRequest() { }


        /// <summary>
        /// Gets or sets the full (friendly) name of the feature.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "display_name")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets the state of the feature
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "state")]
        public int? State { get; set; }

        /// <summary>
        /// Gets or sets the friendly name of the feature
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class OrgPatchRequest
    {
        /// <summary>
        /// Initializes a new instance of the OrgPatchRequest class.
        /// </summary>
        public OrgPatchRequest() { }


        /// <summary>
        /// Gets or sets the full (friendly) name of the organization.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "display_name")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets the organization's description
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class UserUpdateRequest
    {
        /// <summary>
        /// Initializes a new instance of the UserUpdateRequest class.
        /// </summary>
        public UserUpdateRequest() { }


        /// <summary>
        /// Gets or sets the full name of the user. Might for example be first
        /// and last name
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "display_name")]
        public string DisplayName { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class UserUpdateRequestInternal
    {
        /// <summary>
        /// Initializes a new instance of the UserUpdateRequestInternal class.
        /// </summary>
        public UserUpdateRequestInternal() { }


        /// <summary>
        /// Gets or sets the full name of the user. Might for example be first
        /// and last name
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "display_name")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets the new, unique name that is used to identify.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the date in the future when the user should be checked
        /// again for NPS eligibility
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "next_nps_survey_date")]
        public string NextNpsSurveyDate { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// The information about the app's owner
    /// </summary>
    public partial class Owner
    {
        /// <summary>
        /// Initializes a new instance of the Owner class.
        /// </summary>
        public Owner() { }


        /// <summary>
        /// Gets or sets the unique id (UUID) of the owner
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the avatar URL of the owner
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "avatar_url")]
        public string AvatarUrl { get; set; }

        /// <summary>
        /// Gets or sets the owner's email address
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or sets the owner's display name
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "display_name")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets the unique name that used to identify the owner
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the owner type. Can either be 'org' or 'user'.
        /// Possible values include: 'org', 'user'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public OwnerType Type { get; set; }

        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new System.Exception("Property 'Id' is required/");
            }
            if (Email == null)
            {
                throw new System.Exception("Property 'Email' is required/");
            }
            if (DisplayName == null)
            {
                throw new System.Exception("Property 'DisplayName' is required/");
            }
            if (Name == null)
            {
                throw new System.Exception("Property 'Name' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class AppResponse
    {
        /// <summary>
        /// Initializes a new instance of the AppResponse class.
        /// </summary>
        public AppResponse() { }


        /// <summary>
        /// Gets or sets the unique ID (UUID) of the app
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets a unique and secret key used to identify the app in
        /// communication with the ingestion endpoint for crash reporting and
        /// analytics
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "app_secret")]
        public string AppSecret { get; set; }

        /// <summary>
        /// Gets or sets the description of the app
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the display name of the app
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "display_name")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets the name of the app used in URLs
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the OS the app will be running on. Possible values
        /// include: 'iOS', 'Android'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "os")]
        public AppResponseOs Os { get; set; }

        /// <summary>
        /// Gets or sets the platform of the app. Possible values include:
        /// 'Objective-C-Swift', 'Java', 'React-Native', 'Xamarin'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "platform")]
        public AppResponsePlatform Platform { get; set; }

        /// <summary>
        /// Gets or sets the string representation of the URL pointing to the
        /// app's icon
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "icon_url")]
        public string IconUrl { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "owner")]
        public Owner Owner { get; set; }

        /// <summary>
        /// Gets or sets the unique ID (UUID) of the Azure subscription
        /// associate with the app
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "azure_subscription_id")]
        public string AzureSubscriptionId { get; set; }

        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new System.Exception("Property 'Id' is required/");
            }
            if (AppSecret == null)
            {
                throw new System.Exception("Property 'AppSecret' is required/");
            }
            if (DisplayName == null)
            {
                throw new System.Exception("Property 'DisplayName' is required/");
            }
            if (Name == null)
            {
                throw new System.Exception("Property 'Name' is required/");
            }
            if (Owner == null)
            {
                throw new System.Exception("Property 'Owner' is required/");
            }
            if (this.Owner != null)
            {
                this.Owner.Validate();
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class FeatureResponse
    {
        /// <summary>
        /// Initializes a new instance of the FeatureResponse class.
        /// </summary>
        public FeatureResponse() { }


        /// <summary>
        /// Gets or sets the unique name of the feature
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the friendly name of the feature
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "display_name")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets the description of the feature
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the state (unset, enabled, disabled) of the feature
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "state")]
        public int State { get; set; }

        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new System.Exception("Property 'Name' is required/");
            }
            if (DisplayName == null)
            {
                throw new System.Exception("Property 'DisplayName' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class UserProfileResponse
    {
        /// <summary>
        /// Initializes a new instance of the UserProfileResponse class.
        /// </summary>
        public UserProfileResponse() { }


        /// <summary>
        /// Gets or sets the unique id (UUID) of the user
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the email address of the user
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or sets the full name of the user. Might for example be first
        /// and last name
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "display_name")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets the unique name that is used to identify the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the avatar URL of the user
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "avatar_url")]
        public string AvatarUrl { get; set; }

        /// <summary>
        /// Gets or sets user is required to send an old password in order to
        /// change the password.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "can_change_password")]
        public bool? CanChangePassword { get; set; }

        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new System.Exception("Property 'Id' is required/");
            }
            if (Email == null)
            {
                throw new System.Exception("Property 'Email' is required/");
            }
            if (DisplayName == null)
            {
                throw new System.Exception("Property 'DisplayName' is required/");
            }
            if (Name == null)
            {
                throw new System.Exception("Property 'Name' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class UserNameAvailabilityResponse
    {
        /// <summary>
        /// Initializes a new instance of the UserNameAvailabilityResponse
        /// class.
        /// </summary>
        public UserNameAvailabilityResponse() { }


        /// <summary>
        /// Gets or sets the availability status of the requested user name
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "available")]
        public bool Available { get; set; }

        /// <summary>
        /// Gets or sets the requested user name
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new System.Exception("Property 'Name' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class AppInvitationDetailResponse
    {
        /// <summary>
        /// Initializes a new instance of the AppInvitationDetailResponse
        /// class.
        /// </summary>
        public AppInvitationDetailResponse() { }


        /// <summary>
        /// Gets or sets the unique ID (UUID) of the invitation
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the email address of the invited user
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or sets indicates whether the invited user already exists
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "is_existing_user")]
        public bool IsExistingUser { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "invited_by")]
        public UserProfileResponse InvitedBy { get; set; }

        /// <summary>
        /// Gets or sets the invitation type. Possible values include:
        /// 'developer', 'tester'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "invite_type")]
        public AppInvitationDetailResponseInviteType InviteType { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "app")]
        public AppResponse App { get; set; }

        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new System.Exception("Property 'Id' is required/");
            }
            if (Email == null)
            {
                throw new System.Exception("Property 'Email' is required/");
            }
            if (InvitedBy == null)
            {
                throw new System.Exception("Property 'InvitedBy' is required/");
            }
            if (App == null)
            {
                throw new System.Exception("Property 'App' is required/");
            }
            if (this.InvitedBy != null)
            {
                this.InvitedBy.Validate();
            }
            if (this.App != null)
            {
                this.App.Validate();
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class DistributionGroupResponse
    {
        /// <summary>
        /// Initializes a new instance of the DistributionGroupResponse class.
        /// </summary>
        public DistributionGroupResponse() { }


        /// <summary>
        /// Gets or sets the unique ID of the distribution group
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the name of the distribution group used in URLs
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new System.Exception("Property 'Id' is required/");
            }
            if (Name == null)
            {
                throw new System.Exception("Property 'Name' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class DistributionGroupUserGetResponse
    {
        /// <summary>
        /// Initializes a new instance of the DistributionGroupUserGetResponse
        /// class.
        /// </summary>
        public DistributionGroupUserGetResponse() { }


        /// <summary>
        /// Gets or sets the unique id (UUID) of the user
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the email address of the user
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or sets the full name of the user. Might for example be first
        /// and last name
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "display_name")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets the unique name that is used to identify the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the avatar URL of the user
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "avatar_url")]
        public string AvatarUrl { get; set; }

        /// <summary>
        /// Gets or sets user is required to send an old password in order to
        /// change the password.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "can_change_password")]
        public bool? CanChangePassword { get; set; }

        /// <summary>
        /// Gets or sets whether the has accepted the invite. Available when an
        /// invite is pending, and the value will be "true".
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "invite_pending")]
        public bool? InvitePending { get; set; }

        public virtual void Validate()
        {
            if (Email == null)
            {
                throw new System.Exception("Property 'Email' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class DistributionGroupWithUsersResponse
    {
        /// <summary>
        /// Initializes a new instance of the
        /// DistributionGroupWithUsersResponse class.
        /// </summary>
        public DistributionGroupWithUsersResponse() { }


        /// <summary>
        /// Gets or sets the unique ID of the distribution group
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the name of the distribution group used in URLs
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the distribution group users
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "users")]
        public DistributionGroupUserGetResponse[] Users { get; set; }

        /// <summary>
        /// Gets or sets the count of users in the distribution group
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "total_user_count")]
        public double TotalUserCount { get; set; }

        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new System.Exception("Property 'Id' is required/");
            }
            if (Name == null)
            {
                throw new System.Exception("Property 'Name' is required/");
            }
            if (Users == null)
            {
                throw new System.Exception("Property 'Users' is required/");
            }
            if (this.Users != null)
            {
                foreach (var element in this.Users)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class DistributionGroupRequest
    {
        /// <summary>
        /// Initializes a new instance of the DistributionGroupRequest class.
        /// </summary>
        public DistributionGroupRequest() { }


        /// <summary>
        /// Gets or sets the name of the distribution group
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new System.Exception("Property 'Name' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class DistributionGroupPatchRequest
    {
        /// <summary>
        /// Initializes a new instance of the DistributionGroupPatchRequest
        /// class.
        /// </summary>
        public DistributionGroupPatchRequest() { }


        /// <summary>
        /// Gets or sets the name of the distribution group
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class DistributionGroupUserRequest
    {
        /// <summary>
        /// Initializes a new instance of the DistributionGroupUserRequest
        /// class.
        /// </summary>
        public DistributionGroupUserRequest() { }


        /// <summary>
        /// Gets or sets the list of unique ID (UUID) of the users
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "user_ids")]
        public string[] UserIds { get; set; }

        /// <summary>
        /// Gets or sets the list of emails of the users
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "user_emails")]
        public string[] UserEmails { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class OrganizationRequest
    {
        /// <summary>
        /// Initializes a new instance of the OrganizationRequest class.
        /// </summary>
        public OrganizationRequest() { }


        /// <summary>
        /// Gets or sets the display name of the organization
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "display_name")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets the name of the organization used in URLs
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the description of the organization
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new System.Exception("Property 'Name' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class DistributionGroupUserPostResponse
    {
        /// <summary>
        /// Initializes a new instance of the DistributionGroupUserPostResponse
        /// class.
        /// </summary>
        public DistributionGroupUserPostResponse() { }


        /// <summary>
        /// Gets or sets the unique ID (UUID) of the user
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "user_id")]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or sets the email of the user
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "user_email")]
        public string UserEmail { get; set; }

        /// <summary>
        /// Gets or sets the status code of the result
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public int Status { get; set; }

        /// <summary>
        /// Gets or sets the code of the result
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "code")]
        public string Code { get; set; }

        /// <summary>
        /// Gets or sets the message of the result
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "message")]
        public int? Message { get; set; }

        /// <summary>
        /// Gets or sets whether the has accepted the invite. Available when an
        /// invite is pending, and the value will be "true".
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "invite_pending")]
        public bool? InvitePending { get; set; }

        public virtual void Validate()
        {
            //Nothing to validate
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class DistributionGroupUserDeleteResponse
    {
        /// <summary>
        /// Initializes a new instance of the
        /// DistributionGroupUserDeleteResponse class.
        /// </summary>
        public DistributionGroupUserDeleteResponse() { }


        /// <summary>
        /// Gets or sets the unique ID (UUID) of the user
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "user_id")]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or sets the email of the user
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "user_email")]
        public string UserEmail { get; set; }

        /// <summary>
        /// Gets or sets the status code of the result
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public int Status { get; set; }

        /// <summary>
        /// Gets or sets the code of the result
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "code")]
        public string Code { get; set; }

        /// <summary>
        /// Gets or sets the message of the result
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "message")]
        public int? Message { get; set; }

        public virtual void Validate()
        {
            //Nothing to validate
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class GrantAdminRoleRequest
    {
        /// <summary>
        /// Initializes a new instance of the GrantAdminRoleRequest class.
        /// </summary>
        public GrantAdminRoleRequest() { }


        /// <summary>
        /// Gets or sets the new admin_role. Possible values include:
        /// 'superAdmin', 'admin', 'devOps', 'notAdmin'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "admin_role")]
        public GrantAdminRoleRequestAdminRole AdminRole { get; set; }

        public virtual void Validate()
        {
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class OrganizationResponse
    {
        /// <summary>
        /// Initializes a new instance of the OrganizationResponse class.
        /// </summary>
        public OrganizationResponse() { }


        /// <summary>
        /// Gets or sets the unique id (UUID) of the organization
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the slug name of the organization
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the display name of the organization
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "display_name")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets the description of the organization
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new System.Exception("Property 'Id' is required/");
            }
            if (Name == null)
            {
                throw new System.Exception("Property 'Name' is required/");
            }
            if (DisplayName == null)
            {
                throw new System.Exception("Property 'DisplayName' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class OrgNameAvailabilityResponse
    {
        /// <summary>
        /// Initializes a new instance of the OrgNameAvailabilityResponse
        /// class.
        /// </summary>
        public OrgNameAvailabilityResponse() { }


        /// <summary>
        /// Gets or sets the availability status of the requested org name
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "available")]
        public bool Available { get; set; }

        /// <summary>
        /// Gets or sets the generated org name
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new System.Exception("Property 'Name' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// The source repository
    /// </summary>
    public partial class SourceRepository
    {
        /// <summary>
        /// Initializes a new instance of the SourceRepository class.
        /// </summary>
        public SourceRepository() { }


        /// <summary>
        /// Gets or sets the repository name
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// A websocket reference
    /// </summary>
    public partial class WebSocketContainer
    {
        /// <summary>
        /// Initializes a new instance of the WebSocketContainer class.
        /// </summary>
        public WebSocketContainer() { }


        /// <summary>
        /// Gets or sets webSocket URL
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "url")]
        public string Url { get; set; }

        public virtual void Validate()
        {
            if (Url == null)
            {
                throw new System.Exception("Property 'Url' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class XcodeScheme
    {
        /// <summary>
        /// Initializes a new instance of the XcodeScheme class.
        /// </summary>
        public XcodeScheme() { }


        /// <summary>
        /// Gets or sets scheme name
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets does scheme have a test action?
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "hasTestAction")]
        public bool HasTestAction { get; set; }

        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new System.Exception("Property 'Name' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class XcodeSchemeContainer
    {
        /// <summary>
        /// Initializes a new instance of the XcodeSchemeContainer class.
        /// </summary>
        public XcodeSchemeContainer() { }


        /// <summary>
        /// Gets or sets path to project
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "path")]
        public string Path { get; set; }

        /// <summary>
        /// Gets or sets project schemes
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sharedSchemes")]
        public XcodeScheme[] SharedSchemes { get; set; }

        /// <summary>
        /// Gets or sets path to CococaPods file, if present
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "podfilePath")]
        public string PodfilePath { get; set; }

        public virtual void Validate()
        {
            if (Path == null)
            {
                throw new System.Exception("Property 'Path' is required/");
            }
            if (SharedSchemes == null)
            {
                throw new System.Exception("Property 'SharedSchemes' is required/");
            }
            if (this.SharedSchemes != null)
            {
                foreach (var element in this.SharedSchemes)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class XamarinSolution
    {
        /// <summary>
        /// Initializes a new instance of the XamarinSolution class.
        /// </summary>
        public XamarinSolution() { }


        /// <summary>
        /// Gets or sets path to solution
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "path")]
        public string Path { get; set; }

        /// <summary>
        /// Gets or sets solution configurations
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "configurations")]
        public string[] Configurations { get; set; }

        public virtual void Validate()
        {
            if (Path == null)
            {
                throw new System.Exception("Property 'Path' is required/");
            }
            if (Configurations == null)
            {
                throw new System.Exception("Property 'Configurations' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class AndroidModule
    {
        /// <summary>
        /// Initializes a new instance of the AndroidModule class.
        /// </summary>
        public AndroidModule() { }


        /// <summary>
        /// Gets or sets name of the Android module
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the product flavors of the Android module
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "productFlavors")]
        public string[] ProductFlavors { get; set; }

        /// <summary>
        /// Gets or sets the build variants of the Android module (matrix of
        /// product flavor + build type (debug|release))
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "buildVariants")]
        public string[] BuildVariants { get; set; }

        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new System.Exception("Property 'Name' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class AndroidProject
    {
        /// <summary>
        /// Initializes a new instance of the AndroidProject class.
        /// </summary>
        public AndroidProject() { }


        /// <summary>
        /// Gets or sets android Gradle modules
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "androidModules")]
        public AndroidModule[] AndroidModules { get; set; }

        /// <summary>
        /// Gets or sets the path of the Gradle wrapper
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "gradleWrapperPath")]
        public string GradleWrapperPath { get; set; }

        public virtual void Validate()
        {
            if (AndroidModules == null)
            {
                throw new System.Exception("Property 'AndroidModules' is required/");
            }
            if (this.AndroidModules != null)
            {
                foreach (var element in this.AndroidModules)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// A collection of projects for each type of toolset
    /// </summary>
    public partial class ToolsetProjects
    {
        /// <summary>
        /// Initializes a new instance of the ToolsetProjects class.
        /// </summary>
        public ToolsetProjects() { }


        /// <summary>
        /// Gets or sets xcode projects, with their schemes
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "xcode")]
        public XcodeSchemeContainer[] Xcode { get; set; }

        /// <summary>
        /// Gets or sets package.json filess
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "javascript")]
        public string[] Javascript { get; set; }

        /// <summary>
        /// Gets or sets xamarin solutions
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "xamarin")]
        public XamarinSolution[] Xamarin { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "android")]
        public AndroidProject Android { get; set; }

        public virtual void Validate()
        {
            if (this.Xcode != null)
            {
                foreach (var element in this.Xcode)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.Xamarin != null)
            {
                foreach (var element1 in this.Xamarin)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (this.Android != null)
            {
                this.Android.Validate();
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class Build
    {
        /// <summary>
        /// Initializes a new instance of the Build class.
        /// </summary>
        public Build() { }


        /// <summary>
        /// Gets or sets the build ID
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public int Id { get; set; }

        /// <summary>
        /// Gets or sets the build number
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "buildNumber")]
        public string BuildNumber { get; set; }

        /// <summary>
        /// Gets or sets the time the build was queued
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "queueTime")]
        public string QueueTime { get; set; }

        /// <summary>
        /// Gets or sets the time the build was started
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "startTime")]
        public string StartTime { get; set; }

        /// <summary>
        /// Gets or sets the time the build was finished
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "finishTime")]
        public string FinishTime { get; set; }

        /// <summary>
        /// Gets or sets the time the build status was last changed
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastChangedDate")]
        public string LastChangedDate { get; set; }

        /// <summary>
        /// Gets or sets the build status
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets the build result
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "result")]
        public string Result { get; set; }

        /// <summary>
        /// Gets or sets the source branch name
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceBranch")]
        public string SourceBranch { get; set; }

        /// <summary>
        /// Gets or sets the source SHA
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceVersion")]
        public string SourceVersion { get; set; }

        public virtual void Validate()
        {
            if (BuildNumber == null)
            {
                throw new System.Exception("Property 'BuildNumber' is required/");
            }
            if (QueueTime == null)
            {
                throw new System.Exception("Property 'QueueTime' is required/");
            }
            if (Status == null)
            {
                throw new System.Exception("Property 'Status' is required/");
            }
            if (Result == null)
            {
                throw new System.Exception("Property 'Result' is required/");
            }
            if (SourceBranch == null)
            {
                throw new System.Exception("Property 'SourceBranch' is required/");
            }
            if (SourceVersion == null)
            {
                throw new System.Exception("Property 'SourceVersion' is required/");
            }
            if (this.Id <= 0)
            {
                throw new System.Exception("Validation Failed: ExclusiveMinimum, 'Id', 0");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// The branch build status
    /// </summary>
    public partial class BranchStatus
    {
        /// <summary>
        /// Initializes a new instance of the BranchStatus class.
        /// </summary>
        public BranchStatus() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "configured")]
        public bool Configured { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastBuild")]
        public Build LastBuild { get; set; }

        public virtual void Validate()
        {
            if (this.LastBuild != null)
            {
                this.LastBuild.Validate();
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class Commit
    {
        /// <summary>
        /// Initializes a new instance of the Commit class.
        /// </summary>
        public Commit() { }


        /// <summary>
        /// Gets or sets the commit SHA
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sha")]
        public string Sha { get; set; }

        /// <summary>
        /// Gets or sets the URL to the commit
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "url")]
        public string Url { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class Branch
    {
        /// <summary>
        /// Initializes a new instance of the Branch class.
        /// </summary>
        public Branch() { }


        /// <summary>
        /// Gets or sets the branch name
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "commit")]
        public Commit Commit { get; set; }

        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new System.Exception("Property 'Name' is required/");
            }
            if (Commit == null)
            {
                throw new System.Exception("Property 'Commit' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// The branch build core properties
    /// </summary>
    public partial class BranchProperties
    {
        /// <summary>
        /// Initializes a new instance of the BranchProperties class.
        /// </summary>
        public BranchProperties() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "branch")]
        public Branch Branch { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enabled")]
        public bool? Enabled { get; set; }

        public virtual void Validate()
        {
            if (this.Branch != null)
            {
                this.Branch.Validate();
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// Build configuration when Xcode is part of the build steps
    /// </summary>
    public partial class XcodeBranchConfigurationProperties
    {
        /// <summary>
        /// Initializes a new instance of the
        /// XcodeBranchConfigurationProperties class.
        /// </summary>
        public XcodeBranchConfigurationProperties() { }


        /// <summary>
        /// Gets or sets xcode project/workspace path
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "projectOrWorkspacePath")]
        public string ProjectOrWorkspacePath { get; set; }

        /// <summary>
        /// Gets or sets path to CococaPods file, if present
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "podfilePath")]
        public string PodfilePath { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningProfileEncoded")]
        public string ProvisioningProfileEncoded { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "certificateEncoded")]
        public string CertificateEncoded { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "certificatePassword")]
        public string CertificatePassword { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "scheme")]
        public string Scheme { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "xcodeVersion")]
        public string XcodeVersion { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningProfileFilename")]
        public string ProvisioningProfileFilename { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "certificateFilename")]
        public string CertificateFilename { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "teamId")]
        public string TeamId { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "automaticSigning")]
        public bool? AutomaticSigning { get; set; }

        public virtual void Validate()
        {
            if (ProjectOrWorkspacePath == null)
            {
                throw new System.Exception("Property 'ProjectOrWorkspacePath' is required/");
            }
            if (Scheme == null)
            {
                throw new System.Exception("Property 'Scheme' is required/");
            }
            if (XcodeVersion == null)
            {
                throw new System.Exception("Property 'XcodeVersion' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// Build configuration when React Native, or other JavaScript tech, is
    /// part of the build steps
    /// </summary>
    public partial class JavaScriptBranchConfigurationProperties
    {
        /// <summary>
        /// Initializes a new instance of the
        /// JavaScriptBranchConfigurationProperties class.
        /// </summary>
        public JavaScriptBranchConfigurationProperties() { }


        /// <summary>
        /// Gets or sets path to package.json file for the main project, e.g.
        /// "package.json" or "myapp/package.json"
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "packageJsonPath")]
        public string PackageJsonPath { get; set; }

        /// <summary>
        /// Gets or sets whether to run Jest unit tests, via npm test, during
        /// the build
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "runTests")]
        public bool? RunTests { get; set; }

        public virtual void Validate()
        {
            if (PackageJsonPath == null)
            {
                throw new System.Exception("Property 'PackageJsonPath' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// Build configuration for Xamarin projects
    /// </summary>
    public partial class XamarinBranchConfigurationProperties
    {
        /// <summary>
        /// Initializes a new instance of the
        /// XamarinBranchConfigurationProperties class.
        /// </summary>
        public XamarinBranchConfigurationProperties() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "slnPath")]
        public string SlnPath { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isSimBuild")]
        public string IsSimBuild { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "args")]
        public string Args { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "configuration")]
        public string Configuration { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "p12File")]
        public string P12File { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "p12Pwd")]
        public string P12Pwd { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provProfile")]
        public string ProvProfile { get; set; }

        public virtual void Validate()
        {
            if (SlnPath == null)
            {
                throw new System.Exception("Property 'SlnPath' is required/");
            }
            if (IsSimBuild == null)
            {
                throw new System.Exception("Property 'IsSimBuild' is required/");
            }
            if (Args == null)
            {
                throw new System.Exception("Property 'Args' is required/");
            }
            if (Configuration == null)
            {
                throw new System.Exception("Property 'Configuration' is required/");
            }
            if (P12File == null)
            {
                throw new System.Exception("Property 'P12File' is required/");
            }
            if (P12Pwd == null)
            {
                throw new System.Exception("Property 'P12Pwd' is required/");
            }
            if (ProvProfile == null)
            {
                throw new System.Exception("Property 'ProvProfile' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// Build configuration for Android projects
    /// </summary>
    public partial class AndroidBranchConfigurationProperties
    {
        /// <summary>
        /// Initializes a new instance of the
        /// AndroidBranchConfigurationProperties class.
        /// </summary>
        public AndroidBranchConfigurationProperties() { }


        /// <summary>
        /// Gets or sets path to the Gradle wrapper script
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "gradleWrapperPath")]
        public string GradleWrapperPath { get; set; }

        /// <summary>
        /// Gets or sets the Gradle module to build
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "module")]
        public string Module { get; set; }

        /// <summary>
        /// Gets or sets the Android build variant to build
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "variant")]
        public string Variant { get; set; }

        /// <summary>
        /// Gets or sets whether to run unit tests during the build (default)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "runTests")]
        public bool? RunTests { get; set; }

        /// <summary>
        /// Gets or sets whether to run lint checks during the build (default)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "runLint")]
        public bool? RunLint { get; set; }

        public virtual void Validate()
        {
            if (Module == null)
            {
                throw new System.Exception("Property 'Module' is required/");
            }
            if (Variant == null)
            {
                throw new System.Exception("Property 'Variant' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// The branch build configuration for each toolset
    /// </summary>
    public partial class BranchConfigurationToolsets
    {
        /// <summary>
        /// Initializes a new instance of the BranchConfigurationToolsets
        /// class.
        /// </summary>
        public BranchConfigurationToolsets() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "xcode")]
        public XcodeBranchConfigurationProperties Xcode { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "javascript")]
        public JavaScriptBranchConfigurationProperties Javascript { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "xamarin")]
        public XamarinBranchConfigurationProperties Xamarin { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "android")]
        public AndroidBranchConfigurationProperties Android { get; set; }

        public virtual void Validate()
        {
            if (this.Xcode != null)
            {
                this.Xcode.Validate();
            }
            if (this.Javascript != null)
            {
                this.Javascript.Validate();
            }
            if (this.Xamarin != null)
            {
                this.Xamarin.Validate();
            }
            if (this.Android != null)
            {
                this.Android.Validate();
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// The branch build configuration
    /// </summary>
    public partial class BranchConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the BranchConfiguration class.
        /// </summary>
        public BranchConfiguration() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public int Id { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'continous', 'continuous',
        /// 'manual'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "trigger")]
        public BranchConfigurationTrigger? Trigger { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "testsEnabled")]
        public bool? TestsEnabled { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "signed")]
        public bool? Signed { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "toolsets")]
        public BranchConfigurationToolsets Toolsets { get; set; }

        public virtual void Validate()
        {
            if (this.Toolsets != null)
            {
                this.Toolsets.Validate();
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class RepoConfig
    {
        /// <summary>
        /// Initializes a new instance of the RepoConfig class.
        /// </summary>
        public RepoConfig() { }


        /// <summary>
        /// Gets or sets type of repository
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets state of the configuration. Possible values include:
        /// 'unauthorized', 'inactive', 'active'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "state")]
        public RepoConfigState State { get; set; }

        /// <summary>
        /// Gets or sets URL of the repository
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "repo_url")]
        public string RepoUrl { get; set; }

        /// <summary>
        /// Gets or sets repository identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        public virtual void Validate()
        {
            if (Type == null)
            {
                throw new System.Exception("Property 'Type' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class RepoInfo
    {
        /// <summary>
        /// Initializes a new instance of the RepoInfo class.
        /// </summary>
        public RepoInfo() { }


        /// <summary>
        /// Gets or sets the repository url
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "repo_url")]
        public string RepoUrl { get; set; }

        public virtual void Validate()
        {
            if (RepoUrl == null)
            {
                throw new System.Exception("Property 'RepoUrl' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// The Xcode version
    /// </summary>
    public partial class XcodeVersion
    {
        /// <summary>
        /// Initializes a new instance of the XcodeVersion class.
        /// </summary>
        public XcodeVersion() { }


        /// <summary>
        /// Gets or sets the version name
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets if the version is current
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "current")]
        public bool? Current { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class BuildParams
    {
        /// <summary>
        /// Initializes a new instance of the BuildParams class.
        /// </summary>
        public BuildParams() { }


        /// <summary>
        /// Gets or sets version to build
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceVersion")]
        public string SourceVersion { get; set; }

        /// <summary>
        /// Gets or sets run build in debug mode
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "debug")]
        public bool? Debug { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class BuildPatch
    {
        /// <summary>
        /// Initializes a new instance of the BuildPatch class.
        /// </summary>
        public BuildPatch() { }


        /// <summary>
        /// Gets or sets the build status; used to cancel builds. Possible
        /// values include: 'cancelling'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public BuildPatchStatus? Status { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class SuccessResponse
    {
        /// <summary>
        /// Initializes a new instance of the SuccessResponse class.
        /// </summary>
        public SuccessResponse() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "message")]
        public string Message { get; set; }

        public virtual void Validate()
        {
            if (Message == null)
            {
                throw new System.Exception("Property 'Message' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class ValidationErrorResponse
    {
        /// <summary>
        /// Initializes a new instance of the ValidationErrorResponse class.
        /// </summary>
        public ValidationErrorResponse() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "code")]
        public string Code { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "message")]
        public string Message { get; set; }

        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new System.Exception("Property 'Id' is required/");
            }
            if (Code == null)
            {
                throw new System.Exception("Property 'Code' is required/");
            }
            if (Message == null)
            {
                throw new System.Exception("Property 'Message' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class DistributionGroup
    {
        /// <summary>
        /// Initializes a new instance of the DistributionGroup class.
        /// </summary>
        public DistributionGroup() { }


        /// <summary>
        /// Gets or sets ID identifying a unique distribution group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets a name identifying a unique distribution group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets is the containing release the latest one in this
        /// distribution group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "is_latest")]
        public bool? IsLatest { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// Basic information on a release
    /// </summary>
    public partial class BasicReleaseDetails
    {
        /// <summary>
        /// Initializes a new instance of the BasicReleaseDetails class.
        /// </summary>
        public BasicReleaseDetails() { }


        /// <summary>
        /// Gets or sets ID identifying this unique release.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the release's version.&amp;lt;br&amp;gt;
        /// For iOS: CFBundleVersion from info.plist.&amp;lt;br&amp;gt;
        /// For Android: android:versionCode from AppManifest.xml.
        ///
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "version")]
        public string Version { get; set; }

        /// <summary>
        /// Gets or sets the release's short version.&amp;lt;br&amp;gt;
        /// For iOS: CFBundleShortVersionString from
        /// info.plist.&amp;lt;br&amp;gt;
        /// For Android: android:versionName from AppManifest.xml.
        ///
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "short_version")]
        public string ShortVersion { get; set; }

        /// <summary>
        /// Gets or sets UTC time in ISO 8601 format of the uploaded time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "uploaded_at")]
        public string UploadedAt { get; set; }

        /// <summary>
        /// Gets or sets a list of distribution groups that are associated with
        /// this release.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "distribution_groups")]
        public DistributionGroup[] DistributionGroups { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// Details of an uploaded release
    /// </summary>
    public partial class ReleaseDetails
    {
        /// <summary>
        /// Initializes a new instance of the ReleaseDetails class.
        /// </summary>
        public ReleaseDetails() { }


        /// <summary>
        /// Gets or sets ID identifying this unique release.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets OBSOLETE. Will be removed in next version. The
        /// availability concept is now replaced with distributed. Any
        /// 'available' release will be associated with the default
        /// distribution group of an app.&amp;lt;/br&amp;gt;
        /// The release state.&amp;lt;br&amp;gt;
        /// &amp;lt;b&amp;gt;available&amp;lt;/b&amp;gt;: The uploaded release
        /// has been distributed.&amp;lt;br&amp;gt;
        /// &amp;lt;b&amp;gt;unavailable&amp;lt;/b&amp;gt;: The uploaded
        /// release is not visible to the user. &amp;lt;br&amp;gt;
        /// . Possible values include: 'available', 'unavailable'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public ReleaseDetailsStatus? Status { get; set; }

        /// <summary>
        /// Gets or sets the app's name (extracted from the uploaded release).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "app_name")]
        public string AppName { get; set; }

        /// <summary>
        /// Gets or sets the release's version.&amp;lt;br&amp;gt;
        /// For iOS: CFBundleVersion from info.plist.
        /// For Android: android:versionCode from AppManifest.xml.
        ///
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "version")]
        public string Version { get; set; }

        /// <summary>
        /// Gets or sets the release's short version.&amp;lt;br&amp;gt;
        /// For iOS: CFBundleShortVersionString from info.plist.
        /// For Android: android:versionName from AppManifest.xml.
        ///
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "short_version")]
        public string ShortVersion { get; set; }

        /// <summary>
        /// Gets or sets the release's release notes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "release_notes")]
        public string ReleaseNotes { get; set; }

        /// <summary>
        /// Gets or sets the release's release notes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioning_profile_name")]
        public string ProvisioningProfileName { get; set; }

        /// <summary>
        /// Gets or sets the release's size in bytes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "size")]
        public double? Size { get; set; }

        /// <summary>
        /// Gets or sets the release's minimum required operating system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "min_os")]
        public string MinOs { get; set; }

        /// <summary>
        /// Gets or sets MD5 checksum of the release binary.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "fingerprint")]
        public string Fingerprint { get; set; }

        /// <summary>
        /// Gets or sets UTC time in ISO 8601 format of the uploaded time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "uploaded_at")]
        public System.DateTime UploadedAt { get; set; }

        /// <summary>
        /// Gets or sets the URL that hosts the binary for this release.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "download_url")]
        public string DownloadUrl { get; set; }

        /// <summary>
        /// Gets or sets a URL to the app's icon.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "app_icon_url")]
        public string AppIconUrl { get; set; }

        /// <summary>
        /// Gets or sets the href required to install a release on a mobile
        /// device. On iOS devices will be prefixed with
        /// `itms-services://?action=download-manifest&amp;amp;url=`
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "install_url")]
        public string InstallUrl { get; set; }

        /// <summary>
        /// Gets or sets a list of distribution groups that are associated with
        /// this release.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "distribution_groups")]
        public DistributionGroup[] DistributionGroups { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// A response containing information pertaining to starting a release
    /// upload process
    /// </summary>
    public partial class ReleaseUploadBeginResponse
    {
        /// <summary>
        /// Initializes a new instance of the ReleaseUploadBeginResponse class.
        /// </summary>
        public ReleaseUploadBeginResponse() { }


        /// <summary>
        /// Gets or sets the ID for the current upload
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "upload_id")]
        public string UploadId { get; set; }

        /// <summary>
        /// Gets or sets the URL where the client needs to upload the release
        /// to
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "upload_url")]
        public string UploadUrl { get; set; }

        public virtual void Validate()
        {
            if (UploadId == null)
            {
                throw new System.Exception("Property 'UploadId' is required/");
            }
            if (UploadUrl == null)
            {
                throw new System.Exception("Property 'UploadUrl' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// A request containing information pertaining to complete a release
    /// upload process
    /// </summary>
    public partial class ReleaseUploadEndRequest
    {
        /// <summary>
        /// Initializes a new instance of the ReleaseUploadEndRequest class.
        /// </summary>
        public ReleaseUploadEndRequest() { }


        /// <summary>
        /// Gets or sets the desired operation for the upload. Possible values
        /// include: 'committed', 'aborted'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public ReleaseUploadEndRequestStatus Status { get; set; }

        public virtual void Validate()
        {
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// A response containing information about the uploaded release.
    /// </summary>
    public partial class ReleaseUploadEndResponse
    {
        /// <summary>
        /// Initializes a new instance of the ReleaseUploadEndResponse class.
        /// </summary>
        public ReleaseUploadEndResponse() { }


        /// <summary>
        /// Gets or sets a URL to the new release. If upload was aborted will
        /// be null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "release_url")]
        public string ReleaseUrl { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// A request containing information for updating a release.
    /// </summary>
    public partial class ReleaseUpdateRequest
    {
        /// <summary>
        /// Initializes a new instance of the ReleaseUpdateRequest class.
        /// </summary>
        public ReleaseUpdateRequest() { }


        /// <summary>
        /// Gets or sets name of a distribution group. The release will be
        /// associated with this distribution group. If the distribution group
        /// doesn't exist a 400 is returned. If both distribution group name
        /// and id are passed, the id is taking precedence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "distribution_group_name")]
        public string DistributionGroupName { get; set; }

        /// <summary>
        /// Gets or sets id of a distribution group. The release will be
        /// associated with this distribution group. If the distribution group
        /// doesn't exist a 400 is returned. If both distribution group name
        /// and id are passed, the id is taking precedence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "distribution_group_id")]
        public string DistributionGroupId { get; set; }

        /// <summary>
        /// Gets or sets release notes for this release.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "release_notes")]
        public string ReleaseNotes { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// A response containing information pertaining to starting a package
    /// upload process
    /// </summary>
    public partial class PackageUploadBeginResponse
    {
        /// <summary>
        /// Initializes a new instance of the PackageUploadBeginResponse class.
        /// </summary>
        public PackageUploadBeginResponse() { }


        /// <summary>
        /// Gets or sets the ID for the current upload
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "upload_id")]
        public string UploadId { get; set; }

        /// <summary>
        /// Gets or sets the URL where the client needs to upload the package
        /// to
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "upload_url")]
        public string UploadUrl { get; set; }

        public virtual void Validate()
        {
            if (UploadId == null)
            {
                throw new System.Exception("Property 'UploadId' is required/");
            }
            if (UploadUrl == null)
            {
                throw new System.Exception("Property 'UploadUrl' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// A request containing information pertaining to completing a package
    /// upload process
    /// </summary>
    public partial class PackageUploadEndRequest
    {
        /// <summary>
        /// Initializes a new instance of the PackageUploadEndRequest class.
        /// </summary>
        public PackageUploadEndRequest() { }


        /// <summary>
        /// Gets or sets the desired operation for the upload. Possible values
        /// include: 'committed', 'aborted'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public PackageUploadEndRequestStatus Status { get; set; }

        public virtual void Validate()
        {
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// A response containing information about the uploaded package.
    /// </summary>
    public partial class PackageUploadEndResponse
    {
        /// <summary>
        /// Initializes a new instance of the PackageUploadEndResponse class.
        /// </summary>
        public PackageUploadEndResponse() { }


        /// <summary>
        /// Gets or sets a URL to the new package. If upload was aborted will
        /// be null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "package_url")]
        public string PackageUrl { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// A request containing information for updating a package.
    /// </summary>
    public partial class PackageUpdateRequest
    {
        /// <summary>
        /// Initializes a new instance of the PackageUpdateRequest class.
        /// </summary>
        public PackageUpdateRequest() { }


        /// <summary>
        /// Gets or sets name of a distribution group. The package will be
        /// associated with this distribution group. If the distribution group
        /// doesn't exist a 400 is returned. If both distribution group name
        /// and id are passed, the id is taking precedence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "distribution_group_name")]
        public string DistributionGroupName { get; set; }

        /// <summary>
        /// Gets or sets id of a distribution group. The package will be
        /// associated with this distribution group. If the distribution group
        /// doesn't exist a 400 is returned. If both distribution group name
        /// and id are passed, the id is taking precedence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "distribution_group_id")]
        public string DistributionGroupId { get; set; }

        /// <summary>
        /// Gets or sets release notes for this package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "release_notes")]
        public string ReleaseNotes { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// Basic information on a pacakge
    /// </summary>
    public partial class BasicPackageDetails
    {
        /// <summary>
        /// Initializes a new instance of the BasicPackageDetails class.
        /// </summary>
        public BasicPackageDetails() { }


        /// <summary>
        /// Gets or sets ID identifying this unique package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "package_id")]
        public string PackageId { get; set; }

        /// <summary>
        /// Gets or sets the package's version.&amp;lt;br&amp;gt;
        /// For iOS: CFBundleVersion from info.plist.&amp;lt;br&amp;gt;
        /// For Android: android:versionCode from AppManifest.xml.
        ///
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "version")]
        public string Version { get; set; }

        /// <summary>
        /// Gets or sets the package's short version.&amp;lt;br&amp;gt;
        /// For iOS: CFBundleShortVersionString from
        /// info.plist.&amp;lt;br&amp;gt;
        /// For Android: android:versionName from AppManifest.xml.
        ///
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "short_version")]
        public string ShortVersion { get; set; }

        /// <summary>
        /// Gets or sets UTC time in ISO 8601 format of the uploaded time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "uploaded_at")]
        public string UploadedAt { get; set; }

        /// <summary>
        /// Gets or sets a list of distribution groups that are associated with
        /// this package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "distribution_groups")]
        public DistributionGroup[] DistributionGroups { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// Details of an uploaded package
    /// </summary>
    public partial class PackageDetails
    {
        /// <summary>
        /// Initializes a new instance of the PackageDetails class.
        /// </summary>
        public PackageDetails() { }


        /// <summary>
        /// Gets or sets ID identifying this unique package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "package_id")]
        public string PackageId { get; set; }

        /// <summary>
        /// Gets or sets OBSOLETE. Will be removed in next version. The
        /// availability concept is now replaced with distributed. Any
        /// 'available' package will be associated with the default
        /// distribution group of an app.&amp;lt;/br&amp;gt;
        /// The package state.&amp;lt;br&amp;gt;
        /// &amp;lt;b&amp;gt;available&amp;lt;/b&amp;gt;: The uploaded package
        /// has been distributed.&amp;lt;br&amp;gt;
        /// &amp;lt;b&amp;gt;unavailable&amp;lt;/b&amp;gt;: The uploaded
        /// package is not visible to the user. &amp;lt;br&amp;gt;
        /// . Possible values include: 'available', 'unavailable'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public PackageDetailsStatus? Status { get; set; }

        /// <summary>
        /// Gets or sets the app's name (extracted from the uploaded package).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "app_name")]
        public string AppName { get; set; }

        /// <summary>
        /// Gets or sets the package's version.&amp;lt;br&amp;gt;
        /// For iOS: CFBundleVersion from info.plist.
        /// For Android: android:versionCode from AppManifest.xml.
        ///
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "version")]
        public string Version { get; set; }

        /// <summary>
        /// Gets or sets the package's short version.&amp;lt;br&amp;gt;
        /// For iOS: CFBundleShortVersionString from info.plist.
        /// For Android: android:versionName from AppManifest.xml.
        ///
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "short_version")]
        public string ShortVersion { get; set; }

        /// <summary>
        /// Gets or sets the package's release notes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "release_notes")]
        public string ReleaseNotes { get; set; }

        /// <summary>
        /// Gets or sets the package's release notes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioning_profile_name")]
        public string ProvisioningProfileName { get; set; }

        /// <summary>
        /// Gets or sets the package's size in bytes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "size")]
        public double? Size { get; set; }

        /// <summary>
        /// Gets or sets the package's minimum required operating system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "min_os")]
        public string MinOs { get; set; }

        /// <summary>
        /// Gets or sets MD5 checksum of the package binary.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "fingerprint")]
        public string Fingerprint { get; set; }

        /// <summary>
        /// Gets or sets UTC time in ISO 8601 format of the uploaded time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "uploaded_at")]
        public string UploadedAt { get; set; }

        /// <summary>
        /// Gets or sets the URL that hosts the binary for this package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "download_url")]
        public string DownloadUrl { get; set; }

        /// <summary>
        /// Gets or sets a URL to the app's icon.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "app_icon_url")]
        public string AppIconUrl { get; set; }

        /// <summary>
        /// Gets or sets the href required to install a package on a mobile
        /// device. On iOS devices will be prefixed with
        /// `itms-services://?action=download-manifest&amp;amp;url=`
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "install_url")]
        public string InstallUrl { get; set; }

        /// <summary>
        /// Gets or sets a list of distribution groups that are associated with
        /// this package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "distribution_groups")]
        public DistributionGroup[] DistributionGroups { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class Symbol
    {
        /// <summary>
        /// Initializes a new instance of the Symbol class.
        /// </summary>
        public Symbol() { }


        /// <summary>
        /// Gets or sets the unique id for this symbol (uuid)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "symbol_id")]
        public string SymbolId { get; set; }

        /// <summary>
        /// Gets or sets the type of the symbol for the current symbol upload.
        /// Possible values include: 'Apple', 'JavaScript'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public SymbolType Type { get; set; }

        /// <summary>
        /// Gets or sets the application that this symbol belongs to
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "app_id")]
        public string AppId { get; set; }

        /// <summary>
        /// Gets or sets the platform that this symbol is for
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "platform")]
        public string Platform { get; set; }

        /// <summary>
        /// Gets or sets the URL at which the client may download the symbol
        /// file
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "url")]
        public string Url { get; set; }

        /// <summary>
        /// Gets or sets the origin of the symbol file. Possible values
        /// include: 'System', 'User'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "origin")]
        public SymbolOrigin Origin { get; set; }

        /// <summary>
        /// Gets or sets the other symbols in the same file
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "alternate_symbol_ids")]
        public string[] AlternateSymbolIds { get; set; }

        /// <summary>
        /// Gets or sets whether the symbol is ignored. Possible values
        /// include: 'available', 'ignored'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public SymbolStatus Status { get; set; }

        public virtual void Validate()
        {
            if (SymbolId == null)
            {
                throw new System.Exception("Property 'SymbolId' is required/");
            }
            if (AppId == null)
            {
                throw new System.Exception("Property 'AppId' is required/");
            }
            if (Platform == null)
            {
                throw new System.Exception("Property 'Platform' is required/");
            }
            if (Url == null)
            {
                throw new System.Exception("Property 'Url' is required/");
            }
            if (AlternateSymbolIds == null)
            {
                throw new System.Exception("Property 'AlternateSymbolIds' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// A single symbol upload entity
    /// </summary>
    public partial class SymbolUpload
    {
        /// <summary>
        /// Initializes a new instance of the SymbolUpload class.
        /// </summary>
        public SymbolUpload() { }

        /// <summary>
        /// Static constructor for SymbolUpload class.
        /// </summary>
        static SymbolUpload()
        {
            SymbolType = "Apple";
        }

        /// <summary>
        /// Gets or sets the id for the current symbol upload
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "symbol_upload_id")]
        public string SymbolUploadId { get; set; }

        /// <summary>
        /// Gets or sets the application that this symbol upload belongs to
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "app_id")]
        public string AppId { get; set; }

        /// <summary>
        /// Gets or sets the current status for the symbol upload. Possible
        /// values include: 'created', 'committed', 'aborted', 'processing',
        /// 'indexed', 'failed'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public SymbolUploadStatus Status { get; set; }

        /// <summary>
        /// Gets or sets the symbol ids
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "symbols")]
        public Symbol[] Symbols { get; set; }

        /// <summary>
        /// Gets or sets the origin of the symbol upload. Possible values
        /// include: 'User', 'System'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "origin")]
        public SymbolUploadOrigin? Origin { get; set; }

        /// <summary>
        /// The type of the symbol for the current symbol upload
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "symbol_type")]
        public static string SymbolType { get; private set; }

        public virtual void Validate()
        {
            if (SymbolUploadId == null)
            {
                throw new System.Exception("Property 'SymbolUploadId' is required/");
            }
            if (AppId == null)
            {
                throw new System.Exception("Property 'AppId' is required/");
            }
            if (this.Symbols != null)
            {
                foreach (var element in this.Symbols)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// A request containing information pertaining to starting a symbol upload
    /// process
    /// </summary>
    public partial class SymbolUploadBeginRequest
    {
        /// <summary>
        /// Initializes a new instance of the SymbolUploadBeginRequest class.
        /// </summary>
        public SymbolUploadBeginRequest() { }

        /// <summary>
        /// Static constructor for SymbolUploadBeginRequest class.
        /// </summary>
        static SymbolUploadBeginRequest()
        {
            SymbolType = "Apple";
        }

        /// <summary>
        /// Gets or sets the callback URL that the client can optionally
        /// provide to get status updates for the current symbol upload
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "client_callback")]
        public string ClientCallback { get; set; }

        /// <summary>
        /// The type of the symbol for the current symbol upload
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "symbol_type")]
        public static string SymbolType { get; private set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// A response containing information pertaining to starting a symbol
    /// upload process
    /// </summary>
    public partial class SymbolUploadBeginResponse
    {
        /// <summary>
        /// Initializes a new instance of the SymbolUploadBeginResponse class.
        /// </summary>
        public SymbolUploadBeginResponse() { }


        /// <summary>
        /// Gets or sets the id for the current upload
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "symbol_upload_id")]
        public string SymbolUploadId { get; set; }

        /// <summary>
        /// Gets or sets the URL where the client needs to upload the symbol
        /// blob to
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "upload_url")]
        public string UploadUrl { get; set; }

        /// <summary>
        /// Gets or sets describes how long the upload_url is valid
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "expiration_date")]
        public System.DateTime ExpirationDate { get; set; }

        public virtual void Validate()
        {
            if (SymbolUploadId == null)
            {
                throw new System.Exception("Property 'SymbolUploadId' is required/");
            }
            if (UploadUrl == null)
            {
                throw new System.Exception("Property 'UploadUrl' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// A request containing information pertaining to completing a symbol
    /// upload process
    /// </summary>
    public partial class SymbolUploadEndRequest
    {
        /// <summary>
        /// Initializes a new instance of the SymbolUploadEndRequest class.
        /// </summary>
        public SymbolUploadEndRequest() { }


        /// <summary>
        /// Gets or sets the desired operation for the symbol upload. Possible
        /// values include: 'committed', 'aborted'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public SymbolUploadEndRequestStatus Status { get; set; }

        public virtual void Validate()
        {
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class AppVersion
    {
        /// <summary>
        /// Initializes a new instance of the AppVersion class.
        /// </summary>
        public AppVersion() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "app_version_id")]
        public string AppVersionId { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "app_id")]
        public string AppId { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "display_name")]
        public string DisplayName { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "app_version")]
        public string AppVersionProperty { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "build_number")]
        public string BuildNumber { get; set; }

        public virtual void Validate()
        {
            if (AppVersionId == null)
            {
                throw new System.Exception("Property 'AppVersionId' is required/");
            }
            if (AppId == null)
            {
                throw new System.Exception("Property 'AppId' is required/");
            }
            if (DisplayName == null)
            {
                throw new System.Exception("Property 'DisplayName' is required/");
            }
            if (AppVersionProperty == null)
            {
                throw new System.Exception("Property 'AppVersionProperty' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// a single frame of a stack trace
    /// </summary>
    public partial class StackFrame
    {
        /// <summary>
        /// Initializes a new instance of the StackFrame class.
        /// </summary>
        public StackFrame() { }


        /// <summary>
        /// Gets or sets address of the frame
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "address")]
        public string Address { get; set; }

        /// <summary>
        /// Gets or sets name of the class
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "class_name")]
        public string ClassName { get; set; }

        /// <summary>
        /// Gets or sets name of the method
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "method")]
        public string Method { get; set; }

        /// <summary>
        /// Gets or sets is a class method
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "class_method")]
        public bool? ClassMethod { get; set; }

        /// <summary>
        /// Gets or sets name of the file
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "file")]
        public string File { get; set; }

        /// <summary>
        /// Gets or sets line number
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "line")]
        public int? Line { get; set; }

        /// <summary>
        /// Gets or sets this line isn't from any framework
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "app_code")]
        public bool AppCode { get; set; }

        /// <summary>
        /// Gets or sets name of the framework
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "framework_name")]
        public string FrameworkName { get; set; }

        /// <summary>
        /// Gets or sets raw frame string
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "code_raw")]
        public string CodeRaw { get; set; }

        /// <summary>
        /// Gets or sets formatted frame string
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "code_formatted")]
        public string CodeFormatted { get; set; }

        /// <summary>
        /// Gets or sets programming language of the frame. Possible values
        /// include: 'JavaScript', 'CSharp', 'Objective-C', 'Objective-Cpp',
        /// 'Cpp', 'C', 'Swift', 'Java', 'Unknown'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "language")]
        public StackFrameLanguage? Language { get; set; }

        /// <summary>
        /// Gets or sets frame should be shown always
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "relevant")]
        public bool? Relevant { get; set; }

        /// <summary>
        /// Gets or sets parameters of the frames method
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "method_params")]
        public string MethodParams { get; set; }

        public virtual void Validate()
        {
            if (CodeRaw == null)
            {
                throw new System.Exception("Property 'CodeRaw' is required/");
            }
            if (CodeFormatted == null)
            {
                throw new System.Exception("Property 'CodeFormatted' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// a exception
    /// </summary>
    public partial class Exception
    {
        /// <summary>
        /// Initializes a new instance of the Exception class.
        /// </summary>
        public Exception() { }


        /// <summary>
        /// Gets or sets reason of the exception
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "reason")]
        public string Reason { get; set; }

        /// <summary>
        /// Gets or sets type of the exception (NSSomethingException,
        /// NullPointerException)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets frames of the excetpion
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "frames")]
        public StackFrame[] Frames { get; set; }

        /// <summary>
        /// Gets or sets relevant exception (crashed)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "relevant")]
        public bool? Relevant { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "inner_exceptions")]
        public Exception[] InnerExceptions { get; set; }

        /// <summary>
        /// Gets or sets sDK/Platform this thread is beeing generated from.
        /// Possible values include: 'ios', 'android', 'xamarin',
        /// 'react-native', 'other'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "platform")]
        public ExceptionPlatform? Platform { get; set; }

        public virtual void Validate()
        {
            if (Frames == null)
            {
                throw new System.Exception("Property 'Frames' is required/");
            }
            if (this.Frames != null)
            {
                foreach (var element in this.Frames)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.InnerExceptions != null)
            {
                foreach (var element1 in this.InnerExceptions)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// a thread representation
    /// </summary>
    public partial class Thread
    {
        /// <summary>
        /// Initializes a new instance of the Thread class.
        /// </summary>
        public Thread() { }


        /// <summary>
        /// Gets or sets name of the thread
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "title")]
        public string Title { get; set; }

        /// <summary>
        /// Gets or sets frames of that thread
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "frames")]
        public StackFrame[] Frames { get; set; }

        /// <summary>
        /// Gets or sets potential additional exception happened in that thread
        /// (Last Exception Backtrace)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "exception")]
        public Exception Exception { get; set; }

        /// <summary>
        /// Gets or sets shows if a thread is relevant or not. Is false if all
        /// frames are non relevant, otherwise true
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "relevant")]
        public bool? Relevant { get; set; }

        /// <summary>
        /// Gets or sets sDK/Platform this thread is beeing generated from.
        /// Possible values include: 'ios', 'android', 'xamarin',
        /// 'react-native', 'other'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "platform")]
        public ThreadPlatform? Platform { get; set; }

        public virtual void Validate()
        {
            if (Title == null)
            {
                throw new System.Exception("Property 'Title' is required/");
            }
            if (Frames == null)
            {
                throw new System.Exception("Property 'Frames' is required/");
            }
            if (this.Frames != null)
            {
                foreach (var element in this.Frames)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.Exception != null)
            {
                this.Exception.Validate();
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// a stacktrace in a processed and prettyfied way
    /// </summary>
    public partial class Stacktrace
    {
        /// <summary>
        /// Initializes a new instance of the Stacktrace class.
        /// </summary>
        public Stacktrace() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "title")]
        public string Title { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "reason")]
        public string Reason { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "threads")]
        public Thread[] Threads { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "exception")]
        public Exception Exception { get; set; }

        public virtual void Validate()
        {
            if (this.Threads != null)
            {
                foreach (var element in this.Threads)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.Exception != null)
            {
                this.Exception.Validate();
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// frame belonging to the reason of the crash
    /// </summary>
    public partial class ReasonStackFrame
    {
        /// <summary>
        /// Initializes a new instance of the ReasonStackFrame class.
        /// </summary>
        public ReasonStackFrame() { }


        /// <summary>
        /// Gets or sets name of the class
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "class_name")]
        public string ClassName { get; set; }

        /// <summary>
        /// Gets or sets name of the method
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "method")]
        public string Method { get; set; }

        /// <summary>
        /// Gets or sets is a class method
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "class_method")]
        public bool? ClassMethod { get; set; }

        /// <summary>
        /// Gets or sets name of the file
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "file")]
        public string File { get; set; }

        /// <summary>
        /// Gets or sets line number
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "line")]
        public int? Line { get; set; }

        /// <summary>
        /// Gets or sets this line isn't from any framework
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "app_code")]
        public bool? AppCode { get; set; }

        /// <summary>
        /// Gets or sets name of the framework
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "framework_name")]
        public string FrameworkName { get; set; }

        /// <summary>
        /// Gets or sets formatted frame string
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "code_formatted")]
        public string CodeFormatted { get; set; }

        /// <summary>
        /// Gets or sets programming language of the frame. Possible values
        /// include: 'JavaScript', 'CSharp', 'Objective-C', 'Objective-Cpp',
        /// 'Cpp', 'C', 'Swift', 'Java', 'Unknown'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "language")]
        public ReasonStackFrameLanguage? Language { get; set; }

        /// <summary>
        /// Gets or sets parameters of the frames method
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "method_params")]
        public string MethodParams { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class CrashGroup
    {
        /// <summary>
        /// Initializes a new instance of the CrashGroup class.
        /// </summary>
        public CrashGroup() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "crash_group_id")]
        public string CrashGroupId { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "display_id")]
        public string DisplayId { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "app_version")]
        public string AppVersion { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "build")]
        public string Build { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'open', 'closed', 'ignored'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public CrashGroupStatus Status { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "count")]
        public int Count { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "impacted_users")]
        public int? ImpactedUsers { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "first_occurrence")]
        public System.DateTime FirstOccurrence { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "last_occurrence")]
        public System.DateTime LastOccurrence { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "exception")]
        public string Exception { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "error_reason")]
        public string ErrorReason { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "reason_frame")]
        public ReasonStackFrame ReasonFrame { get; set; }

        /// <summary>
        /// Gets or sets crash or handled exception
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "fatal")]
        public bool Fatal { get; set; }

        public virtual void Validate()
        {
            if (CrashGroupId == null)
            {
                throw new System.Exception("Property 'CrashGroupId' is required/");
            }
            if (DisplayId == null)
            {
                throw new System.Exception("Property 'DisplayId' is required/");
            }
            if (AppVersion == null)
            {
                throw new System.Exception("Property 'AppVersion' is required/");
            }
            if (Build == null)
            {
                throw new System.Exception("Property 'Build' is required/");
            }
            if (ErrorReason == null)
            {
                throw new System.Exception("Property 'ErrorReason' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class CrashGroupChange
    {
        /// <summary>
        /// Initializes a new instance of the CrashGroupChange class.
        /// </summary>
        public CrashGroupChange() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public object Status { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class CrashGroupCounts
    {
        /// <summary>
        /// Initializes a new instance of the CrashGroupCounts class.
        /// </summary>
        public CrashGroupCounts() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "crash_group_count")]
        public double? CrashGroupCount { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class Crash
    {
        /// <summary>
        /// Initializes a new instance of the Crash class.
        /// </summary>
        public Crash() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "crash_id")]
        public string CrashId { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "display_id")]
        public string DisplayId { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "timestamp")]
        public System.DateTime Timestamp { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "version")]
        public string Version { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "build")]
        public string Build { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "device")]
        public string Device { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "os_version")]
        public string OsVersion { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "os_type")]
        public string OsType { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "user_name")]
        public string UserName { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "user_email")]
        public string UserEmail { get; set; }

        public virtual void Validate()
        {
            if (CrashId == null)
            {
                throw new System.Exception("Property 'CrashId' is required/");
            }
            if (Version == null)
            {
                throw new System.Exception("Property 'Version' is required/");
            }
            if (Build == null)
            {
                throw new System.Exception("Property 'Build' is required/");
            }
            if (Device == null)
            {
                throw new System.Exception("Property 'Device' is required/");
            }
            if (OsVersion == null)
            {
                throw new System.Exception("Property 'OsVersion' is required/");
            }
            if (UserName == null)
            {
                throw new System.Exception("Property 'UserName' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class DateTimeCounts
    {
        /// <summary>
        /// Initializes a new instance of the DateTimeCounts class.
        /// </summary>
        public DateTimeCounts() { }


        /// <summary>
        /// Gets or sets the ISO 8601 datetime
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "datetime")]
        public string Datetime { get; set; }

        /// <summary>
        /// Gets or sets count of the object
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "count")]
        public long? Count { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class CrashCounts
    {
        /// <summary>
        /// Initializes a new instance of the CrashCounts class.
        /// </summary>
        public CrashCounts() { }


        /// <summary>
        /// Gets or sets total crash count
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "count")]
        public long? Count { get; set; }

        /// <summary>
        /// Gets or sets the total crash count for day
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "crashes")]
        public DateTimeCounts[] Crashes { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class ActiveDeviceCounts
    {
        /// <summary>
        /// Initializes a new instance of the ActiveDeviceCounts class.
        /// </summary>
        public ActiveDeviceCounts() { }


        /// <summary>
        /// Gets or sets the active device count for each interval
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "daily")]
        public DateTimeCounts[] Daily { get; set; }

        /// <summary>
        /// Gets or sets the active device count for each interval with a
        /// week's retention
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "weekly")]
        public DateTimeCounts[] Weekly { get; set; }

        /// <summary>
        /// Gets or sets the active device count for each interval with a
        /// month's retention
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "monthly")]
        public DateTimeCounts[] Monthly { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// The place code and the count
    /// </summary>
    public partial class Place
    {
        /// <summary>
        /// Initializes a new instance of the Place class.
        /// </summary>
        public Place() { }


        /// <summary>
        /// Gets or sets the place code
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "code")]
        public string Code { get; set; }

        /// <summary>
        /// Gets or sets the count of the this place
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "count")]
        public long? Count { get; set; }

        /// <summary>
        /// Gets or sets the count of previous time range of the place
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "previous_count")]
        public long? PreviousCount { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// Places and count during the time range in descending order
    /// </summary>
    public partial class Places
    {
        /// <summary>
        /// Initializes a new instance of the Places class.
        /// </summary>
        public Places() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "total")]
        public long? Total { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "places")]
        public Place[] PlacesProperty { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class ErrorError
    {
        /// <summary>
        /// Initializes a new instance of the ErrorError class.
        /// </summary>
        public ErrorError() { }


        /// <summary>
        /// Gets or sets the status code return by the API. It can be 400 or
        /// 403 or 500.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "code")]
        public int? Code { get; set; }

        /// <summary>
        /// Gets or sets the reason for the request failed
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "message")]
        public string Message { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// Error
    /// </summary>
    public partial class Error
    {
        /// <summary>
        /// Initializes a new instance of the Error class.
        /// </summary>
        public Error() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "error")]
        public ErrorError ErrorProperty { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class SessionDurationsDistributionDistributionItem
    {
        /// <summary>
        /// Initializes a new instance of the
        /// SessionDurationsDistributionDistributionItem class.
        /// </summary>
        public SessionDurationsDistributionDistributionItem() { }


        /// <summary>
        /// Gets or sets the bucket name
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "bucket")]
        public string Bucket { get; set; }

        /// <summary>
        /// Gets or sets the count of sessions in current bucket
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "count")]
        public int? Count { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class SessionDurationsDistribution
    {
        /// <summary>
        /// Initializes a new instance of the SessionDurationsDistribution
        /// class.
        /// </summary>
        public SessionDurationsDistribution() { }


        /// <summary>
        /// Gets or sets the count of sessions in these buckets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "distribution")]
        public SessionDurationsDistributionDistributionItem[] Distribution { get; set; }

        /// <summary>
        /// Gets or sets the previous average session duration for previous
        /// time range
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "previous_average_duration")]
        public string PreviousAverageDuration { get; set; }

        /// <summary>
        /// Gets or sets the average session duration for current time range
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "average_duration")]
        public string AverageDuration { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class Version
    {
        /// <summary>
        /// Initializes a new instance of the Version class.
        /// </summary>
        public Version() { }


        /// <summary>
        /// Gets or sets version
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "version")]
        public string VersionProperty { get; set; }

        /// <summary>
        /// Gets or sets version count
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "count")]
        public long? Count { get; set; }

        /// <summary>
        /// Gets or sets the count of previous time range of the version
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "previous_count")]
        public long? PreviousCount { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class Versions
    {
        /// <summary>
        /// Initializes a new instance of the Versions class.
        /// </summary>
        public Versions() { }


        /// <summary>
        /// Gets or sets list of version count
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "versions")]
        public Version[] VersionsProperty { get; set; }

        /// <summary>
        /// Gets or sets the total count of versions
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "total")]
        public long? Total { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class SessionCounts
    {
        /// <summary>
        /// Initializes a new instance of the SessionCounts class.
        /// </summary>
        public SessionCounts() { }


        /// <summary>
        /// Gets or sets total session count
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "total_count")]
        public long? TotalCount { get; set; }

        /// <summary>
        /// Gets or sets previous total session count
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "previous_total_count")]
        public long? PreviousTotalCount { get; set; }

        /// <summary>
        /// Gets or sets the total session count for each interval
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sessions")]
        public DateTimeCounts[] Sessions { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class SessionsPerDeviceSessionsPerUserItem
    {
        /// <summary>
        /// Initializes a new instance of the
        /// SessionsPerDeviceSessionsPerUserItem class.
        /// </summary>
        public SessionsPerDeviceSessionsPerUserItem() { }


        /// <summary>
        /// Gets or sets the ISO 8601 datetime
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "datetime")]
        public string Datetime { get; set; }

        /// <summary>
        /// Gets or sets count
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "count")]
        public double? Count { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class SessionsPerDevice
    {
        /// <summary>
        /// Initializes a new instance of the SessionsPerDevice class.
        /// </summary>
        public SessionsPerDevice() { }


        /// <summary>
        /// Gets or sets average seesion per user
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "average_sessions_per_user")]
        public double? AverageSessionsPerUser { get; set; }

        /// <summary>
        /// Gets or sets previous average session per user
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "previous_average_sessions_per_user")]
        public double? PreviousAverageSessionsPerUser { get; set; }

        /// <summary>
        /// Gets or sets total session per device count
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "total_count")]
        public long? TotalCount { get; set; }

        /// <summary>
        /// Gets or sets previous total count
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "previous_total_count")]
        public long? PreviousTotalCount { get; set; }

        /// <summary>
        /// Gets or sets the session count for each interval per device
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sessions_per_user")]
        public SessionsPerDeviceSessionsPerUserItem[] SessionsPerUser { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class Model
    {
        /// <summary>
        /// Initializes a new instance of the Model class.
        /// </summary>
        public Model() { }


        /// <summary>
        /// Gets or sets model's name
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "model_name")]
        public string ModelName { get; set; }

        /// <summary>
        /// Gets or sets count current of model
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "count")]
        public long? Count { get; set; }

        /// <summary>
        /// Gets or sets count of previous model
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "previous_count")]
        public long? PreviousCount { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class AnalyticsModels
    {
        /// <summary>
        /// Initializes a new instance of the AnalyticsModels class.
        /// </summary>
        public AnalyticsModels() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "total")]
        public long? Total { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "models")]
        public Model[] ModelsProperty { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class Language
    {
        /// <summary>
        /// Initializes a new instance of the Language class.
        /// </summary>
        public Language() { }


        /// <summary>
        /// Gets or sets language's name
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "language_name")]
        public string LanguageName { get; set; }

        /// <summary>
        /// Gets or sets count current of language
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "count")]
        public long? Count { get; set; }

        /// <summary>
        /// Gets or sets count of previous lanugage
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "previous_count")]
        public long? PreviousCount { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class Languages
    {
        /// <summary>
        /// Initializes a new instance of the Languages class.
        /// </summary>
        public Languages() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "total")]
        public long? Total { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "languages")]
        public Language[] LanguagesProperty { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class OS
    {
        /// <summary>
        /// Initializes a new instance of the OS class.
        /// </summary>
        public OS() { }


        /// <summary>
        /// Gets or sets OS name
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "os_name")]
        public string OsName { get; set; }

        /// <summary>
        /// Gets or sets count current of OS
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "count")]
        public long? Count { get; set; }

        /// <summary>
        /// Gets or sets count of previous OS
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "previous_count")]
        public long? PreviousCount { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class OSes
    {
        /// <summary>
        /// Initializes a new instance of the OSes class.
        /// </summary>
        public OSes() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "total")]
        public long? Total { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "oses")]
        public OS[] Oses { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class DateTimeDecimalCounts
    {
        /// <summary>
        /// Initializes a new instance of the DateTimeDecimalCounts class.
        /// </summary>
        public DateTimeDecimalCounts() { }


        /// <summary>
        /// Gets or sets the ISO 8601 datetime
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "datetime")]
        public string Datetime { get; set; }

        /// <summary>
        /// Gets or sets decimal count of the object
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "count")]
        public double? Count { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class AvailableVersions
    {
        /// <summary>
        /// Initializes a new instance of the AvailableVersions class.
        /// </summary>
        public AvailableVersions() { }


        /// <summary>
        /// Gets or sets list of available versions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "versions")]
        public string[] Versions { get; set; }

        /// <summary>
        /// Gets or sets the full number of versions accross all pages.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "total_count")]
        public long? TotalCount { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class DateTimePercentages
    {
        /// <summary>
        /// Initializes a new instance of the DateTimePercentages class.
        /// </summary>
        public DateTimePercentages() { }


        /// <summary>
        /// Gets or sets the ISO 8601 datetime
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "datetime")]
        public string Datetime { get; set; }

        /// <summary>
        /// Gets or sets percentage of the object
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "percentage")]
        public double? Percentage { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class CrashFreeDevicePercentages
    {
        /// <summary>
        /// Initializes a new instance of the CrashFreeDevicePercentages class.
        /// </summary>
        public CrashFreeDevicePercentages() { }


        /// <summary>
        /// Gets or sets average percentage
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "average_percentage")]
        public long? AveragePercentage { get; set; }

        /// <summary>
        /// Gets or sets the crash-free percentage per day.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "daily_percentages")]
        public DateTimePercentages[] DailyPercentages { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class CrashOverall
    {
        /// <summary>
        /// Initializes a new instance of the CrashOverall class.
        /// </summary>
        public CrashOverall() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "crash_count")]
        public long? CrashCount { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "device_count")]
        public long? DeviceCount { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class CrashesOverallItem
    {
        /// <summary>
        /// Initializes a new instance of the CrashesOverallItem class.
        /// </summary>
        public CrashesOverallItem() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "crash_group_id")]
        public string CrashGroupId { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "app_version")]
        public string AppVersion { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "overall")]
        public CrashOverall Overall { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class CrashGroupModel
    {
        /// <summary>
        /// Initializes a new instance of the CrashGroupModel class.
        /// </summary>
        public CrashGroupModel() { }


        /// <summary>
        /// Gets or sets model's name
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "model_name")]
        public string ModelName { get; set; }

        /// <summary>
        /// Gets or sets count of model
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "crash_count")]
        public long? CrashCount { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class CrashGroupModels
    {
        /// <summary>
        /// Initializes a new instance of the CrashGroupModels class.
        /// </summary>
        public CrashGroupModels() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "crash_count")]
        public long? CrashCount { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "models")]
        public CrashGroupModel[] ModelsProperty { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class CrashGroupOperatingSystem
    {
        /// <summary>
        /// Initializes a new instance of the CrashGroupOperatingSystem class.
        /// </summary>
        public CrashGroupOperatingSystem() { }


        /// <summary>
        /// Gets or sets OS name
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "operating_system_name")]
        public string OperatingSystemName { get; set; }

        /// <summary>
        /// Gets or sets count of OS
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "crash_count")]
        public long? CrashCount { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class CrashGroupOperatingSystems
    {
        /// <summary>
        /// Initializes a new instance of the CrashGroupOperatingSystems class.
        /// </summary>
        public CrashGroupOperatingSystems() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "crash_count")]
        public long? CrashCount { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "operating_systems")]
        public CrashGroupOperatingSystem[] OperatingSystems { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class CrashGroupAndVersion
    {
        /// <summary>
        /// Initializes a new instance of the CrashGroupAndVersion class.
        /// </summary>
        public CrashGroupAndVersion() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "crash_group_id")]
        public string CrashGroupId { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "app_version")]
        public string AppVersion { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class CrashGroupContainer
    {
        /// <summary>
        /// Initializes a new instance of the CrashGroupContainer class.
        /// </summary>
        public CrashGroupContainer() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "crash_groups")]
        public CrashGroupAndVersion[] CrashGroups { get; set; }

        public virtual void Validate()
        {
            if (CrashGroups == null)
            {
                throw new System.Exception("Property 'CrashGroups' is required/");
            }
            if (this.CrashGroups != null)
            {
                if (this.CrashGroups.Length < 1)
                {
                    throw new System.Exception("Validation Failed: MinItems, 'CrashGroups', 1");
                }
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class EventModel
    {
        /// <summary>
        /// Initializes a new instance of the EventModel class.
        /// </summary>
        public EventModel() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "deviceCount")]
        public long? DeviceCount { get; set; }

        /// <summary>
        /// Gets or sets the device count of previous time range of the event
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "previous_device_count")]
        public long? PreviousDeviceCount { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "count")]
        public long? Count { get; set; }

        /// <summary>
        /// Gets or sets the event count of previous time range of the event
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "previous_count")]
        public long? PreviousCount { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "count_per_device")]
        public long? CountPerDevice { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "count_per_session")]
        public long? CountPerSession { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class Events
    {
        /// <summary>
        /// Initializes a new instance of the Events class.
        /// </summary>
        public Events() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "events")]
        public EventModel[] EventsProperty { get; set; }

        /// <summary>
        /// Gets or sets the total count of events
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "total")]
        public long? Total { get; set; }

        /// <summary>
        /// Gets or sets the active device over this period
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "total_devices")]
        public long? TotalDevices { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class EventCount
    {
        /// <summary>
        /// Initializes a new instance of the EventCount class.
        /// </summary>
        public EventCount() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "total_count")]
        public long? TotalCount { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "previous_total_count")]
        public long? PreviousTotalCount { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "count")]
        public DateTimeCounts[] Count { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class EventDeviceCount
    {
        /// <summary>
        /// Initializes a new instance of the EventDeviceCount class.
        /// </summary>
        public EventDeviceCount() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "total_devices")]
        public long? TotalDevices { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "total_devices_with_event")]
        public long? TotalDevicesWithEvent { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "previous_total_devices_with_event")]
        public long? PreviousTotalDevicesWithEvent { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "devices_count")]
        public DateTimeCounts[] DevicesCount { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class EventCountPerDevice
    {
        /// <summary>
        /// Initializes a new instance of the EventCountPerDevice class.
        /// </summary>
        public EventCountPerDevice() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "avg_count_per_device")]
        public double? AvgCountPerDevice { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "previous_avg_count_per_device")]
        public double? PreviousAvgCountPerDevice { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "count_per_device")]
        public DateTimeDecimalCounts[] CountPerDevice { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class EventCountPerSession
    {
        /// <summary>
        /// Initializes a new instance of the EventCountPerSession class.
        /// </summary>
        public EventCountPerSession() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "avg_count_per_session")]
        public double? AvgCountPerSession { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "previous_avg_count_per_session")]
        public double? PreviousAvgCountPerSession { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "count_per_session")]
        public DateTimeDecimalCounts[] CountPerSession { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// Device characteristics.
    /// </summary>
    public partial class Device
    {
        /// <summary>
        /// Initializes a new instance of the Device class.
        /// </summary>
        public Device() { }


        /// <summary>
        /// Gets or sets name of the SDK. Consists of the name of the SDK and
        /// the platform, e.g. "avalanchesdk.ios", "hockeysdk.android".
        ///
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sdk_name")]
        public string SdkName { get; set; }

        /// <summary>
        /// Gets or sets version of the SDK in semver format, e.g. "1.2.0" or
        /// "0.12.3-alpha.1".
        ///
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sdk_version")]
        public string SdkVersion { get; set; }

        /// <summary>
        /// Gets or sets version of the wrapper SDK in semver format. When the
        /// SDK is embedding another base SDK (for example Xamarin.Android
        /// wraps Android), the Xamarin specific version is populated into this
        /// field while sdkVersion refers to the original Android SDK.
        ///
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "wrapper_sdk_version")]
        public string WrapperSdkVersion { get; set; }

        /// <summary>
        /// Gets or sets name of the wrapper SDK. Consists of the name of the
        /// SDK and the wrapper platform, e.g. "avalanchesdk.xamarin",
        /// "hockeysdk.cordova".
        ///
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "wrapper_sdk_name")]
        public string WrapperSdkName { get; set; }

        /// <summary>
        /// Gets or sets device model (example: iPad2,3).
        ///
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "model")]
        public string Model { get; set; }

        /// <summary>
        /// Gets or sets device manufacturer (example: HTC).
        ///
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "oem_name")]
        public string OemName { get; set; }

        /// <summary>
        /// Gets or sets OS name (example: iOS). The following OS names are
        /// standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.
        ///
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "os_name")]
        public string OsName { get; set; }

        /// <summary>
        /// Gets or sets OS version (example: 9.3.0).
        ///
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "os_version")]
        public string OsVersion { get; set; }

        /// <summary>
        /// Gets or sets OS build code (example: LMY47X).
        ///
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "os_build")]
        public string OsBuild { get; set; }

        /// <summary>
        /// Gets or sets API level when applicable like in Android (example:
        /// 15).
        ///
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "os_api_level")]
        public int? OsApiLevel { get; set; }

        /// <summary>
        /// Gets or sets language code (example: en_US).
        ///
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "locale")]
        public string Locale { get; set; }

        /// <summary>
        /// Gets or sets the offset in minutes from UTC for the device time
        /// zone, including daylight savings time.
        ///
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "time_zone_offset")]
        public int TimeZoneOffset { get; set; }

        /// <summary>
        /// Gets or sets screen size of the device in pixels (example:
        /// 640x480).
        ///
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "screen_size")]
        public string ScreenSize { get; set; }

        /// <summary>
        /// Gets or sets application version name, e.g. 1.1.0
        ///
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "app_version")]
        public string AppVersion { get; set; }

        /// <summary>
        /// Gets or sets carrier name (for mobile devices).
        ///
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "carrier_name")]
        public string CarrierName { get; set; }

        /// <summary>
        /// Gets or sets carrier country code (for mobile devices).
        ///
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "carrier_code")]
        public string CarrierCode { get; set; }

        /// <summary>
        /// Gets or sets carrier country.
        ///
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "carrier_country")]
        public string CarrierCountry { get; set; }

        /// <summary>
        /// Gets or sets the app's build number, e.g. 42.
        ///
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "app_build")]
        public string AppBuild { get; set; }

        /// <summary>
        /// Gets or sets the bundle identifier, package identifier, or
        /// namespace, depending on what the individual plattforms use,  .e.g
        /// com.microsoft.example.
        ///
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "app_namespace")]
        public string AppNamespace { get; set; }

        public virtual void Validate()
        {
            if (SdkName == null)
            {
                throw new System.Exception("Property 'SdkName' is required/");
            }
            if (SdkVersion == null)
            {
                throw new System.Exception("Property 'SdkVersion' is required/");
            }
            if (Model == null)
            {
                throw new System.Exception("Property 'Model' is required/");
            }
            if (OemName == null)
            {
                throw new System.Exception("Property 'OemName' is required/");
            }
            if (OsName == null)
            {
                throw new System.Exception("Property 'OsName' is required/");
            }
            if (OsVersion == null)
            {
                throw new System.Exception("Property 'OsVersion' is required/");
            }
            if (Locale == null)
            {
                throw new System.Exception("Property 'Locale' is required/");
            }
            if (ScreenSize == null)
            {
                throw new System.Exception("Property 'ScreenSize' is required/");
            }
            if (AppVersion == null)
            {
                throw new System.Exception("Property 'AppVersion' is required/");
            }
            if (AppBuild == null)
            {
                throw new System.Exception("Property 'AppBuild' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class Log
    {
        /// <summary>
        /// Initializes a new instance of the Log class.
        /// </summary>
        public Log() { }


        /// <summary>
        /// Gets or sets log creation timestamp.
        ///
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "timestamp")]
        public System.DateTime Timestamp { get; set; }

        /// <summary>
        /// Gets or sets install ID.
        ///
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "install_id")]
        public System.Guid InstallId { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "device")]
        public Device Device { get; set; }

        public virtual void Validate()
        {
            if (Device == null)
            {
                throw new System.Exception("Property 'Device' is required/");
            }
            if (this.Device != null)
            {
                this.Device.Validate();
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class LogContainer
    {
        /// <summary>
        /// Initializes a new instance of the LogContainer class.
        /// </summary>
        public LogContainer() { }


        /// <summary>
        /// Gets or sets indicates if the number of available logs are more
        /// than the max allowed return limit(100).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "exceeded_max_limit")]
        public bool? ExceededMaxLimit { get; set; }

        /// <summary>
        /// Gets or sets the timestamp of the last log received. This value can
        /// be used as the start time parameter in the consecutive API call.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "last_received_log_timestamp")]
        public System.DateTime? LastReceivedLogTimestamp { get; set; }

        /// <summary>
        /// Gets or sets the list of logs
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "logs")]
        public Log[] Logs { get; set; }

        public virtual void Validate()
        {
            if (Logs == null)
            {
                throw new System.Exception("Property 'Logs' is required/");
            }
            if (this.Logs != null)
            {
                if (this.Logs.Length < 0)
                {
                    throw new System.Exception("Validation Failed: MinItems, 'Logs', 0");
                }
                foreach (var element in this.Logs)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// Event properties during the time range
    /// </summary>
    public partial class EventProperties
    {
        /// <summary>
        /// Initializes a new instance of the EventProperties class.
        /// </summary>
        public EventProperties() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "event_properties")]
        public string[] EventPropertiesProperty { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// An event property value with counts
    /// </summary>
    public partial class EventPropertyValue
    {
        /// <summary>
        /// Initializes a new instance of the EventPropertyValue class.
        /// </summary>
        public EventPropertyValue() { }


        /// <summary>
        /// Gets or sets the event property value name
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the count of the the event property value
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "count")]
        public long? Count { get; set; }

        /// <summary>
        /// Gets or sets the count of previous time range of the event property
        /// value
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "previous_count")]
        public long? PreviousCount { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// Event property value counts during the time range in descending order
    /// </summary>
    public partial class EventPropertyValues
    {
        /// <summary>
        /// Initializes a new instance of the EventPropertyValues class.
        /// </summary>
        public EventPropertyValues() { }


        /// <summary>
        /// Gets or sets the total property value counts
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "total")]
        public long? Total { get; set; }

        /// <summary>
        /// Gets or sets the event property values
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "values")]
        public EventPropertyValue[] Values { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class DeviceConfigurationImage
    {
        /// <summary>
        /// Initializes a new instance of the DeviceConfigurationImage class.
        /// </summary>
        public DeviceConfigurationImage() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "full")]
        public string Full { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "thumb")]
        public string Thumb { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// Physical device dimensions
    /// </summary>
    public partial class DeviceDimensions
    {
        /// <summary>
        /// Initializes a new instance of the DeviceDimensions class.
        /// </summary>
        public DeviceDimensions() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "depth")]
        public object Depth { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "height")]
        public object Height { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "width")]
        public object Width { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// Device screen resolution
    /// </summary>
    public partial class DeviceResolution
    {
        /// <summary>
        /// Initializes a new instance of the DeviceResolution class.
        /// </summary>
        public DeviceResolution() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "height")]
        public string Height { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "width")]
        public string Width { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ppi")]
        public string Ppi { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// Physical device screen dimensions
    /// </summary>
    public partial class DeviceScreenSize
    {
        /// <summary>
        /// Initializes a new instance of the DeviceScreenSize class.
        /// </summary>
        public DeviceScreenSize() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "cm")]
        public string Cm { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "in")]
        public string InProperty { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// CPU data for device
    /// </summary>
    public partial class DeviceCpu
    {
        /// <summary>
        /// Initializes a new instance of the DeviceCpu class.
        /// </summary>
        public DeviceCpu() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "frequency")]
        public string Frequency { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "core")]
        public string Core { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// Memory data for device
    /// </summary>
    public partial class DeviceMemory
    {
        /// <summary>
        /// Initializes a new instance of the DeviceMemory class.
        /// </summary>
        public DeviceMemory() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "formattedSize")]
        public string FormattedSize { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class DeviceFrameDefinition
    {
        /// <summary>
        /// Initializes a new instance of the DeviceFrameDefinition class.
        /// </summary>
        public DeviceFrameDefinition() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "width")]
        public double? Width { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "height")]
        public double? Height { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "frameUrl")]
        public string FrameUrl { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "screen")]
        public double?[] Screen { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class DeviceFrame
    {
        /// <summary>
        /// Initializes a new instance of the DeviceFrame class.
        /// </summary>
        public DeviceFrame() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "grid")]
        public DeviceFrameDefinition Grid { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "full")]
        public DeviceFrameDefinition Full { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class DeviceModel
    {
        /// <summary>
        /// Initializes a new instance of the DeviceModel class.
        /// </summary>
        public DeviceModel() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "manufacturer")]
        public string Manufacturer { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "model")]
        public string Model { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "platform")]
        public string Platform { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dimensions")]
        public DeviceDimensions Dimensions { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resolution")]
        public DeviceResolution Resolution { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "releaseDate")]
        public string ReleaseDate { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "formFactor")]
        public string FormFactor { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "screenSize")]
        public DeviceScreenSize ScreenSize { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "cpu")]
        public DeviceCpu Cpu { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "memory")]
        public DeviceMemory Memory { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "screenRotation")]
        public double? ScreenRotation { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "deviceFrame")]
        public DeviceFrame DeviceFrame { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "availabilityCount")]
        public double? AvailabilityCount { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class DeviceConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the DeviceConfiguration class.
        /// </summary>
        public DeviceConfiguration() { }


        /// <summary>
        /// Gets or sets the name of the device model and OS version
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the unique id of the device configuration
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public System.Guid? Id { get; set; }

        /// <summary>
        /// Gets or sets the tier
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tier")]
        public double? Tier { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "image")]
        public DeviceConfigurationImage Image { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "model")]
        public DeviceModel Model { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "os")]
        public string Os { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "osName")]
        public string OsName { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "marketShare")]
        public double? MarketShare { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// Test Run Statistics
    /// </summary>
    /// <remarks>
    /// Summary single test run on Xamarin Test Cloud
    /// </remarks>
    public partial class TestRunStatistics
    {
        /// <summary>
        /// Initializes a new instance of the TestRunStatistics class.
        /// </summary>
        public TestRunStatistics() { }


        /// <summary>
        /// Gets or sets number of devices running the test
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "devices")]
        public double? Devices { get; set; }

        /// <summary>
        /// Gets or sets number of finished devices
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "devicesFinished")]
        public double? DevicesFinished { get; set; }

        /// <summary>
        /// Gets or sets number of failed devices
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "devicesFailed")]
        public double? DevicesFailed { get; set; }

        /// <summary>
        /// Gets or sets number of tests in total
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "total")]
        public double? Total { get; set; }

        /// <summary>
        /// Gets or sets number of passed tests
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "passed")]
        public double? Passed { get; set; }

        /// <summary>
        /// Gets or sets number of failed tests
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "failed")]
        public double? Failed { get; set; }

        /// <summary>
        /// Gets or sets number of skipped tests
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "skipped")]
        public double? Skipped { get; set; }

        /// <summary>
        /// Gets or sets the max amount of MB used during the test run
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "peakMemory")]
        public double? PeakMemory { get; set; }

        /// <summary>
        /// Gets or sets the number of minutes of device time the test has been
        /// runnign
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "totalDeviceMinutes")]
        public double? TotalDeviceMinutes { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// Test Run
    /// </summary>
    /// <remarks>
    /// Summary single test run on Xamarin Test Cloud
    /// </remarks>
    public partial class TestRun
    {
        /// <summary>
        /// Initializes a new instance of the TestRun class.
        /// </summary>
        public TestRun() { }


        /// <summary>
        /// Gets or sets the unique id of the test upload
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public System.Guid? Id { get; set; }

        /// <summary>
        /// Gets or sets the date and time the test was uploaded
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "date")]
        public string Date { get; set; }

        /// <summary>
        /// Gets or sets the compiled version of the app binary
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "appVersion")]
        public string AppVersion { get; set; }

        /// <summary>
        /// Gets or sets the name of the test series with which this test
        /// upload is associated
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "testSeries")]
        public string TestSeries { get; set; }

        /// <summary>
        /// Gets or sets the device platform targeted by the test. Possible
        /// values are 'ios' or 'android'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "platform")]
        public string Platform { get; set; }

        /// <summary>
        /// Gets or sets the current status of the test run, in relation to the
        /// various phases
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "runStatus")]
        public string RunStatus { get; set; }

        /// <summary>
        /// Gets or sets the passed/failed state
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resultStatus")]
        public string ResultStatus { get; set; }

        /// <summary>
        /// Gets or sets deprecated. Use runStatus instead.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "state")]
        public string State { get; set; }

        /// <summary>
        /// Gets or sets deprecated. Use resultStatus instead.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets human readable explanation of the current test status
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "stats")]
        public TestRunStatistics Stats { get; set; }

        /// <summary>
        /// Gets or sets the name of the test framework used to run this test
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "testType")]
        public string TestType { get; set; }

        /// <summary>
        /// Gets or sets the name of the user who uploaded the test
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "uploadedBy")]
        public string UploadedBy { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// Test Run Summary
    /// </summary>
    /// <remarks>
    /// Most important information about a test run.
    /// </remarks>
    public partial class TestRunSummary
    {
        /// <summary>
        /// Initializes a new instance of the TestRunSummary class.
        /// </summary>
        public TestRunSummary() { }


        /// <summary>
        /// Gets or sets date of the test run.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "date")]
        public string Date { get; set; }

        /// <summary>
        /// Gets or sets human-readable status of the test run.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "statusDescription")]
        public string StatusDescription { get; set; }

        /// <summary>
        /// Gets or sets number of failed tests
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "failed")]
        public double? Failed { get; set; }

        /// <summary>
        /// Gets or sets number of passed tests
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "passed")]
        public double? Passed { get; set; }

        /// <summary>
        /// Gets or sets tells whether the test run has completed
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "completed")]
        public bool? Completed { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// Test Series
    /// </summary>
    /// <remarks>
    /// Summary of a single test series
    /// </remarks>
    public partial class TestSeries
    {
        /// <summary>
        /// Initializes a new instance of the TestSeries class.
        /// </summary>
        public TestSeries() { }


        /// <summary>
        /// Gets or sets unique, human-readable identifier of the test series
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "slug")]
        public string Slug { get; set; }

        /// <summary>
        /// Gets or sets name of the test series
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets date of the latest test run that used this test series
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "mostRecentActivity")]
        public string MostRecentActivity { get; set; }

        /// <summary>
        /// Gets or sets most recent test runs
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "testRuns")]
        public TestRunSummary[] TestRuns { get; set; }

        public virtual void Validate()
        {
            if (Slug == null)
            {
                throw new System.Exception("Property 'Slug' is required/");
            }
            if (Name == null)
            {
                throw new System.Exception("Property 'Name' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// Device Selection
    /// </summary>
    /// <remarks>
    /// Short ID for a list of device IDs
    /// </remarks>
    public partial class DeviceSelection
    {
        /// <summary>
        /// Initializes a new instance of the DeviceSelection class.
        /// </summary>
        public DeviceSelection() { }


        /// <summary>
        /// Gets or sets identifier of the device selection
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "shortId")]
        public string ShortId { get; set; }

        public virtual void Validate()
        {
            if (ShortId == null)
            {
                throw new System.Exception("Property 'ShortId' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// Subscription Tier
    /// </summary>
    public partial class Tier
    {
        /// <summary>
        /// Initializes a new instance of the Tier class.
        /// </summary>
        public Tier() { }


        /// <summary>
        /// Gets or sets the name of the tier
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// Subscription
    /// </summary>
    /// <remarks>
    /// Subscription information
    /// </remarks>
    public partial class Subscription
    {
        /// <summary>
        /// Initializes a new instance of the Subscription class.
        /// </summary>
        public Subscription() { }


        /// <summary>
        /// Gets or sets the date the subscription began
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "startsAt")]
        public string StartsAt { get; set; }

        /// <summary>
        /// Gets or sets the date the subscription will end or ended
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "endsAt")]
        public string EndsAt { get; set; }

        /// <summary>
        /// Gets or sets the number of days left in the subscription
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "daysLeft")]
        public double? DaysLeft { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tier")]
        public Tier Tier { get; set; }

        /// <summary>
        /// Gets or sets is the subscription currently active?
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "active")]
        public bool? Active { get; set; }

        /// <summary>
        /// Gets or sets id of the subscription
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public System.Guid? Id { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class TestReportStats
    {
        /// <summary>
        /// Initializes a new instance of the TestReportStats class.
        /// </summary>
        public TestReportStats() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "os")]
        public double? Os { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "devices")]
        public double? Devices { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "filesize")]
        public double? Filesize { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "totalDeviceMinutes")]
        public double? TotalDeviceMinutes { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "devices_not_runned")]
        public double? DevicesNotRunned { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "failed")]
        public double? Failed { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "skipped")]
        public double? Skipped { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "passed")]
        public double? Passed { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "total")]
        public double? Total { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "devices_finished")]
        public double? DevicesFinished { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "devices_failed")]
        public double? DevicesFailed { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "devices_skipped")]
        public double? DevicesSkipped { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "step_count")]
        public double? StepCount { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class TestReportFeaturesItemTestsItemRunsItemStepsItemStepExecutionsItem
    {
        /// <summary>
        /// Initializes a new instance of the
        /// TestReportFeaturesItemTestsItemRunsItemStepsItemStepExecutionsItem
        /// class.
        /// </summary>
        public TestReportFeaturesItemTestsItemRunsItemStepsItemStepExecutionsItem() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "device_snapshot_id")]
        public string DeviceSnapshotId { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "timestamp")]
        public double? Timestamp { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class TestReportFeaturesItemTestsItemRunsItemStepsItem
    {
        /// <summary>
        /// Initializes a new instance of the
        /// TestReportFeaturesItemTestsItemRunsItemStepsItem class.
        /// </summary>
        public TestReportFeaturesItemTestsItemRunsItemStepsItem() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "stepName")]
        public string StepName { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "stepExecutions")]
        public TestReportFeaturesItemTestsItemRunsItemStepsItemStepExecutionsItem[] StepExecutions { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "failed")]
        public double? Failed { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "skipped")]
        public double? Skipped { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "step_report_url")]
        public string StepReportUrl { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class TestReportFeaturesItemTestsItemRunsItem
    {
        /// <summary>
        /// Initializes a new instance of the
        /// TestReportFeaturesItemTestsItemRunsItem class.
        /// </summary>
        public TestReportFeaturesItemTestsItemRunsItem() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "number")]
        public double? Number { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "steps")]
        public TestReportFeaturesItemTestsItemRunsItemStepsItem[] Steps { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "failed")]
        public double? Failed { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "skipped")]
        public double? Skipped { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "report_url")]
        public string ReportUrl { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class TestReportFeaturesItemTestsItem
    {
        /// <summary>
        /// Initializes a new instance of the TestReportFeaturesItemTestsItem
        /// class.
        /// </summary>
        public TestReportFeaturesItemTestsItem() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "testName")]
        public string TestName { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "runs")]
        public TestReportFeaturesItemTestsItemRunsItem[] Runs { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "peakMemory")]
        public double? PeakMemory { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "peakDuration")]
        public double? PeakDuration { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class TestReportFeaturesItem
    {
        /// <summary>
        /// Initializes a new instance of the TestReportFeaturesItem class.
        /// </summary>
        public TestReportFeaturesItem() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tests")]
        public TestReportFeaturesItemTestsItem[] Tests { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "failed")]
        public double? Failed { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "skipped")]
        public double? Skipped { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "peakMemory")]
        public double? PeakMemory { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "peakDuration")]
        public double? PeakDuration { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class TestReportDeviceLogsItem
    {
        /// <summary>
        /// Initializes a new instance of the TestReportDeviceLogsItem class.
        /// </summary>
        public TestReportDeviceLogsItem() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "device_snapshot_id")]
        public string DeviceSnapshotId { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "device_log")]
        public string DeviceLog { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "test_log")]
        public string TestLog { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "appium_log")]
        public string AppiumLog { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class TestReport
    {
        /// <summary>
        /// Initializes a new instance of the TestReport class.
        /// </summary>
        public TestReport() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "app_upload_id")]
        public string AppUploadId { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "date")]
        public string Date { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "testType")]
        public string TestType { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "platform")]
        public string Platform { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "stats")]
        public TestReportStats Stats { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "schema_version")]
        public double SchemaVersion { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "revision")]
        public double Revision { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "features")]
        public TestReportFeaturesItem[] Features { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "finished_device_snapshots")]
        public string[] FinishedDeviceSnapshots { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "device_logs")]
        public TestReportDeviceLogsItem[] DeviceLogs { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "date_finished")]
        public string DateFinished { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "errorMessage")]
        public string ErrorMessage { get; set; }

        public virtual void Validate()
        {
            if (AppUploadId == null)
            {
                throw new System.Exception("Property 'AppUploadId' is required/");
            }
            if (Date == null)
            {
                throw new System.Exception("Property 'Date' is required/");
            }
            if (TestType == null)
            {
                throw new System.Exception("Property 'TestType' is required/");
            }
            if (Platform == null)
            {
                throw new System.Exception("Property 'Platform' is required/");
            }
            if (Stats == null)
            {
                throw new System.Exception("Property 'Stats' is required/");
            }
            if (Id == null)
            {
                throw new System.Exception("Property 'Id' is required/");
            }
            if (Features == null)
            {
                throw new System.Exception("Property 'Features' is required/");
            }
            if (FinishedDeviceSnapshots == null)
            {
                throw new System.Exception("Property 'FinishedDeviceSnapshots' is required/");
            }
            if (DeviceLogs == null)
            {
                throw new System.Exception("Property 'DeviceLogs' is required/");
            }
            if (DateFinished == null)
            {
                throw new System.Exception("Property 'DateFinished' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// Test Cloud Error Details
    /// </summary>
    /// <remarks>
    /// Details of a failed operation
    /// </remarks>
    public partial class TestCloudErrorDetails
    {
        /// <summary>
        /// Initializes a new instance of the TestCloudErrorDetails class.
        /// </summary>
        public TestCloudErrorDetails() { }


        /// <summary>
        /// Gets or sets status of the operation
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets human-readable message that describes the error
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "message")]
        public string Message { get; set; }

        public virtual void Validate()
        {
            if (Status == null)
            {
                throw new System.Exception("Property 'Status' is required/");
            }
            if (Message == null)
            {
                throw new System.Exception("Property 'Message' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// Test Cloud File Hash
    /// </summary>
    /// <remarks>
    /// Hash, type, path and byte range of a file that is required in test run
    /// </remarks>
    public partial class TestCloudFileHashDeprecated
    {
        /// <summary>
        /// Initializes a new instance of the TestCloudFileHashDeprecated
        /// class.
        /// </summary>
        public TestCloudFileHashDeprecated() { }


        /// <summary>
        /// Gets or sets type of the file. Possible values include:
        /// 'dsym-file', 'app-file', 'test-file'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "file_type")]
        public TestCloudFileHashDeprecatedFileType FileType { get; set; }

        /// <summary>
        /// Gets or sets SHA256 hash of the file
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "checksum")]
        public string Checksum { get; set; }

        /// <summary>
        /// Gets or sets relative path of the file
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "relative_path")]
        public string RelativePath { get; set; }

        /// <summary>
        /// Gets or sets range of bytes required to verify ownership of the
        /// file
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "byte_range")]
        public string ByteRange { get; set; }

        public virtual void Validate()
        {
            if (Checksum == null)
            {
                throw new System.Exception("Property 'Checksum' is required/");
            }
            if (RelativePath == null)
            {
                throw new System.Exception("Property 'RelativePath' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// Test Cloud File Hash
    /// </summary>
    /// <remarks>
    /// Hash, type, path and byte range of a file that is required in test run
    /// </remarks>
    public partial class TestCloudFileHash
    {
        /// <summary>
        /// Initializes a new instance of the TestCloudFileHash class.
        /// </summary>
        public TestCloudFileHash() { }


        /// <summary>
        /// Gets or sets type of the file. Possible values include:
        /// 'dsym-file', 'app-file', 'test-file'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "fileType")]
        public TestCloudFileHashFileType FileType { get; set; }

        /// <summary>
        /// Gets or sets SHA256 hash of the file
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "checksum")]
        public string Checksum { get; set; }

        /// <summary>
        /// Gets or sets relative path of the file
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "relativePath")]
        public string RelativePath { get; set; }

        public virtual void Validate()
        {
            if (Checksum == null)
            {
                throw new System.Exception("Property 'Checksum' is required/");
            }
            if (RelativePath == null)
            {
                throw new System.Exception("Property 'RelativePath' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// Test Cloud Hash Upload Status
    /// </summary>
    /// <remarks>
    /// Result of uploading a single file hash
    /// </remarks>
    public partial class TestCloudHashUploadStatus
    {
        /// <summary>
        /// Initializes a new instance of the TestCloudHashUploadStatus class.
        /// </summary>
        public TestCloudHashUploadStatus() { }


        /// <summary>
        /// Gets or sets HTTP status code that represent result of upload
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "statusCode")]
        public double StatusCode { get; set; }

        /// <summary>
        /// Gets or sets URI that should be used to make POST request if file
        /// with given hash doesn't exist. This is set when status_code is
        /// equal to 412
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

        public virtual void Validate()
        {
            //Nothing to validate
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// Test Cloud File Hash Response
    /// </summary>
    /// <remarks>
    /// Response message for single uploaded file hash
    /// </remarks>
    public partial class TestCloudFileHashResponse
    {
        /// <summary>
        /// Initializes a new instance of the TestCloudFileHashResponse class.
        /// </summary>
        public TestCloudFileHashResponse() { }


        /// <summary>
        /// Gets or sets type of the file. Possible values include:
        /// 'dsym-file', 'app-file', 'test-file'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "fileType")]
        public TestCloudFileHashResponseFileType FileType { get; set; }

        /// <summary>
        /// Gets or sets SHA256 hash of the file
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "checksum")]
        public string Checksum { get; set; }

        /// <summary>
        /// Gets or sets relative path of the file
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "relativePath")]
        public string RelativePath { get; set; }

        /// <summary>
        /// Gets or sets status of the upload
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "uploadStatus")]
        public TestCloudHashUploadStatus UploadStatus { get; set; }

        public virtual void Validate()
        {
            if (Checksum == null)
            {
                throw new System.Exception("Property 'Checksum' is required/");
            }
            if (UploadStatus == null)
            {
                throw new System.Exception("Property 'UploadStatus' is required/");
            }
            if (this.UploadStatus != null)
            {
                this.UploadStatus.Validate();
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// Test Cloud Start Test Run Options
    /// </summary>
    /// <remarks>
    /// Options required to start the test run
    /// </remarks>
    public partial class TestCloudStartTestRunOptions
    {
        /// <summary>
        /// Initializes a new instance of the TestCloudStartTestRunOptions
        /// class.
        /// </summary>
        public TestCloudStartTestRunOptions() { }


        /// <summary>
        /// Gets or sets test framework used by tests.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "test_framework")]
        public string TestFramework { get; set; }

        /// <summary>
        /// Gets or sets device selection string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "device_selection")]
        public string DeviceSelection { get; set; }

        /// <summary>
        /// Gets or sets locale that should be used to run tests.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "locale")]
        public string Locale { get; set; }

        /// <summary>
        /// Gets or sets name of the test series.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "test_series")]
        public string TestSeries { get; set; }

        /// <summary>
        /// Gets or sets a JSON dictionary with additional test parameters
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "test_parameters")]
        public object TestParameters { get; set; }

        public virtual void Validate()
        {
            if (TestFramework == null)
            {
                throw new System.Exception("Property 'TestFramework' is required/");
            }
            if (DeviceSelection == null)
            {
                throw new System.Exception("Property 'DeviceSelection' is required/");
            }
        }
    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// Test Cloud Test Run Start Result
    /// </summary>
    /// <remarks>
    /// Result of starting a test run
    /// </remarks>
    public partial class TestCloudStartTestRunResult
    {
        /// <summary>
        /// Initializes a new instance of the TestCloudStartTestRunResult
        /// class.
        /// </summary>
        public TestCloudStartTestRunResult() { }


        /// <summary>
        /// Gets or sets list with names of accepted devices
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "accepted_devices")]
        public string[] AcceptedDevices { get; set; }

        /// <summary>
        /// Gets or sets list with names and descriptions of rejected devices
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rejected_devices")]
        public string[] RejectedDevices { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// Test Run State
    /// </summary>
    /// <remarks>
    /// Current status of a test run
    /// </remarks>
    public partial class TestRunState
    {
        /// <summary>
        /// Initializes a new instance of the TestRunState class.
        /// </summary>
        public TestRunState() { }


        /// <summary>
        /// Gets or sets multi-line message that describes the status
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "message")]
        public string[] Message { get; set; }

        /// <summary>
        /// Gets or sets time (in seconds) that the client should wait for
        /// before checking the status again
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "wait_time")]
        public int? WaitTime { get; set; }

        /// <summary>
        /// Gets or sets exit code for the client
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "exit_code")]
        public int? ExitCode { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class Permission
    {
        /// <summary>
        /// Initializes a new instance of the Permission class.
        /// </summary>
        public Permission() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Level")]
        public string Level { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class TableColumn
    {
        /// <summary>
        /// Initializes a new instance of the TableColumn class.
        /// </summary>
        public TableColumn() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "IsIndexed")]
        public bool? IsIndexed { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'String', 'Boolean',
        /// 'Number', 'Date', 'Version', 'Custom'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Type")]
        public TableColumnType? Type { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "CanDelete")]
        public bool? CanDelete { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "CanUpdateIndex")]
        public bool? CanUpdateIndex { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class Table
    {
        /// <summary>
        /// Initializes a new instance of the Table class.
        /// </summary>
        public Table() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "permissions")]
        public Permission[] Permissions { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "extendedSettings")]
        public System.Collections.Generic.Dictionary<string, string> ExtendedSettings { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "columns")]
        public TableColumn[] Columns { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class ImportDataContainer
    {
        /// <summary>
        /// Initializes a new instance of the ImportDataContainer class.
        /// </summary>
        public ImportDataContainer() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "csvData")]
        public string CsvData { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class PushConfigApnsCredential
    {
        /// <summary>
        /// Initializes a new instance of the PushConfigApnsCredential class.
        /// </summary>
        public PushConfigApnsCredential() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "endpoint")]
        public string Endpoint { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "apnsCertificate")]
        public string ApnsCertificate { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class PushConfigGcmCredential
    {
        /// <summary>
        /// Initializes a new instance of the PushConfigGcmCredential class.
        /// </summary>
        public PushConfigGcmCredential() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "googleApiKey")]
        public string GoogleApiKey { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    public partial class PushConfig
    {
        /// <summary>
        /// Initializes a new instance of the PushConfig class.
        /// </summary>
        public PushConfig() { }


        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "apnsCredential")]
        public PushConfigApnsCredential ApnsCredential { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "gcmCredential")]
        public PushConfigGcmCredential GcmCredential { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// Defines headers for uploadHash operation.
    /// </summary>
    public partial class TestUploadHashHeaders
    {
        /// <summary>
        /// Initializes a new instance of the TestUploadHashHeaders class.
        /// </summary>
        public TestUploadHashHeaders() { }


        /// <summary>
        /// Gets or sets byte range required to authenticate the request
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "X-Challenge-Bytes")]
        public string XChallengeBytes { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// Defines headers for startUploadingFile operation.
    /// </summary>
    public partial class TestStartUploadingFileHeaders
    {
        /// <summary>
        /// Initializes a new instance of the TestStartUploadingFileHeaders
        /// class.
        /// </summary>
        public TestStartUploadingFileHeaders() { }


        /// <summary>
        /// Gets or sets relative URL that points to the upload endpoint
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Location")]
        public string Location { get; set; }

    }
}

namespace MobileCenterApi.Models
{
    using System.Linq;

    /// <summary>
    /// Defines headers for createTestRun operation.
    /// </summary>
    public partial class TestCreateTestRunHeaders
    {
        /// <summary>
        /// Initializes a new instance of the TestCreateTestRunHeaders class.
        /// </summary>
        public TestCreateTestRunHeaders() { }


        /// <summary>
        /// Gets or sets relative URL that points to the test run
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Location")]
        public string Location { get; set; }

    }
}

namespace MobileCenterApi.Models
{

    /// <summary>
    /// Defines values for ErrorDetailsCode.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum ErrorDetailsCode
    {
        [System.Runtime.Serialization.EnumMember(Value = "BadRequest")]
        BadRequest,
        [System.Runtime.Serialization.EnumMember(Value = "Conflict")]
        Conflict,
        [System.Runtime.Serialization.EnumMember(Value = "NotAcceptable")]
        NotAcceptable,
        [System.Runtime.Serialization.EnumMember(Value = "NotFound")]
        NotFound,
        [System.Runtime.Serialization.EnumMember(Value = "InternalServerError")]
        InternalServerError,
        [System.Runtime.Serialization.EnumMember(Value = "Unauthorized")]
        Unauthorized
    }
}

namespace MobileCenterApi.Models
{

    /// <summary>
    /// Defines values for AppRequestOs.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum AppRequestOs
    {
        [System.Runtime.Serialization.EnumMember(Value = "iOS")]
        IOS,
        [System.Runtime.Serialization.EnumMember(Value = "Android")]
        Android
    }
}

namespace MobileCenterApi.Models
{

    /// <summary>
    /// Defines values for AppRequestPlatform.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum AppRequestPlatform
    {
        [System.Runtime.Serialization.EnumMember(Value = "Objective-C-Swift")]
        ObjectiveCSwift,
        [System.Runtime.Serialization.EnumMember(Value = "Java")]
        Java,
        [System.Runtime.Serialization.EnumMember(Value = "React-Native")]
        ReactNative,
        [System.Runtime.Serialization.EnumMember(Value = "Xamarin")]
        Xamarin
    }
}

namespace MobileCenterApi.Models
{

    /// <summary>
    /// Defines values for AppResponseOs.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum AppResponseOs
    {
        [System.Runtime.Serialization.EnumMember(Value = "iOS")]
        IOS,
        [System.Runtime.Serialization.EnumMember(Value = "Android")]
        Android
    }
}

namespace MobileCenterApi.Models
{

    /// <summary>
    /// Defines values for AppResponsePlatform.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum AppResponsePlatform
    {
        [System.Runtime.Serialization.EnumMember(Value = "Objective-C-Swift")]
        ObjectiveCSwift,
        [System.Runtime.Serialization.EnumMember(Value = "Java")]
        Java,
        [System.Runtime.Serialization.EnumMember(Value = "React-Native")]
        ReactNative,
        [System.Runtime.Serialization.EnumMember(Value = "Xamarin")]
        Xamarin
    }
}

namespace MobileCenterApi.Models
{

    /// <summary>
    /// Defines values for OwnerType.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum OwnerType
    {
        [System.Runtime.Serialization.EnumMember(Value = "org")]
        Org,
        [System.Runtime.Serialization.EnumMember(Value = "user")]
        User
    }
}

namespace MobileCenterApi.Models
{

    /// <summary>
    /// Defines values for AppInvitationDetailResponseInviteType.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum AppInvitationDetailResponseInviteType
    {
        [System.Runtime.Serialization.EnumMember(Value = "developer")]
        Developer,
        [System.Runtime.Serialization.EnumMember(Value = "tester")]
        Tester
    }
}

namespace MobileCenterApi.Models
{

    /// <summary>
    /// Defines values for GrantAdminRoleRequestAdminRole.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum GrantAdminRoleRequestAdminRole
    {
        [System.Runtime.Serialization.EnumMember(Value = "superAdmin")]
        SuperAdmin,
        [System.Runtime.Serialization.EnumMember(Value = "admin")]
        Admin,
        [System.Runtime.Serialization.EnumMember(Value = "devOps")]
        DevOps,
        [System.Runtime.Serialization.EnumMember(Value = "notAdmin")]
        NotAdmin
    }
}

namespace MobileCenterApi.Models
{

    /// <summary>
    /// Defines values for BranchConfigurationTrigger.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum BranchConfigurationTrigger
    {
        [System.Runtime.Serialization.EnumMember(Value = "continous")]
        Continous,
        [System.Runtime.Serialization.EnumMember(Value = "continuous")]
        Continuous,
        [System.Runtime.Serialization.EnumMember(Value = "manual")]
        Manual
    }
}

namespace MobileCenterApi.Models
{

    /// <summary>
    /// Defines values for RepoConfigState.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum RepoConfigState
    {
        [System.Runtime.Serialization.EnumMember(Value = "unauthorized")]
        Unauthorized,
        [System.Runtime.Serialization.EnumMember(Value = "inactive")]
        Inactive,
        [System.Runtime.Serialization.EnumMember(Value = "active")]
        Active
    }
}

namespace MobileCenterApi.Models
{

    /// <summary>
    /// Defines values for BuildPatchStatus.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum BuildPatchStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "cancelling")]
        Cancelling
    }
}

namespace MobileCenterApi.Models
{

    /// <summary>
    /// Defines values for ReleaseDetailsStatus.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum ReleaseDetailsStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "available")]
        Available,
        [System.Runtime.Serialization.EnumMember(Value = "unavailable")]
        Unavailable
    }
}

namespace MobileCenterApi.Models
{

    /// <summary>
    /// Defines values for ReleaseUploadEndRequestStatus.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum ReleaseUploadEndRequestStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "committed")]
        Committed,
        [System.Runtime.Serialization.EnumMember(Value = "aborted")]
        Aborted
    }
}

namespace MobileCenterApi.Models
{

    /// <summary>
    /// Defines values for PackageUploadEndRequestStatus.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum PackageUploadEndRequestStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "committed")]
        Committed,
        [System.Runtime.Serialization.EnumMember(Value = "aborted")]
        Aborted
    }
}

namespace MobileCenterApi.Models
{

    /// <summary>
    /// Defines values for PackageDetailsStatus.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum PackageDetailsStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "available")]
        Available,
        [System.Runtime.Serialization.EnumMember(Value = "unavailable")]
        Unavailable
    }
}

namespace MobileCenterApi.Models
{

    /// <summary>
    /// Defines values for SymbolType.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum SymbolType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Apple")]
        Apple,
        [System.Runtime.Serialization.EnumMember(Value = "JavaScript")]
        JavaScript
    }
}

namespace MobileCenterApi.Models
{

    /// <summary>
    /// Defines values for SymbolOrigin.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum SymbolOrigin
    {
        [System.Runtime.Serialization.EnumMember(Value = "System")]
        System,
        [System.Runtime.Serialization.EnumMember(Value = "User")]
        User
    }
}

namespace MobileCenterApi.Models
{

    /// <summary>
    /// Defines values for SymbolStatus.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum SymbolStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "available")]
        Available,
        [System.Runtime.Serialization.EnumMember(Value = "ignored")]
        Ignored
    }
}

namespace MobileCenterApi.Models
{

    /// <summary>
    /// Defines values for SymbolUploadStatus.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum SymbolUploadStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "created")]
        Created,
        [System.Runtime.Serialization.EnumMember(Value = "committed")]
        Committed,
        [System.Runtime.Serialization.EnumMember(Value = "aborted")]
        Aborted,
        [System.Runtime.Serialization.EnumMember(Value = "processing")]
        Processing,
        [System.Runtime.Serialization.EnumMember(Value = "indexed")]
        Indexed,
        [System.Runtime.Serialization.EnumMember(Value = "failed")]
        Failed
    }
}

namespace MobileCenterApi.Models
{

    /// <summary>
    /// Defines values for SymbolUploadOrigin.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum SymbolUploadOrigin
    {
        [System.Runtime.Serialization.EnumMember(Value = "User")]
        User,
        [System.Runtime.Serialization.EnumMember(Value = "System")]
        System
    }
}

namespace MobileCenterApi.Models
{

    /// <summary>
    /// Defines values for SymbolUploadEndRequestStatus.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum SymbolUploadEndRequestStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "committed")]
        Committed,
        [System.Runtime.Serialization.EnumMember(Value = "aborted")]
        Aborted
    }
}

namespace MobileCenterApi.Models
{

    /// <summary>
    /// Defines values for StackFrameLanguage.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum StackFrameLanguage
    {
        [System.Runtime.Serialization.EnumMember(Value = "JavaScript")]
        JavaScript,
        [System.Runtime.Serialization.EnumMember(Value = "CSharp")]
        CSharp,
        [System.Runtime.Serialization.EnumMember(Value = "Objective-C")]
        ObjectiveC,
        [System.Runtime.Serialization.EnumMember(Value = "Objective-Cpp")]
        ObjectiveCpp,
        [System.Runtime.Serialization.EnumMember(Value = "Cpp")]
        Cpp,
        [System.Runtime.Serialization.EnumMember(Value = "C")]
        C,
        [System.Runtime.Serialization.EnumMember(Value = "Swift")]
        Swift,
        [System.Runtime.Serialization.EnumMember(Value = "Java")]
        Java,
        [System.Runtime.Serialization.EnumMember(Value = "Unknown")]
        Unknown
    }
}

namespace MobileCenterApi.Models
{

    /// <summary>
    /// Defines values for ExceptionPlatform.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum ExceptionPlatform
    {
        [System.Runtime.Serialization.EnumMember(Value = "ios")]
        Ios,
        [System.Runtime.Serialization.EnumMember(Value = "android")]
        Android,
        [System.Runtime.Serialization.EnumMember(Value = "xamarin")]
        Xamarin,
        [System.Runtime.Serialization.EnumMember(Value = "react-native")]
        ReactNative,
        [System.Runtime.Serialization.EnumMember(Value = "other")]
        Other
    }
}

namespace MobileCenterApi.Models
{

    /// <summary>
    /// Defines values for ThreadPlatform.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum ThreadPlatform
    {
        [System.Runtime.Serialization.EnumMember(Value = "ios")]
        Ios,
        [System.Runtime.Serialization.EnumMember(Value = "android")]
        Android,
        [System.Runtime.Serialization.EnumMember(Value = "xamarin")]
        Xamarin,
        [System.Runtime.Serialization.EnumMember(Value = "react-native")]
        ReactNative,
        [System.Runtime.Serialization.EnumMember(Value = "other")]
        Other
    }
}

namespace MobileCenterApi.Models
{

    /// <summary>
    /// Defines values for ReasonStackFrameLanguage.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum ReasonStackFrameLanguage
    {
        [System.Runtime.Serialization.EnumMember(Value = "JavaScript")]
        JavaScript,
        [System.Runtime.Serialization.EnumMember(Value = "CSharp")]
        CSharp,
        [System.Runtime.Serialization.EnumMember(Value = "Objective-C")]
        ObjectiveC,
        [System.Runtime.Serialization.EnumMember(Value = "Objective-Cpp")]
        ObjectiveCpp,
        [System.Runtime.Serialization.EnumMember(Value = "Cpp")]
        Cpp,
        [System.Runtime.Serialization.EnumMember(Value = "C")]
        C,
        [System.Runtime.Serialization.EnumMember(Value = "Swift")]
        Swift,
        [System.Runtime.Serialization.EnumMember(Value = "Java")]
        Java,
        [System.Runtime.Serialization.EnumMember(Value = "Unknown")]
        Unknown
    }
}

namespace MobileCenterApi.Models
{

    /// <summary>
    /// Defines values for CrashGroupStatus.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum CrashGroupStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "open")]
        Open,
        [System.Runtime.Serialization.EnumMember(Value = "closed")]
        Closed,
        [System.Runtime.Serialization.EnumMember(Value = "ignored")]
        Ignored
    }
}

namespace MobileCenterApi.Models
{

    /// <summary>
    /// Defines values for TestCloudFileHashDeprecatedFileType.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum TestCloudFileHashDeprecatedFileType
    {
        [System.Runtime.Serialization.EnumMember(Value = "dsym-file")]
        DsymFile,
        [System.Runtime.Serialization.EnumMember(Value = "app-file")]
        AppFile,
        [System.Runtime.Serialization.EnumMember(Value = "test-file")]
        TestFile
    }
}

namespace MobileCenterApi.Models
{

    /// <summary>
    /// Defines values for TestCloudFileHashFileType.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum TestCloudFileHashFileType
    {
        [System.Runtime.Serialization.EnumMember(Value = "dsym-file")]
        DsymFile,
        [System.Runtime.Serialization.EnumMember(Value = "app-file")]
        AppFile,
        [System.Runtime.Serialization.EnumMember(Value = "test-file")]
        TestFile
    }
}

namespace MobileCenterApi.Models
{

    /// <summary>
    /// Defines values for TestCloudFileHashResponseFileType.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum TestCloudFileHashResponseFileType
    {
        [System.Runtime.Serialization.EnumMember(Value = "dsym-file")]
        DsymFile,
        [System.Runtime.Serialization.EnumMember(Value = "app-file")]
        AppFile,
        [System.Runtime.Serialization.EnumMember(Value = "test-file")]
        TestFile
    }
}

namespace MobileCenterApi.Models
{

    /// <summary>
    /// Defines values for TableColumnType.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum TableColumnType
    {
        [System.Runtime.Serialization.EnumMember(Value = "String")]
        String,
        [System.Runtime.Serialization.EnumMember(Value = "Boolean")]
        Boolean,
        [System.Runtime.Serialization.EnumMember(Value = "Number")]
        Number,
        [System.Runtime.Serialization.EnumMember(Value = "Date")]
        Date,
        [System.Runtime.Serialization.EnumMember(Value = "Version")]
        Version,
        [System.Runtime.Serialization.EnumMember(Value = "Custom")]
        Custom
    }
}

namespace MobileCenterApi.Models
{

    /// <summary>
    /// Defines values for Form.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum Form
    {
        [System.Runtime.Serialization.EnumMember(Value = "lite")]
        Lite,
        [System.Runtime.Serialization.EnumMember(Value = "full")]
        Full
    }
}

namespace MobileCenterApi.Models
{

    /// <summary>
    /// Defines values for ErrorType.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum ErrorType
    {
        [System.Runtime.Serialization.EnumMember(Value = "something")]
        Something,
        [System.Runtime.Serialization.EnumMember(Value = "else")]
        Else
    }
}

namespace MobileCenterApi.Models
{

    /// <summary>
    /// Defines values for GroupType.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum GroupType
    {
        [System.Runtime.Serialization.EnumMember(Value = "GroupType1")]
        GroupType1,
        [System.Runtime.Serialization.EnumMember(Value = "GroupType2")]
        GroupType2
    }
}

namespace MobileCenterApi.Models
{

    /// <summary>
    /// Defines values for GroupStatus.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum GroupStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "open")]
        Open,
        [System.Runtime.Serialization.EnumMember(Value = "closed")]
        Closed,
        [System.Runtime.Serialization.EnumMember(Value = "ignored")]
        Ignored
    }
}

namespace MobileCenterApi.Models
{

    /// <summary>
    /// Defines values for Inlinecount.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum Inlinecount
    {
        [System.Runtime.Serialization.EnumMember(Value = "allpages")]
        Allpages,
        [System.Runtime.Serialization.EnumMember(Value = "none")]
        None
    }
}

namespace MobileCenterApi.Models
{

    /// <summary>
    /// Defines values for Type.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum Type
    {
        [System.Runtime.Serialization.EnumMember(Value = "appsvc")]
        Appsvc,
        [System.Runtime.Serialization.EnumMember(Value = "push")]
        Push
    }
}

namespace MobileCenterApi.Models
{

    /// <summary>
    /// Defines values for DownloadType.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum DownloadType
    {
        [System.Runtime.Serialization.EnumMember(Value = "build")]
        Build,
        [System.Runtime.Serialization.EnumMember(Value = "symbols")]
        Symbols,
        [System.Runtime.Serialization.EnumMember(Value = "logs")]
        Logs
    }
}

namespace MobileCenterApi.Models
{

    /// <summary>
    /// Defines values for Os.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum Os
    {
        [System.Runtime.Serialization.EnumMember(Value = "iOS")]
        IOS,
        [System.Runtime.Serialization.EnumMember(Value = "Android")]
        Android
    }
}

namespace MobileCenterApi.Models
{

    /// <summary>
    /// Defines values for Platform.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum Platform
    {
        [System.Runtime.Serialization.EnumMember(Value = "Objective-C-Swift")]
        ObjectiveCSwift,
        [System.Runtime.Serialization.EnumMember(Value = "React-Native")]
        ReactNative,
        [System.Runtime.Serialization.EnumMember(Value = "Xamarin")]
        Xamarin,
        [System.Runtime.Serialization.EnumMember(Value = "Java")]
        Java
    }
}
// Code generated by SimpleSwaggerGenerator 1.0.6256.33542
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace MobileCenterApi
{

    using System;
    using System.Runtime.Serialization;
    public static partial class EnumExtensions
    {
        public static string GetEnumMember<T>(this T enumerationValue) where T : struct, IConvertible
        {
            var type = enumerationValue.GetType();
            if (!type.IsEnum)
            {
                throw new ArgumentException("EnumerationValue must be of Enum type", "enumerationValue");
            }
            var memberInfo = type.GetMember(enumerationValue.ToString());
            if (memberInfo != null && memberInfo.Length > 0)
            {
                var attrs = memberInfo[0].GetCustomAttributes(typeof(EnumMemberAttribute), false);
                if (attrs != null && attrs.Length > 0)
                {
                    return ((EnumMemberAttribute)attrs[0]).Value;
                }
            }
            return enumerationValue.ToString();
        }
    }
}
