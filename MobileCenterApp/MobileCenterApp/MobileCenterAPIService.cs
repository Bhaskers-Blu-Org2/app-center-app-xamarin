//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Swagger {
    using SimpleAuth;
    using System.Net.Http;
    using System.Threading.Tasks;
    using System.Collections.Generic;
    
    
    public partial class ApiTokensCreateResponse {
        
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id {get; set;}
        
        [Newtonsoft.Json.JsonProperty("api_token")]
        public string ApiToken {get; set;}
        
        [Newtonsoft.Json.JsonProperty("description")]
        public string Description {get; set;}
        
        [Newtonsoft.Json.JsonProperty("created_at")]
        public string CreatedAt {get; set;}
    }
    
    public partial class ApiTokensCreateRequest {
        
        [Newtonsoft.Json.JsonProperty("description")]
        public string Description {get; set;}
    }
    
    public partial class ApiTokensGetResponse {
        
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id {get; set;}
        
        [Newtonsoft.Json.JsonProperty("description")]
        public string Description {get; set;}
        
        [Newtonsoft.Json.JsonProperty("created_at")]
        public string CreatedAt {get; set;}
    }
    
    public partial class Status {
        
        [Newtonsoft.Json.JsonProperty("status")]
        public string StatusValue {get; set;}
    }
    
    public partial class Failure {
        
        [Newtonsoft.Json.JsonProperty("message")]
        public string Message {get; set;}
    }
    
    public partial class ErrorResponse {
        
        [Newtonsoft.Json.JsonProperty("error")]
        public ErrorDetails Error {get; set;}
    }
    
    public partial class ErrorDetails {
        
        [Newtonsoft.Json.JsonProperty("code")]
        public string Code {get; set;}
        
        [Newtonsoft.Json.JsonProperty("message")]
        public string Message {get; set;}
    }
    
    public partial class AppPatchRequest {
        
        [Newtonsoft.Json.JsonProperty("description")]
        public string Description {get; set;}
        
        [Newtonsoft.Json.JsonProperty("display_name")]
        public string DisplayName {get; set;}
        
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name {get; set;}
    }
    
    public partial class AppRequest {
        
        [Newtonsoft.Json.JsonProperty("description")]
        public string Description {get; set;}
        
        [Newtonsoft.Json.JsonProperty("display_name")]
        public string DisplayName {get; set;}
        
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name {get; set;}
        
        [Newtonsoft.Json.JsonProperty("os")]
        public string Os {get; set;}
        
        [Newtonsoft.Json.JsonProperty("platform")]
        public string Platform {get; set;}
    }
    
    public partial class FeatureNameResponse {
        
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name {get; set;}
    }
    
    public partial class FeatureRequestResponse {
        
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name {get; set;}
        
        [Newtonsoft.Json.JsonProperty("display_name")]
        public string DisplayName {get; set;}
        
        [Newtonsoft.Json.JsonProperty("state")]
        public int State {get; set;}
        
        [Newtonsoft.Json.JsonProperty("description")]
        public string Description {get; set;}
    }
    
    public partial class FeaturePatchRequest {
        
        [Newtonsoft.Json.JsonProperty("display_name")]
        public string DisplayName {get; set;}
        
        [Newtonsoft.Json.JsonProperty("state")]
        public int State {get; set;}
        
        [Newtonsoft.Json.JsonProperty("description")]
        public string Description {get; set;}
    }
    
    public partial class UserUpdateRequest {
        
        [Newtonsoft.Json.JsonProperty("display_name")]
        public string DisplayName {get; set;}
    }
    
    public partial class UserUpdateRequestInternal {
        
        [Newtonsoft.Json.JsonProperty("display_name")]
        public string DisplayName {get; set;}
        
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name {get; set;}
        
        [Newtonsoft.Json.JsonProperty("next_nps_survey_date")]
        public string NextNpsSurveyDate {get; set;}
    }
    
    public partial class AppResponse {
        
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id {get; set;}
        
        [Newtonsoft.Json.JsonProperty("app_secret")]
        public string AppSecret {get; set;}
        
        [Newtonsoft.Json.JsonProperty("description")]
        public string Description {get; set;}
        
        [Newtonsoft.Json.JsonProperty("display_name")]
        public string DisplayName {get; set;}
        
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name {get; set;}
        
        [Newtonsoft.Json.JsonProperty("os")]
        public string Os {get; set;}
        
        [Newtonsoft.Json.JsonProperty("platform")]
        public string Platform {get; set;}
        
        [Newtonsoft.Json.JsonProperty("icon_url")]
        public string IconUrl {get; set;}
        
        [Newtonsoft.Json.JsonProperty("owner")]
        public Owner Owner {get; set;}
        
        [Newtonsoft.Json.JsonProperty("azure_subscription_id")]
        public string AzureSubscriptionId {get; set;}
    }
    
    public partial class FeatureResponse {
        
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name {get; set;}
        
        [Newtonsoft.Json.JsonProperty("display_name")]
        public string DisplayName {get; set;}
        
        [Newtonsoft.Json.JsonProperty("description")]
        public string Description {get; set;}
        
        [Newtonsoft.Json.JsonProperty("state")]
        public int State {get; set;}
    }
    
    public partial class Owner {
        
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id {get; set;}
        
        [Newtonsoft.Json.JsonProperty("avatar_url")]
        public string AvatarUrl {get; set;}
        
        [Newtonsoft.Json.JsonProperty("email")]
        public string Email {get; set;}
        
        [Newtonsoft.Json.JsonProperty("display_name")]
        public string DisplayName {get; set;}
        
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name {get; set;}
        
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type {get; set;}
    }
    
    public partial class UserProfileResponse {
        
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id {get; set;}
        
        [Newtonsoft.Json.JsonProperty("email")]
        public string Email {get; set;}
        
        [Newtonsoft.Json.JsonProperty("display_name")]
        public string DisplayName {get; set;}
        
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name {get; set;}
        
        [Newtonsoft.Json.JsonProperty("avatar_url")]
        public string AvatarUrl {get; set;}
        
        [Newtonsoft.Json.JsonProperty("can_change_password")]
        public bool CanChangePassword {get; set;}
    }
    
    public partial class UserNameAvailabilityResponse {
        
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name {get; set;}
        
        [Newtonsoft.Json.JsonProperty("available")]
        public bool Available {get; set;}
    }
    
    public partial class AppInvitationDetailResponse {
        
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id {get; set;}
        
        [Newtonsoft.Json.JsonProperty("email")]
        public string Email {get; set;}
        
        [Newtonsoft.Json.JsonProperty("is_existing_user")]
        public bool IsExistingUser {get; set;}
        
        [Newtonsoft.Json.JsonProperty("invited_by")]
        public UserProfileResponse InvitedBy {get; set;}
        
        [Newtonsoft.Json.JsonProperty("invite_type")]
        public string InviteType {get; set;}
        
        [Newtonsoft.Json.JsonProperty("app")]
        public AppResponse App {get; set;}
    }
    
    public partial class DistributionGroupResponse {
        
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id {get; set;}
        
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name {get; set;}
    }
    
    public partial class DistributionGroupWithUsersResponse {
        
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id {get; set;}
        
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name {get; set;}
        
        [Newtonsoft.Json.JsonProperty("users")]
        public DistributionGroupUserGetResponse[] Users {get; set;}
        
        [Newtonsoft.Json.JsonProperty("total_user_count")]
        public double TotalUserCount {get; set;}
    }
    
    public partial class DistributionGroupRequest {
        
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name {get; set;}
    }
    
    public partial class DistributionGroupPatchRequest {
        
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name {get; set;}
    }
    
    public partial class DistributionGroupUserRequest {
        
        [Newtonsoft.Json.JsonProperty("user_ids")]
        public string[] UserIds {get; set;}
        
        [Newtonsoft.Json.JsonProperty("user_emails")]
        public string[] UserEmails {get; set;}
    }
    
    public partial class DistributionGroupUserGetResponse {
        
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id {get; set;}
        
        [Newtonsoft.Json.JsonProperty("email")]
        public string Email {get; set;}
        
        [Newtonsoft.Json.JsonProperty("display_name")]
        public string DisplayName {get; set;}
        
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name {get; set;}
        
        [Newtonsoft.Json.JsonProperty("avatar_url")]
        public string AvatarUrl {get; set;}
        
        [Newtonsoft.Json.JsonProperty("can_change_password")]
        public bool CanChangePassword {get; set;}
        
        [Newtonsoft.Json.JsonProperty("invite_pending")]
        public bool InvitePending {get; set;}
    }
    
    public partial class DistributionGroupUserPostResponse {
        
        [Newtonsoft.Json.JsonProperty("user_id")]
        public string UserId {get; set;}
        
        [Newtonsoft.Json.JsonProperty("user_email")]
        public string UserEmail {get; set;}
        
        [Newtonsoft.Json.JsonProperty("status")]
        public int Status {get; set;}
        
        [Newtonsoft.Json.JsonProperty("code")]
        public string Code {get; set;}
        
        [Newtonsoft.Json.JsonProperty("message")]
        public int Message {get; set;}
        
        [Newtonsoft.Json.JsonProperty("invite_pending")]
        public bool InvitePending {get; set;}
    }
    
    public partial class DistributionGroupUserDeleteResponse {
        
        [Newtonsoft.Json.JsonProperty("user_id")]
        public string UserId {get; set;}
        
        [Newtonsoft.Json.JsonProperty("user_email")]
        public string UserEmail {get; set;}
        
        [Newtonsoft.Json.JsonProperty("status")]
        public int Status {get; set;}
        
        [Newtonsoft.Json.JsonProperty("code")]
        public string Code {get; set;}
        
        [Newtonsoft.Json.JsonProperty("message")]
        public int Message {get; set;}
    }
    
    public partial class GrantAdminRoleRequest {
        
        [Newtonsoft.Json.JsonProperty("admin_role")]
        public string AdminRole {get; set;}
    }
    
    public partial class WaitlistApproveRequest {
        
        [Newtonsoft.Json.JsonProperty("email_addresses")]
        public string[] EmailAddresses {get; set;}
    }
    
    public partial class WaitListItemResponse {
        
        [Newtonsoft.Json.JsonProperty("email")]
        public string Email {get; set;}
        
        [Newtonsoft.Json.JsonProperty("did_succeed")]
        public bool DidSucceed {get; set;}
        
        [Newtonsoft.Json.JsonProperty("message")]
        public string Message {get; set;}
    }
    
    public partial class SourceRepository {
        
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name {get; set;}
    }
    
    public partial class SourceRepositories {
    }
    
    public partial class WebSocketContainer {
        
        [Newtonsoft.Json.JsonProperty("url")]
        public string Url {get; set;}
    }
    
    public partial class XcodeScheme {
        
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name {get; set;}
        
        [Newtonsoft.Json.JsonProperty("hasTestAction")]
        public bool HasTestAction {get; set;}
    }
    
    public partial class XcodeSchemeContainer {
        
        [Newtonsoft.Json.JsonProperty("path")]
        public string Path {get; set;}
        
        [Newtonsoft.Json.JsonProperty("sharedSchemes")]
        public XcodeScheme[] SharedSchemes {get; set;}
        
        [Newtonsoft.Json.JsonProperty("podfilePath")]
        public string PodfilePath {get; set;}
    }
    
    public partial class XamarinSolution {
        
        [Newtonsoft.Json.JsonProperty("path")]
        public string Path {get; set;}
        
        [Newtonsoft.Json.JsonProperty("configurations")]
        public string[] Configurations {get; set;}
    }
    
    public partial class AndroidProject {
        
        [Newtonsoft.Json.JsonProperty("androidModules")]
        public AndroidModule[] AndroidModules {get; set;}
        
        [Newtonsoft.Json.JsonProperty("gradleWrapperPath")]
        public string GradleWrapperPath {get; set;}
    }
    
    public partial class AndroidModule {
        
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name {get; set;}
        
        [Newtonsoft.Json.JsonProperty("productFlavors")]
        public string[] ProductFlavors {get; set;}
        
        [Newtonsoft.Json.JsonProperty("buildVariants")]
        public string[] BuildVariants {get; set;}
    }
    
    public partial class ToolsetProjects {
        
        [Newtonsoft.Json.JsonProperty("xcode")]
        public XcodeSchemeContainer[] Xcode {get; set;}
        
        [Newtonsoft.Json.JsonProperty("javascript")]
        public string[] Javascript {get; set;}
        
        [Newtonsoft.Json.JsonProperty("xamarin")]
        public XamarinSolution[] Xamarin {get; set;}
        
        [Newtonsoft.Json.JsonProperty("android")]
        public AndroidProject Android {get; set;}
    }
    
    public partial class BranchStatusCollection {
    }
    
    public partial class BranchStatus {
        
        [Newtonsoft.Json.JsonProperty("configured")]
        public bool Configured {get; set;}
        
        [Newtonsoft.Json.JsonProperty("lastBuild")]
        public Build LastBuild {get; set;}
    }
    
    public partial class BranchProperties {
        
        [Newtonsoft.Json.JsonProperty("branch")]
        public Branch Branch {get; set;}
        
        [Newtonsoft.Json.JsonProperty("enabled")]
        public bool Enabled {get; set;}
    }
    
    public partial class BranchConfiguration {
        
        [Newtonsoft.Json.JsonProperty("id")]
        public int Id {get; set;}
        
        [Newtonsoft.Json.JsonProperty("trigger")]
        public string Trigger {get; set;}
        
        [Newtonsoft.Json.JsonProperty("testsEnabled")]
        public bool TestsEnabled {get; set;}
        
        [Newtonsoft.Json.JsonProperty("signed")]
        public bool Signed {get; set;}
        
        [Newtonsoft.Json.JsonProperty("toolsets")]
        public BranchConfigurationToolsets Toolsets {get; set;}
    }
    
    public partial class BranchConfigurationToolsets {
        
        [Newtonsoft.Json.JsonProperty("xcode")]
        public XcodeBranchConfigurationProperties Xcode {get; set;}
        
        [Newtonsoft.Json.JsonProperty("javascript")]
        public JavaScriptBranchConfigurationProperties Javascript {get; set;}
        
        [Newtonsoft.Json.JsonProperty("xamarin")]
        public XamarinBranchConfigurationProperties Xamarin {get; set;}
        
        [Newtonsoft.Json.JsonProperty("android")]
        public AndroidBranchConfigurationProperties Android {get; set;}
    }
    
    public partial class XcodeBranchConfigurationProperties {
        
        [Newtonsoft.Json.JsonProperty("projectOrWorkspacePath")]
        public string ProjectOrWorkspacePath {get; set;}
        
        [Newtonsoft.Json.JsonProperty("podfilePath")]
        public string PodfilePath {get; set;}
        
        [Newtonsoft.Json.JsonProperty("provisioningProfileEncoded")]
        public string ProvisioningProfileEncoded {get; set;}
        
        [Newtonsoft.Json.JsonProperty("certificateEncoded")]
        public string CertificateEncoded {get; set;}
        
        [Newtonsoft.Json.JsonProperty("certificatePassword")]
        public string CertificatePassword {get; set;}
        
        [Newtonsoft.Json.JsonProperty("scheme")]
        public string Scheme {get; set;}
        
        [Newtonsoft.Json.JsonProperty("xcodeVersion")]
        public string XcodeVersion {get; set;}
        
        [Newtonsoft.Json.JsonProperty("provisioningProfileFilename")]
        public string ProvisioningProfileFilename {get; set;}
        
        [Newtonsoft.Json.JsonProperty("certificateFilename")]
        public string CertificateFilename {get; set;}
        
        [Newtonsoft.Json.JsonProperty("teamId")]
        public string TeamId {get; set;}
        
        [Newtonsoft.Json.JsonProperty("automaticSigning")]
        public bool AutomaticSigning {get; set;}
    }
    
    public partial class AndroidBranchConfigurationProperties {
        
        [Newtonsoft.Json.JsonProperty("gradleWrapperPath")]
        public string GradleWrapperPath {get; set;}
        
        [Newtonsoft.Json.JsonProperty("module")]
        public string Module {get; set;}
        
        [Newtonsoft.Json.JsonProperty("variant")]
        public string Variant {get; set;}
        
        [Newtonsoft.Json.JsonProperty("runTests")]
        public bool RunTests {get; set;}
        
        [Newtonsoft.Json.JsonProperty("runLint")]
        public bool RunLint {get; set;}
    }
    
    public partial class JavaScriptBranchConfigurationProperties {
        
        [Newtonsoft.Json.JsonProperty("packageJsonPath")]
        public string PackageJsonPath {get; set;}
        
        [Newtonsoft.Json.JsonProperty("runTests")]
        public bool RunTests {get; set;}
    }
    
    public partial class XamarinBranchConfigurationProperties {
        
        [Newtonsoft.Json.JsonProperty("slnPath")]
        public string SlnPath {get; set;}
        
        [Newtonsoft.Json.JsonProperty("isSimBuild")]
        public string IsSimBuild {get; set;}
        
        [Newtonsoft.Json.JsonProperty("args")]
        public string Args {get; set;}
        
        [Newtonsoft.Json.JsonProperty("configuration")]
        public string Configuration {get; set;}
        
        [Newtonsoft.Json.JsonProperty("p12File")]
        public string P12File {get; set;}
        
        [Newtonsoft.Json.JsonProperty("p12Pwd")]
        public string P12Pwd {get; set;}
        
        [Newtonsoft.Json.JsonProperty("provProfile")]
        public string ProvProfile {get; set;}
    }
    
    public partial class Branch {
        
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name {get; set;}
        
        [Newtonsoft.Json.JsonProperty("commit")]
        public Commit Commit {get; set;}
    }
    
    public partial class Commit {
        
        [Newtonsoft.Json.JsonProperty("sha")]
        public string Sha {get; set;}
        
        [Newtonsoft.Json.JsonProperty("url")]
        public string Url {get; set;}
    }
    
    public partial class RepoConfig {
        
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type {get; set;}
        
        [Newtonsoft.Json.JsonProperty("state")]
        public string State {get; set;}
        
        [Newtonsoft.Json.JsonProperty("repo_url")]
        public string RepoUrl {get; set;}
        
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id {get; set;}
    }
    
    public partial class RepoConfigs {
    }
    
    public partial class RepoInfo {
        
        [Newtonsoft.Json.JsonProperty("repo_url")]
        public string RepoUrl {get; set;}
    }
    
    public partial class Branches {
    }
    
    public partial class XcodeVersions {
    }
    
    public partial class XcodeVersion {
        
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name {get; set;}
        
        [Newtonsoft.Json.JsonProperty("current")]
        public bool Current {get; set;}
    }
    
    public partial class Builds {
    }
    
    public partial class BuildParams {
        
        [Newtonsoft.Json.JsonProperty("sourceVersion")]
        public string SourceVersion {get; set;}
        
        [Newtonsoft.Json.JsonProperty("debug")]
        public bool Debug {get; set;}
    }
    
    public partial class Build {
        
        [Newtonsoft.Json.JsonProperty("id")]
        public int Id {get; set;}
        
        [Newtonsoft.Json.JsonProperty("buildNumber")]
        public string BuildNumber {get; set;}
        
        [Newtonsoft.Json.JsonProperty("queueTime")]
        public string QueueTime {get; set;}
        
        [Newtonsoft.Json.JsonProperty("startTime")]
        public string StartTime {get; set;}
        
        [Newtonsoft.Json.JsonProperty("finishTime")]
        public string FinishTime {get; set;}
        
        [Newtonsoft.Json.JsonProperty("lastChangedDate")]
        public string LastChangedDate {get; set;}
        
        [Newtonsoft.Json.JsonProperty("status")]
        public string Status {get; set;}
        
        [Newtonsoft.Json.JsonProperty("result")]
        public string Result {get; set;}
        
        [Newtonsoft.Json.JsonProperty("sourceBranch")]
        public string SourceBranch {get; set;}
        
        [Newtonsoft.Json.JsonProperty("sourceVersion")]
        public string SourceVersion {get; set;}
    }
    
    public partial class BuildPatch {
        
        [Newtonsoft.Json.JsonProperty("status")]
        public string Status {get; set;}
    }
    
    public partial class SuccessResponse {
        
        [Newtonsoft.Json.JsonProperty("message")]
        public string Message {get; set;}
    }
    
    public partial class ValidationErrorResponse {
        
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id {get; set;}
        
        [Newtonsoft.Json.JsonProperty("code")]
        public string Code {get; set;}
        
        [Newtonsoft.Json.JsonProperty("message")]
        public string Message {get; set;}
    }
    
    public partial class BasicReleaseDetails {
        
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id {get; set;}
        
        [Newtonsoft.Json.JsonProperty("version")]
        public string Version {get; set;}
        
        [Newtonsoft.Json.JsonProperty("short_version")]
        public string ShortVersion {get; set;}
        
        [Newtonsoft.Json.JsonProperty("uploaded_at")]
        public string UploadedAt {get; set;}
        
        [Newtonsoft.Json.JsonProperty("distribution_groups")]
        public DistributionGroup[] DistributionGroups {get; set;}
    }
    
    public partial class ReleaseDetails {
        
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id {get; set;}
        
        [Newtonsoft.Json.JsonProperty("status")]
        public string Status {get; set;}
        
        [Newtonsoft.Json.JsonProperty("app_name")]
        public string AppName {get; set;}
        
        [Newtonsoft.Json.JsonProperty("version")]
        public string Version {get; set;}
        
        [Newtonsoft.Json.JsonProperty("short_version")]
        public string ShortVersion {get; set;}
        
        [Newtonsoft.Json.JsonProperty("release_notes")]
        public string ReleaseNotes {get; set;}
        
        [Newtonsoft.Json.JsonProperty("provisioning_profile_name")]
        public string ProvisioningProfileName {get; set;}
        
        [Newtonsoft.Json.JsonProperty("size")]
        public double Size {get; set;}
        
        [Newtonsoft.Json.JsonProperty("min_os")]
        public string MinOs {get; set;}
        
        [Newtonsoft.Json.JsonProperty("fingerprint")]
        public string Fingerprint {get; set;}
        
        [Newtonsoft.Json.JsonProperty("uploaded_at")]
        public string UploadedAt {get; set;}
        
        [Newtonsoft.Json.JsonProperty("download_url")]
        public string DownloadUrl {get; set;}
        
        [Newtonsoft.Json.JsonProperty("app_icon_url")]
        public string AppIconUrl {get; set;}
        
        [Newtonsoft.Json.JsonProperty("install_url")]
        public string InstallUrl {get; set;}
        
        [Newtonsoft.Json.JsonProperty("distribution_groups")]
        public DistributionGroup[] DistributionGroups {get; set;}
    }
    
    public partial class ReleaseUploadBeginResponse {
        
        [Newtonsoft.Json.JsonProperty("upload_id")]
        public string UploadId {get; set;}
        
        [Newtonsoft.Json.JsonProperty("upload_url")]
        public string UploadUrl {get; set;}
    }
    
    public partial class ReleaseUploadEndRequest {
        
        [Newtonsoft.Json.JsonProperty("status")]
        public string Status {get; set;}
    }
    
    public partial class ReleaseUploadEndResponse {
        
        [Newtonsoft.Json.JsonProperty("release_url")]
        public string ReleaseUrl {get; set;}
    }
    
    public partial class ReleaseUpdateRequest {
        
        [Newtonsoft.Json.JsonProperty("distribution_group_name")]
        public string DistributionGroupName {get; set;}
        
        [Newtonsoft.Json.JsonProperty("distribution_group_id")]
        public string DistributionGroupId {get; set;}
        
        [Newtonsoft.Json.JsonProperty("release_notes")]
        public string ReleaseNotes {get; set;}
    }
    
    public partial class ReleaseDeleteResponse {
    }
    
    public partial class PackageUploadBeginResponse {
        
        [Newtonsoft.Json.JsonProperty("upload_id")]
        public string UploadId {get; set;}
        
        [Newtonsoft.Json.JsonProperty("upload_url")]
        public string UploadUrl {get; set;}
    }
    
    public partial class PackageUploadEndRequest {
        
        [Newtonsoft.Json.JsonProperty("status")]
        public string Status {get; set;}
    }
    
    public partial class PackageUploadEndResponse {
        
        [Newtonsoft.Json.JsonProperty("package_url")]
        public string PackageUrl {get; set;}
    }
    
    public partial class PackageUpdateRequest {
        
        [Newtonsoft.Json.JsonProperty("distribution_group_name")]
        public string DistributionGroupName {get; set;}
        
        [Newtonsoft.Json.JsonProperty("distribution_group_id")]
        public string DistributionGroupId {get; set;}
        
        [Newtonsoft.Json.JsonProperty("release_notes")]
        public string ReleaseNotes {get; set;}
    }
    
    public partial class DistributionGroup {
        
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id {get; set;}
        
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name {get; set;}
        
        [Newtonsoft.Json.JsonProperty("is_latest")]
        public bool IsLatest {get; set;}
    }
    
    public partial class BasicPackageDetails {
        
        [Newtonsoft.Json.JsonProperty("package_id")]
        public string PackageId {get; set;}
        
        [Newtonsoft.Json.JsonProperty("version")]
        public string Version {get; set;}
        
        [Newtonsoft.Json.JsonProperty("short_version")]
        public string ShortVersion {get; set;}
        
        [Newtonsoft.Json.JsonProperty("uploaded_at")]
        public string UploadedAt {get; set;}
        
        [Newtonsoft.Json.JsonProperty("distribution_groups")]
        public DistributionGroup[] DistributionGroups {get; set;}
    }
    
    public partial class PackageDetails {
        
        [Newtonsoft.Json.JsonProperty("package_id")]
        public string PackageId {get; set;}
        
        [Newtonsoft.Json.JsonProperty("status")]
        public string Status {get; set;}
        
        [Newtonsoft.Json.JsonProperty("app_name")]
        public string AppName {get; set;}
        
        [Newtonsoft.Json.JsonProperty("version")]
        public string Version {get; set;}
        
        [Newtonsoft.Json.JsonProperty("short_version")]
        public string ShortVersion {get; set;}
        
        [Newtonsoft.Json.JsonProperty("release_notes")]
        public string ReleaseNotes {get; set;}
        
        [Newtonsoft.Json.JsonProperty("provisioning_profile_name")]
        public string ProvisioningProfileName {get; set;}
        
        [Newtonsoft.Json.JsonProperty("size")]
        public double Size {get; set;}
        
        [Newtonsoft.Json.JsonProperty("min_os")]
        public string MinOs {get; set;}
        
        [Newtonsoft.Json.JsonProperty("fingerprint")]
        public string Fingerprint {get; set;}
        
        [Newtonsoft.Json.JsonProperty("uploaded_at")]
        public string UploadedAt {get; set;}
        
        [Newtonsoft.Json.JsonProperty("download_url")]
        public string DownloadUrl {get; set;}
        
        [Newtonsoft.Json.JsonProperty("app_icon_url")]
        public string AppIconUrl {get; set;}
        
        [Newtonsoft.Json.JsonProperty("install_url")]
        public string InstallUrl {get; set;}
        
        [Newtonsoft.Json.JsonProperty("distribution_groups")]
        public DistributionGroup[] DistributionGroups {get; set;}
    }
    
    public partial class Symbol {
        
        [Newtonsoft.Json.JsonProperty("symbol_id")]
        public string SymbolId {get; set;}
        
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type {get; set;}
        
        [Newtonsoft.Json.JsonProperty("app_id")]
        public string AppId {get; set;}
        
        [Newtonsoft.Json.JsonProperty("platform")]
        public string Platform {get; set;}
        
        [Newtonsoft.Json.JsonProperty("url")]
        public string Url {get; set;}
        
        [Newtonsoft.Json.JsonProperty("origin")]
        public string Origin {get; set;}
        
        [Newtonsoft.Json.JsonProperty("alternate_symbol_ids")]
        public string[] AlternateSymbolIds {get; set;}
        
        [Newtonsoft.Json.JsonProperty("status")]
        public string Status {get; set;}
    }
    
    public partial class Symbols {
    }
    
    public partial class SymbolUpload {
        
        [Newtonsoft.Json.JsonProperty("symbol_upload_id")]
        public string SymbolUploadId {get; set;}
        
        [Newtonsoft.Json.JsonProperty("app_id")]
        public string AppId {get; set;}
        
        [Newtonsoft.Json.JsonProperty("status")]
        public string Status {get; set;}
        
        [Newtonsoft.Json.JsonProperty("symbol_type")]
        public string SymbolType {get; set;}
        
        [Newtonsoft.Json.JsonProperty("symbols")]
        public Symbol[] Symbols {get; set;}
        
        [Newtonsoft.Json.JsonProperty("origin")]
        public string Origin {get; set;}
    }
    
    public partial class SymbolUploads {
    }
    
    public partial class SymbolUploadBeginRequest {
        
        [Newtonsoft.Json.JsonProperty("symbol_type")]
        public string SymbolType {get; set;}
        
        [Newtonsoft.Json.JsonProperty("client_callback")]
        public string ClientCallback {get; set;}
    }
    
    public partial class SymbolUploadBeginResponse {
        
        [Newtonsoft.Json.JsonProperty("symbol_upload_id")]
        public string SymbolUploadId {get; set;}
        
        [Newtonsoft.Json.JsonProperty("upload_url")]
        public string UploadUrl {get; set;}
        
        [Newtonsoft.Json.JsonProperty("expiration_date")]
        public string ExpirationDate {get; set;}
    }
    
    public partial class SymbolUploadEndRequest {
        
        [Newtonsoft.Json.JsonProperty("status")]
        public string Status {get; set;}
    }
    
    public partial class AppVersion {
        
        [Newtonsoft.Json.JsonProperty("app_version_id")]
        public string AppVersionId {get; set;}
        
        [Newtonsoft.Json.JsonProperty("app_id")]
        public string AppId {get; set;}
        
        [Newtonsoft.Json.JsonProperty("display_name")]
        public string DisplayName {get; set;}
        
        [Newtonsoft.Json.JsonProperty("app_version")]
        public string AppVersionValue {get; set;}
        
        [Newtonsoft.Json.JsonProperty("build_number")]
        public string BuildNumber {get; set;}
    }
    
    public partial class Stacktrace {
        
        [Newtonsoft.Json.JsonProperty("title")]
        public string Title {get; set;}
        
        [Newtonsoft.Json.JsonProperty("reason")]
        public string Reason {get; set;}
        
        [Newtonsoft.Json.JsonProperty("threads")]
        public Thread[] Threads {get; set;}
        
        [Newtonsoft.Json.JsonProperty("exception")]
        public Exception Exception {get; set;}
    }
    
    public partial class Thread {
        
        [Newtonsoft.Json.JsonProperty("title")]
        public string Title {get; set;}
        
        [Newtonsoft.Json.JsonProperty("frames")]
        public StackFrame[] Frames {get; set;}
        
        [Newtonsoft.Json.JsonProperty("exception")]
        public Exception Exception {get; set;}
        
        [Newtonsoft.Json.JsonProperty("relevant")]
        public bool Relevant {get; set;}
        
        [Newtonsoft.Json.JsonProperty("platform")]
        public string Platform {get; set;}
    }
    
    public partial class Exception {
        
        [Newtonsoft.Json.JsonProperty("reason")]
        public string Reason {get; set;}
        
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type {get; set;}
        
        [Newtonsoft.Json.JsonProperty("frames")]
        public StackFrame[] Frames {get; set;}
        
        [Newtonsoft.Json.JsonProperty("relevant")]
        public bool Relevant {get; set;}
        
        [Newtonsoft.Json.JsonProperty("inner_exceptions")]
        public Exception[] InnerExceptions {get; set;}
        
        [Newtonsoft.Json.JsonProperty("platform")]
        public string Platform {get; set;}
    }
    
    public partial class StackFrame {
        
        [Newtonsoft.Json.JsonProperty("address")]
        public string Address {get; set;}
        
        [Newtonsoft.Json.JsonProperty("class_name")]
        public string ClassName {get; set;}
        
        [Newtonsoft.Json.JsonProperty("method")]
        public string Method {get; set;}
        
        [Newtonsoft.Json.JsonProperty("class_method")]
        public bool ClassMethod {get; set;}
        
        [Newtonsoft.Json.JsonProperty("file")]
        public string File {get; set;}
        
        [Newtonsoft.Json.JsonProperty("line")]
        public int Line {get; set;}
        
        [Newtonsoft.Json.JsonProperty("app_code")]
        public bool AppCode {get; set;}
        
        [Newtonsoft.Json.JsonProperty("framework_name")]
        public string FrameworkName {get; set;}
        
        [Newtonsoft.Json.JsonProperty("code_raw")]
        public string CodeRaw {get; set;}
        
        [Newtonsoft.Json.JsonProperty("code_formatted")]
        public string CodeFormatted {get; set;}
        
        [Newtonsoft.Json.JsonProperty("language")]
        public string Language {get; set;}
        
        [Newtonsoft.Json.JsonProperty("relevant")]
        public bool Relevant {get; set;}
        
        [Newtonsoft.Json.JsonProperty("method_params")]
        public string MethodParams {get; set;}
    }
    
    public partial class ReasonStackFrame {
        
        [Newtonsoft.Json.JsonProperty("class_name")]
        public string ClassName {get; set;}
        
        [Newtonsoft.Json.JsonProperty("method")]
        public string Method {get; set;}
        
        [Newtonsoft.Json.JsonProperty("class_method")]
        public bool ClassMethod {get; set;}
        
        [Newtonsoft.Json.JsonProperty("file")]
        public string File {get; set;}
        
        [Newtonsoft.Json.JsonProperty("line")]
        public int Line {get; set;}
        
        [Newtonsoft.Json.JsonProperty("app_code")]
        public bool AppCode {get; set;}
        
        [Newtonsoft.Json.JsonProperty("framework_name")]
        public string FrameworkName {get; set;}
        
        [Newtonsoft.Json.JsonProperty("code_formatted")]
        public string CodeFormatted {get; set;}
        
        [Newtonsoft.Json.JsonProperty("language")]
        public string Language {get; set;}
        
        [Newtonsoft.Json.JsonProperty("method_params")]
        public string MethodParams {get; set;}
    }
    
    public partial class RawCrashLog {
    }
    
    public partial class CrashGroup {
        
        [Newtonsoft.Json.JsonProperty("crash_group_id")]
        public string CrashGroupId {get; set;}
        
        [Newtonsoft.Json.JsonProperty("display_id")]
        public string DisplayId {get; set;}
        
        [Newtonsoft.Json.JsonProperty("app_version")]
        public string AppVersion {get; set;}
        
        [Newtonsoft.Json.JsonProperty("build")]
        public string Build {get; set;}
        
        [Newtonsoft.Json.JsonProperty("status")]
        public string Status {get; set;}
        
        [Newtonsoft.Json.JsonProperty("count")]
        public int Count {get; set;}
        
        [Newtonsoft.Json.JsonProperty("impacted_users")]
        public int ImpactedUsers {get; set;}
        
        [Newtonsoft.Json.JsonProperty("first_occurrence")]
        public string FirstOccurrence {get; set;}
        
        [Newtonsoft.Json.JsonProperty("last_occurrence")]
        public string LastOccurrence {get; set;}
        
        [Newtonsoft.Json.JsonProperty("exception")]
        public string Exception {get; set;}
        
        [Newtonsoft.Json.JsonProperty("error_reason")]
        public string ErrorReason {get; set;}
        
        [Newtonsoft.Json.JsonProperty("reason_frame")]
        public ReasonStackFrame ReasonFrame {get; set;}
        
        [Newtonsoft.Json.JsonProperty("fatal")]
        public bool Fatal {get; set;}
    }
    
    public partial class CrashGroupChange {
        
        [Newtonsoft.Json.JsonProperty("status")]
        public string Status {get; set;}
    }
    
    public partial class CrashGroupCounts {
        
        [Newtonsoft.Json.JsonProperty("crash_group_count")]
        public double CrashGroupCount {get; set;}
    }
    
    public partial class Crash {
        
        [Newtonsoft.Json.JsonProperty("crash_id")]
        public string CrashId {get; set;}
        
        [Newtonsoft.Json.JsonProperty("display_id")]
        public string DisplayId {get; set;}
        
        [Newtonsoft.Json.JsonProperty("timestamp")]
        public string Timestamp {get; set;}
        
        [Newtonsoft.Json.JsonProperty("version")]
        public string Version {get; set;}
        
        [Newtonsoft.Json.JsonProperty("build")]
        public string Build {get; set;}
        
        [Newtonsoft.Json.JsonProperty("device")]
        public string Device {get; set;}
        
        [Newtonsoft.Json.JsonProperty("os_version")]
        public string OsVersion {get; set;}
        
        [Newtonsoft.Json.JsonProperty("user_name")]
        public string UserName {get; set;}
        
        [Newtonsoft.Json.JsonProperty("user_email")]
        public string UserEmail {get; set;}
    }
    
    public partial class MissingSymbol {
        
        [Newtonsoft.Json.JsonProperty("symbol_id")]
        public string SymbolId {get; set;}
        
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name {get; set;}
        
        [Newtonsoft.Json.JsonProperty("platform")]
        public string Platform {get; set;}
        
        [Newtonsoft.Json.JsonProperty("status")]
        public string Status {get; set;}
    }
    
    public partial class MissingSymbols {
    }
    
    public partial class MissingSymbolCrashGroup {
        
        [Newtonsoft.Json.JsonProperty("symbol_group_id")]
        public string SymbolGroupId {get; set;}
        
        [Newtonsoft.Json.JsonProperty("crash_count")]
        public int CrashCount {get; set;}
        
        [Newtonsoft.Json.JsonProperty("app_id")]
        public string AppId {get; set;}
        
        [Newtonsoft.Json.JsonProperty("app_ver")]
        public string AppVer {get; set;}
        
        [Newtonsoft.Json.JsonProperty("app_build")]
        public string AppBuild {get; set;}
        
        [Newtonsoft.Json.JsonProperty("last_modified")]
        public string LastModified {get; set;}
        
        [Newtonsoft.Json.JsonProperty("missing_symbols")]
        public MissingSymbol[] MissingSymbols {get; set;}
        
        [Newtonsoft.Json.JsonProperty("status")]
        public string Status {get; set;}
    }
    
    public partial class MissingSymbolCrashGroups {
    }
    
    public partial class MissingSymbolCrashGroupsResponse {
        
        [Newtonsoft.Json.JsonProperty("total_crash_count")]
        public int TotalCrashCount {get; set;}
        
        [Newtonsoft.Json.JsonProperty("groups")]
        public MissingSymbolCrashGroup[] Groups {get; set;}
    }
    
    public partial class FailureResponse {
        
        [Newtonsoft.Json.JsonProperty("code")]
        public string Code {get; set;}
        
        [Newtonsoft.Json.JsonProperty("message")]
        public string Message {get; set;}
    }
    
    public partial class CrashCounts {
        
        [Newtonsoft.Json.JsonProperty("count")]
        public int Count {get; set;}
        
        [Newtonsoft.Json.JsonProperty("crashes")]
        public DateTimeCounts[] Crashes {get; set;}
    }
    
    public partial class ActiveDeviceCounts {
        
        [Newtonsoft.Json.JsonProperty("daily")]
        public DateTimeCounts[] Daily {get; set;}
        
        [Newtonsoft.Json.JsonProperty("weekly")]
        public DateTimeCounts[] Weekly {get; set;}
        
        [Newtonsoft.Json.JsonProperty("monthly")]
        public DateTimeCounts[] Monthly {get; set;}
    }
    
    public partial class Places {
        
        [Newtonsoft.Json.JsonProperty("total")]
        public int Total {get; set;}
        
        [Newtonsoft.Json.JsonProperty("places")]
        public Place[] PlacesValue {get; set;}
    }
    
    public partial class Place {
        
        [Newtonsoft.Json.JsonProperty("code")]
        public string Code {get; set;}
        
        [Newtonsoft.Json.JsonProperty("count")]
        public int Count {get; set;}
        
        [Newtonsoft.Json.JsonProperty("previous_count")]
        public int PreviousCount {get; set;}
    }
    
    public partial class Error {
        
        [Newtonsoft.Json.JsonProperty("error")]
        public ErrorClass ErrorValue {get; set;}
        
        public partial class ErrorClass {
            
            [Newtonsoft.Json.JsonProperty("code")]
            public int Code {get; set;}
            
            [Newtonsoft.Json.JsonProperty("message")]
            public string Message {get; set;}
        }
    }
    
    public partial class SessionDurationsDistribution {
        
        [Newtonsoft.Json.JsonProperty("distribution")]
        public DistributionClass[] Distribution {get; set;}
        
        [Newtonsoft.Json.JsonProperty("previous_average_duration")]
        public string PreviousAverageDuration {get; set;}
        
        [Newtonsoft.Json.JsonProperty("average_duration")]
        public string AverageDuration {get; set;}
        
        public partial class DistributionClass {
            
            [Newtonsoft.Json.JsonProperty("bucket")]
            public string Bucket {get; set;}
            
            [Newtonsoft.Json.JsonProperty("count")]
            public int Count {get; set;}
        }
    }
    
    public partial class Versions {
        
        [Newtonsoft.Json.JsonProperty("versions")]
        public Version[] VersionsValue {get; set;}
        
        [Newtonsoft.Json.JsonProperty("total")]
        public int Total {get; set;}
    }
    
    public partial class Version {
        
        [Newtonsoft.Json.JsonProperty("version")]
        public string VersionValue {get; set;}
        
        [Newtonsoft.Json.JsonProperty("count")]
        public int Count {get; set;}
        
        [Newtonsoft.Json.JsonProperty("previous_count")]
        public int PreviousCount {get; set;}
    }
    
    public partial class SessionCounts {
        
        [Newtonsoft.Json.JsonProperty("total_count")]
        public int TotalCount {get; set;}
        
        [Newtonsoft.Json.JsonProperty("previous_total_count")]
        public int PreviousTotalCount {get; set;}
        
        [Newtonsoft.Json.JsonProperty("sessions")]
        public DateTimeCounts[] Sessions {get; set;}
    }
    
    public partial class SessionsPerDevice {
        
        [Newtonsoft.Json.JsonProperty("average_sessions_per_user")]
        public double AverageSessionsPerUser {get; set;}
        
        [Newtonsoft.Json.JsonProperty("previous_average_sessions_per_user")]
        public double PreviousAverageSessionsPerUser {get; set;}
        
        [Newtonsoft.Json.JsonProperty("total_count")]
        public int TotalCount {get; set;}
        
        [Newtonsoft.Json.JsonProperty("previous_total_count")]
        public int PreviousTotalCount {get; set;}
        
        [Newtonsoft.Json.JsonProperty("sessions_per_user")]
        public SessionsPerUserClass[] SessionsPerUser {get; set;}
        
        public partial class SessionsPerUserClass {
            
            [Newtonsoft.Json.JsonProperty("datetime")]
            public string Datetime {get; set;}
            
            [Newtonsoft.Json.JsonProperty("count")]
            public double Count {get; set;}
        }
    }
    
    public partial class AnalyticsModels {
        
        [Newtonsoft.Json.JsonProperty("total")]
        public int Total {get; set;}
        
        [Newtonsoft.Json.JsonProperty("models")]
        public Model[] Models {get; set;}
    }
    
    public partial class Model {
        
        [Newtonsoft.Json.JsonProperty("model_name")]
        public string ModelName {get; set;}
        
        [Newtonsoft.Json.JsonProperty("count")]
        public int Count {get; set;}
        
        [Newtonsoft.Json.JsonProperty("previous_count")]
        public int PreviousCount {get; set;}
    }
    
    public partial class Languages {
        
        [Newtonsoft.Json.JsonProperty("total")]
        public int Total {get; set;}
        
        [Newtonsoft.Json.JsonProperty("languages")]
        public Language[] LanguagesValue {get; set;}
    }
    
    public partial class Language {
        
        [Newtonsoft.Json.JsonProperty("language_name")]
        public string LanguageName {get; set;}
        
        [Newtonsoft.Json.JsonProperty("count")]
        public int Count {get; set;}
        
        [Newtonsoft.Json.JsonProperty("previous_count")]
        public int PreviousCount {get; set;}
    }
    
    public partial class OSes {
        
        [Newtonsoft.Json.JsonProperty("total")]
        public int Total {get; set;}
        
        [Newtonsoft.Json.JsonProperty("oses")]
        public OS[] Oses {get; set;}
    }
    
    public partial class OS {
        
        [Newtonsoft.Json.JsonProperty("os_name")]
        public string OsName {get; set;}
        
        [Newtonsoft.Json.JsonProperty("count")]
        public int Count {get; set;}
        
        [Newtonsoft.Json.JsonProperty("previous_count")]
        public int PreviousCount {get; set;}
    }
    
    public partial class DateTimeCounts {
        
        [Newtonsoft.Json.JsonProperty("datetime")]
        public string Datetime {get; set;}
        
        [Newtonsoft.Json.JsonProperty("count")]
        public int Count {get; set;}
    }
    
    public partial class DateTimeDecimalCounts {
        
        [Newtonsoft.Json.JsonProperty("datetime")]
        public string Datetime {get; set;}
        
        [Newtonsoft.Json.JsonProperty("count")]
        public double Count {get; set;}
    }
    
    public partial class AvailableVersions {
        
        [Newtonsoft.Json.JsonProperty("versions")]
        public string[] Versions {get; set;}
        
        [Newtonsoft.Json.JsonProperty("total_count")]
        public int TotalCount {get; set;}
    }
    
    public partial class CrashFreeDevicePercentages {
        
        [Newtonsoft.Json.JsonProperty("average_percentage")]
        public int AveragePercentage {get; set;}
        
        [Newtonsoft.Json.JsonProperty("daily_percentages")]
        public DateTimePercentages[] DailyPercentages {get; set;}
    }
    
    public partial class DateTimePercentages {
        
        [Newtonsoft.Json.JsonProperty("datetime")]
        public string Datetime {get; set;}
        
        [Newtonsoft.Json.JsonProperty("percentage")]
        public double Percentage {get; set;}
    }
    
    public partial class CrashesOverall {
        
        [Newtonsoft.Json.JsonProperty("crash_group_id")]
        public string CrashGroupId {get; set;}
        
        [Newtonsoft.Json.JsonProperty("app_version")]
        public string AppVersion {get; set;}
        
        [Newtonsoft.Json.JsonProperty("overall")]
        public CrashOverall Overall {get; set;}
    }
    
    public partial class CrashOverall {
        
        [Newtonsoft.Json.JsonProperty("crash_count")]
        public int CrashCount {get; set;}
        
        [Newtonsoft.Json.JsonProperty("device_count")]
        public int DeviceCount {get; set;}
    }
    
    public partial class CrashGroupModels {
        
        [Newtonsoft.Json.JsonProperty("crash_count")]
        public int CrashCount {get; set;}
        
        [Newtonsoft.Json.JsonProperty("models")]
        public CrashGroupModel[] Models {get; set;}
    }
    
    public partial class CrashGroupModel {
        
        [Newtonsoft.Json.JsonProperty("model_name")]
        public string ModelName {get; set;}
        
        [Newtonsoft.Json.JsonProperty("crash_count")]
        public int CrashCount {get; set;}
    }
    
    public partial class CrashGroupOperatingSystems {
        
        [Newtonsoft.Json.JsonProperty("crash_count")]
        public int CrashCount {get; set;}
        
        [Newtonsoft.Json.JsonProperty("operating_systems")]
        public CrashGroupOperatingSystem[] OperatingSystems {get; set;}
    }
    
    public partial class CrashGroupOperatingSystem {
        
        [Newtonsoft.Json.JsonProperty("operating_system_name")]
        public string OperatingSystemName {get; set;}
        
        [Newtonsoft.Json.JsonProperty("crash_count")]
        public int CrashCount {get; set;}
    }
    
    public partial class CrashGroupContainer {
        
        [Newtonsoft.Json.JsonProperty("crash_groups")]
        public CrashGroupAndVersion[] CrashGroups {get; set;}
    }
    
    public partial class CrashGroupAndVersion {
        
        [Newtonsoft.Json.JsonProperty("crash_group_id")]
        public string CrashGroupId {get; set;}
        
        [Newtonsoft.Json.JsonProperty("app_version")]
        public string AppVersion {get; set;}
    }
    
    public partial class Events {
        
        [Newtonsoft.Json.JsonProperty("events")]
        public Event[] EventsValue {get; set;}
        
        [Newtonsoft.Json.JsonProperty("total")]
        public int Total {get; set;}
        
        [Newtonsoft.Json.JsonProperty("total_devices")]
        public int TotalDevices {get; set;}
    }
    
    public partial class Event {
        
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id {get; set;}
        
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name {get; set;}
        
        [Newtonsoft.Json.JsonProperty("deviceCount")]
        public int DeviceCount {get; set;}
        
        [Newtonsoft.Json.JsonProperty("previous_device_count")]
        public int PreviousDeviceCount {get; set;}
        
        [Newtonsoft.Json.JsonProperty("count")]
        public int Count {get; set;}
        
        [Newtonsoft.Json.JsonProperty("previous_count")]
        public int PreviousCount {get; set;}
        
        [Newtonsoft.Json.JsonProperty("count_per_device")]
        public int CountPerDevice {get; set;}
        
        [Newtonsoft.Json.JsonProperty("count_per_session")]
        public int CountPerSession {get; set;}
    }
    
    public partial class EventCount {
        
        [Newtonsoft.Json.JsonProperty("total_count")]
        public int TotalCount {get; set;}
        
        [Newtonsoft.Json.JsonProperty("previous_total_count")]
        public int PreviousTotalCount {get; set;}
        
        [Newtonsoft.Json.JsonProperty("count")]
        public DateTimeCounts[] Count {get; set;}
    }
    
    public partial class EventDeviceCount {
        
        [Newtonsoft.Json.JsonProperty("total_devices")]
        public int TotalDevices {get; set;}
        
        [Newtonsoft.Json.JsonProperty("total_devices_with_event")]
        public int TotalDevicesWithEvent {get; set;}
        
        [Newtonsoft.Json.JsonProperty("previous_total_devices_with_event")]
        public int PreviousTotalDevicesWithEvent {get; set;}
        
        [Newtonsoft.Json.JsonProperty("devices_count")]
        public DateTimeCounts[] DevicesCount {get; set;}
    }
    
    public partial class EventCountPerDevice {
        
        [Newtonsoft.Json.JsonProperty("avg_count_per_device")]
        public double AvgCountPerDevice {get; set;}
        
        [Newtonsoft.Json.JsonProperty("previous_avg_count_per_device")]
        public double PreviousAvgCountPerDevice {get; set;}
        
        [Newtonsoft.Json.JsonProperty("count_per_device")]
        public DateTimeDecimalCounts[] CountPerDevice {get; set;}
    }
    
    public partial class EventCountPerSession {
        
        [Newtonsoft.Json.JsonProperty("avg_count_per_session")]
        public double AvgCountPerSession {get; set;}
        
        [Newtonsoft.Json.JsonProperty("previous_avg_count_per_session")]
        public double PreviousAvgCountPerSession {get; set;}
        
        [Newtonsoft.Json.JsonProperty("count_per_session")]
        public DateTimeDecimalCounts[] CountPerSession {get; set;}
    }
    
    public partial class LogContainer {
        
        [Newtonsoft.Json.JsonProperty("exceeded_max_limit")]
        public bool ExceededMaxLimit {get; set;}
        
        [Newtonsoft.Json.JsonProperty("last_received_log_timestamp")]
        public string LastReceivedLogTimestamp {get; set;}
        
        [Newtonsoft.Json.JsonProperty("logs")]
        public Log[] Logs {get; set;}
    }
    
    public partial class Log {
        
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type {get; set;}
        
        [Newtonsoft.Json.JsonProperty("timestamp")]
        public string Timestamp {get; set;}
        
        [Newtonsoft.Json.JsonProperty("install_id")]
        public string InstallId {get; set;}
        
        [Newtonsoft.Json.JsonProperty("device")]
        public Device Device {get; set;}
    }
    
    public partial class Device {
        
        [Newtonsoft.Json.JsonProperty("sdk_name")]
        public string SdkName {get; set;}
        
        [Newtonsoft.Json.JsonProperty("sdk_version")]
        public string SdkVersion {get; set;}
        
        [Newtonsoft.Json.JsonProperty("wrapper_sdk_version")]
        public string WrapperSdkVersion {get; set;}
        
        [Newtonsoft.Json.JsonProperty("wrapper_sdk_name")]
        public string WrapperSdkName {get; set;}
        
        [Newtonsoft.Json.JsonProperty("model")]
        public string Model {get; set;}
        
        [Newtonsoft.Json.JsonProperty("oem_name")]
        public string OemName {get; set;}
        
        [Newtonsoft.Json.JsonProperty("os_name")]
        public string OsName {get; set;}
        
        [Newtonsoft.Json.JsonProperty("os_version")]
        public string OsVersion {get; set;}
        
        [Newtonsoft.Json.JsonProperty("os_build")]
        public string OsBuild {get; set;}
        
        [Newtonsoft.Json.JsonProperty("os_api_level")]
        public int OsApiLevel {get; set;}
        
        [Newtonsoft.Json.JsonProperty("locale")]
        public string Locale {get; set;}
        
        [Newtonsoft.Json.JsonProperty("time_zone_offset")]
        public int TimeZoneOffset {get; set;}
        
        [Newtonsoft.Json.JsonProperty("screen_size")]
        public string ScreenSize {get; set;}
        
        [Newtonsoft.Json.JsonProperty("app_version")]
        public string AppVersion {get; set;}
        
        [Newtonsoft.Json.JsonProperty("carrier_name")]
        public string CarrierName {get; set;}
        
        [Newtonsoft.Json.JsonProperty("carrier_code")]
        public string CarrierCode {get; set;}
        
        [Newtonsoft.Json.JsonProperty("carrier_country")]
        public string CarrierCountry {get; set;}
        
        [Newtonsoft.Json.JsonProperty("app_build")]
        public string AppBuild {get; set;}
        
        [Newtonsoft.Json.JsonProperty("app_namespace")]
        public string AppNamespace {get; set;}
    }
    
    public partial class EventProperties {
        
        [Newtonsoft.Json.JsonProperty("event_properties")]
        public string[] EventPropertiesValue {get; set;}
    }
    
    public partial class EventPropertyValues {
        
        [Newtonsoft.Json.JsonProperty("total")]
        public int Total {get; set;}
        
        [Newtonsoft.Json.JsonProperty("values")]
        public EventPropertyValue[] Values {get; set;}
    }
    
    public partial class EventPropertyValue {
        
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name {get; set;}
        
        [Newtonsoft.Json.JsonProperty("count")]
        public int Count {get; set;}
        
        [Newtonsoft.Json.JsonProperty("previous_count")]
        public int PreviousCount {get; set;}
    }
    
    public partial class DeviceConfiguration {
        
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name {get; set;}
        
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id {get; set;}
        
        [Newtonsoft.Json.JsonProperty("tier")]
        public double Tier {get; set;}
        
        [Newtonsoft.Json.JsonProperty("model")]
        public DeviceModel Model {get; set;}
        
        [Newtonsoft.Json.JsonProperty("os")]
        public string Os {get; set;}
        
        [Newtonsoft.Json.JsonProperty("osName")]
        public string OsName {get; set;}
        
        [Newtonsoft.Json.JsonProperty("marketShare")]
        public double MarketShare {get; set;}
    }
    
    public partial class DeviceModel {
        
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name {get; set;}
        
        [Newtonsoft.Json.JsonProperty("manufacturer")]
        public string Manufacturer {get; set;}
        
        [Newtonsoft.Json.JsonProperty("model")]
        public string Model {get; set;}
        
        [Newtonsoft.Json.JsonProperty("platform")]
        public string Platform {get; set;}
        
        [Newtonsoft.Json.JsonProperty("dimensions")]
        public DeviceDimensions Dimensions {get; set;}
        
        [Newtonsoft.Json.JsonProperty("resolution")]
        public DeviceResolution Resolution {get; set;}
        
        [Newtonsoft.Json.JsonProperty("releaseDate")]
        public string ReleaseDate {get; set;}
        
        [Newtonsoft.Json.JsonProperty("formFactor")]
        public string FormFactor {get; set;}
        
        [Newtonsoft.Json.JsonProperty("screenSize")]
        public DeviceScreenSize ScreenSize {get; set;}
        
        [Newtonsoft.Json.JsonProperty("cpu")]
        public DeviceCpu Cpu {get; set;}
        
        [Newtonsoft.Json.JsonProperty("memory")]
        public DeviceMemory Memory {get; set;}
        
        [Newtonsoft.Json.JsonProperty("screenRotation")]
        public double ScreenRotation {get; set;}
        
        [Newtonsoft.Json.JsonProperty("deviceFrame")]
        public DeviceFrame DeviceFrame {get; set;}
        
        [Newtonsoft.Json.JsonProperty("availabilityCount")]
        public double AvailabilityCount {get; set;}
    }
    
    public partial class DeviceScreenSize {
        
        [Newtonsoft.Json.JsonProperty("cm")]
        public string Cm {get; set;}
        
        [Newtonsoft.Json.JsonProperty("in")]
        public string In {get; set;}
    }
    
    public partial class DeviceResolution {
        
        [Newtonsoft.Json.JsonProperty("height")]
        public string Height {get; set;}
        
        [Newtonsoft.Json.JsonProperty("width")]
        public string Width {get; set;}
        
        [Newtonsoft.Json.JsonProperty("ppi")]
        public string Ppi {get; set;}
    }
    
    public partial class DeviceDimensions {
    }
    
    public partial class DeviceCpu {
        
        [Newtonsoft.Json.JsonProperty("frequency")]
        public string Frequency {get; set;}
        
        [Newtonsoft.Json.JsonProperty("core")]
        public string Core {get; set;}
    }
    
    public partial class DeviceMemory {
        
        [Newtonsoft.Json.JsonProperty("formattedSize")]
        public string FormattedSize {get; set;}
    }
    
    public partial class DeviceFrame {
        
        [Newtonsoft.Json.JsonProperty("grid")]
        public DeviceFrameDefinition Grid {get; set;}
        
        [Newtonsoft.Json.JsonProperty("full")]
        public DeviceFrameDefinition Full {get; set;}
    }
    
    public partial class DeviceFrameDefinition {
        
        [Newtonsoft.Json.JsonProperty("width")]
        public double Width {get; set;}
        
        [Newtonsoft.Json.JsonProperty("height")]
        public double Height {get; set;}
        
        [Newtonsoft.Json.JsonProperty("frameUrl")]
        public string FrameUrl {get; set;}
        
        [Newtonsoft.Json.JsonProperty("screen")]
        public double[] Screen {get; set;}
    }
    
    public partial class TestRun {
        
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id {get; set;}
        
        [Newtonsoft.Json.JsonProperty("date")]
        public string Date {get; set;}
        
        [Newtonsoft.Json.JsonProperty("appVersion")]
        public string AppVersion {get; set;}
        
        [Newtonsoft.Json.JsonProperty("testSeries")]
        public string TestSeries {get; set;}
        
        [Newtonsoft.Json.JsonProperty("platform")]
        public string Platform {get; set;}
        
        [Newtonsoft.Json.JsonProperty("runStatus")]
        public string RunStatus {get; set;}
        
        [Newtonsoft.Json.JsonProperty("resultStatus")]
        public string ResultStatus {get; set;}
        
        [Newtonsoft.Json.JsonProperty("state")]
        public string State {get; set;}
        
        [Newtonsoft.Json.JsonProperty("status")]
        public string Status {get; set;}
        
        [Newtonsoft.Json.JsonProperty("description")]
        public string Description {get; set;}
        
        [Newtonsoft.Json.JsonProperty("stats")]
        public TestRunStatistics Stats {get; set;}
        
        [Newtonsoft.Json.JsonProperty("testType")]
        public string TestType {get; set;}
        
        [Newtonsoft.Json.JsonProperty("uploadedBy")]
        public string UploadedBy {get; set;}
    }
    
    public partial class TestRunStatistics {
        
        [Newtonsoft.Json.JsonProperty("devices")]
        public double Devices {get; set;}
        
        [Newtonsoft.Json.JsonProperty("devicesFinished")]
        public double DevicesFinished {get; set;}
        
        [Newtonsoft.Json.JsonProperty("devicesFailed")]
        public double DevicesFailed {get; set;}
        
        [Newtonsoft.Json.JsonProperty("total")]
        public double Total {get; set;}
        
        [Newtonsoft.Json.JsonProperty("passed")]
        public double Passed {get; set;}
        
        [Newtonsoft.Json.JsonProperty("failed")]
        public double Failed {get; set;}
        
        [Newtonsoft.Json.JsonProperty("skipped")]
        public double Skipped {get; set;}
        
        [Newtonsoft.Json.JsonProperty("peakMemory")]
        public double PeakMemory {get; set;}
        
        [Newtonsoft.Json.JsonProperty("totalDeviceMinutes")]
        public double TotalDeviceMinutes {get; set;}
    }
    
    public partial class TestSeries {
        
        [Newtonsoft.Json.JsonProperty("slug")]
        public string Slug {get; set;}
        
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name {get; set;}
        
        [Newtonsoft.Json.JsonProperty("mostRecentActivity")]
        public string MostRecentActivity {get; set;}
        
        [Newtonsoft.Json.JsonProperty("testRuns")]
        public TestRunSummary[] TestRuns {get; set;}
    }
    
    public partial class TestRunSummary {
        
        [Newtonsoft.Json.JsonProperty("date")]
        public string Date {get; set;}
        
        [Newtonsoft.Json.JsonProperty("statusDescription")]
        public string StatusDescription {get; set;}
        
        [Newtonsoft.Json.JsonProperty("failed")]
        public double Failed {get; set;}
        
        [Newtonsoft.Json.JsonProperty("passed")]
        public double Passed {get; set;}
        
        [Newtonsoft.Json.JsonProperty("completed")]
        public bool Completed {get; set;}
    }
    
    public partial class DeviceSelection {
        
        [Newtonsoft.Json.JsonProperty("shortId")]
        public string ShortId {get; set;}
    }
    
    public partial class Subscription {
        
        [Newtonsoft.Json.JsonProperty("startsAt")]
        public string StartsAt {get; set;}
        
        [Newtonsoft.Json.JsonProperty("endsAt")]
        public string EndsAt {get; set;}
        
        [Newtonsoft.Json.JsonProperty("daysLeft")]
        public double DaysLeft {get; set;}
        
        [Newtonsoft.Json.JsonProperty("tier")]
        public Tier Tier {get; set;}
        
        [Newtonsoft.Json.JsonProperty("active")]
        public bool Active {get; set;}
        
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id {get; set;}
    }
    
    public partial class Tier {
        
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name {get; set;}
    }
    
    public partial class TestReport {
        
        [Newtonsoft.Json.JsonProperty("app_upload_id")]
        public string AppUploadId {get; set;}
        
        [Newtonsoft.Json.JsonProperty("date")]
        public string Date {get; set;}
        
        [Newtonsoft.Json.JsonProperty("testType")]
        public string TestType {get; set;}
        
        [Newtonsoft.Json.JsonProperty("platform")]
        public string Platform {get; set;}
        
        [Newtonsoft.Json.JsonProperty("stats")]
        public StatsClass Stats {get; set;}
        
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id {get; set;}
        
        [Newtonsoft.Json.JsonProperty("schema_version")]
        public double SchemaVersion {get; set;}
        
        [Newtonsoft.Json.JsonProperty("revision")]
        public double Revision {get; set;}
        
        [Newtonsoft.Json.JsonProperty("features")]
        public FeaturesClass[] Features {get; set;}
        
        [Newtonsoft.Json.JsonProperty("finished_device_snapshots")]
        public string[] FinishedDeviceSnapshots {get; set;}
        
        [Newtonsoft.Json.JsonProperty("device_logs")]
        public DeviceLogsClass[] DeviceLogs {get; set;}
        
        [Newtonsoft.Json.JsonProperty("date_finished")]
        public string DateFinished {get; set;}
        
        public partial class StatsClass {
            
            [Newtonsoft.Json.JsonProperty("os")]
            public double Os {get; set;}
            
            [Newtonsoft.Json.JsonProperty("devices")]
            public double Devices {get; set;}
            
            [Newtonsoft.Json.JsonProperty("filesize")]
            public double Filesize {get; set;}
            
            [Newtonsoft.Json.JsonProperty("totalDeviceMinutes")]
            public double TotalDeviceMinutes {get; set;}
            
            [Newtonsoft.Json.JsonProperty("devices_not_runned")]
            public double DevicesNotRunned {get; set;}
            
            [Newtonsoft.Json.JsonProperty("failed")]
            public double Failed {get; set;}
            
            [Newtonsoft.Json.JsonProperty("skipped")]
            public double Skipped {get; set;}
            
            [Newtonsoft.Json.JsonProperty("passed")]
            public double Passed {get; set;}
            
            [Newtonsoft.Json.JsonProperty("total")]
            public double Total {get; set;}
            
            [Newtonsoft.Json.JsonProperty("devices_finished")]
            public double DevicesFinished {get; set;}
            
            [Newtonsoft.Json.JsonProperty("devices_failed")]
            public double DevicesFailed {get; set;}
            
            [Newtonsoft.Json.JsonProperty("devices_skipped")]
            public double DevicesSkipped {get; set;}
            
            [Newtonsoft.Json.JsonProperty("step_count")]
            public double StepCount {get; set;}
        }
        
        public partial class FeaturesClass {
            
            [Newtonsoft.Json.JsonProperty("name")]
            public string Name {get; set;}
            
            [Newtonsoft.Json.JsonProperty("tests")]
            public TestsClass[] Tests {get; set;}
            
            [Newtonsoft.Json.JsonProperty("failed")]
            public double Failed {get; set;}
            
            [Newtonsoft.Json.JsonProperty("skipped")]
            public double Skipped {get; set;}
            
            [Newtonsoft.Json.JsonProperty("peakMemory")]
            public double PeakMemory {get; set;}
            
            [Newtonsoft.Json.JsonProperty("peakDuration")]
            public double PeakDuration {get; set;}
            
            public partial class TestsClass {
                
                [Newtonsoft.Json.JsonProperty("testName")]
                public string TestName {get; set;}
                
                [Newtonsoft.Json.JsonProperty("runs")]
                public RunsClass[] Runs {get; set;}
                
                [Newtonsoft.Json.JsonProperty("peakMemory")]
                public double PeakMemory {get; set;}
                
                [Newtonsoft.Json.JsonProperty("peakDuration")]
                public double PeakDuration {get; set;}
                
                public partial class RunsClass {
                    
                    [Newtonsoft.Json.JsonProperty("number")]
                    public double Number {get; set;}
                    
                    [Newtonsoft.Json.JsonProperty("steps")]
                    public StepsClass[] Steps {get; set;}
                    
                    [Newtonsoft.Json.JsonProperty("failed")]
                    public double Failed {get; set;}
                    
                    [Newtonsoft.Json.JsonProperty("skipped")]
                    public double Skipped {get; set;}
                    
                    public partial class StepsClass {
                        
                        [Newtonsoft.Json.JsonProperty("stepName")]
                        public string StepName {get; set;}
                        
                        [Newtonsoft.Json.JsonProperty("id")]
                        public string Id {get; set;}
                        
                        [Newtonsoft.Json.JsonProperty("stepExecutions")]
                        public StepExecutionsClass[] StepExecutions {get; set;}
                        
                        [Newtonsoft.Json.JsonProperty("failed")]
                        public double Failed {get; set;}
                        
                        [Newtonsoft.Json.JsonProperty("skipped")]
                        public double Skipped {get; set;}
                        
                        [Newtonsoft.Json.JsonProperty("step_report_url")]
                        public string StepReportUrl {get; set;}
                        
                        public partial class StepExecutionsClass {
                            
                            [Newtonsoft.Json.JsonProperty("device_snapshot_id")]
                            public string DeviceSnapshotId {get; set;}
                            
                            [Newtonsoft.Json.JsonProperty("status")]
                            public string Status {get; set;}
                            
                            [Newtonsoft.Json.JsonProperty("timestamp")]
                            public double Timestamp {get; set;}
                        }
                    }
                }
            }
        }
        
        public partial class DeviceLogsClass {
            
            [Newtonsoft.Json.JsonProperty("device_snapshot_id")]
            public string DeviceSnapshotId {get; set;}
            
            [Newtonsoft.Json.JsonProperty("device_log")]
            public string DeviceLog {get; set;}
            
            [Newtonsoft.Json.JsonProperty("test_log")]
            public string TestLog {get; set;}
            
            [Newtonsoft.Json.JsonProperty("appium_log")]
            public string AppiumLog {get; set;}
        }
    }
    
    public partial class TestCloudErrorDetails {
        
        [Newtonsoft.Json.JsonProperty("status")]
        public string Status {get; set;}
        
        [Newtonsoft.Json.JsonProperty("message")]
        public string Message {get; set;}
    }
    
    public partial class TestCloudFileHashDeprecated {
        
        [Newtonsoft.Json.JsonProperty("file_type")]
        public string FileType {get; set;}
        
        [Newtonsoft.Json.JsonProperty("checksum")]
        public string Checksum {get; set;}
        
        [Newtonsoft.Json.JsonProperty("relative_path")]
        public string RelativePath {get; set;}
        
        [Newtonsoft.Json.JsonProperty("byte_range")]
        public string ByteRange {get; set;}
    }
    
    public partial class TestCloudFileHash {
        
        [Newtonsoft.Json.JsonProperty("fileType")]
        public string FileType {get; set;}
        
        [Newtonsoft.Json.JsonProperty("checksum")]
        public string Checksum {get; set;}
        
        [Newtonsoft.Json.JsonProperty("relativePath")]
        public string RelativePath {get; set;}
    }
    
    public partial class TestCloudFileHashResponse {
        
        [Newtonsoft.Json.JsonProperty("fileType")]
        public string FileType {get; set;}
        
        [Newtonsoft.Json.JsonProperty("checksum")]
        public string Checksum {get; set;}
        
        [Newtonsoft.Json.JsonProperty("relativePath")]
        public string RelativePath {get; set;}
        
        [Newtonsoft.Json.JsonProperty("uploadStatus")]
        public TestCloudHashUploadStatus UploadStatus {get; set;}
    }
    
    public partial class TestCloudHashUploadStatus {
        
        [Newtonsoft.Json.JsonProperty("statusCode")]
        public double StatusCode {get; set;}
        
        [Newtonsoft.Json.JsonProperty("location")]
        public string Location {get; set;}
    }
    
    public partial class TestCloudStartTestRunOptions {
        
        [Newtonsoft.Json.JsonProperty("test_framework")]
        public string TestFramework {get; set;}
        
        [Newtonsoft.Json.JsonProperty("device_selection")]
        public string DeviceSelection {get; set;}
        
        [Newtonsoft.Json.JsonProperty("locale")]
        public string Locale {get; set;}
        
        [Newtonsoft.Json.JsonProperty("test_series")]
        public string TestSeries {get; set;}
        
        [Newtonsoft.Json.JsonProperty("test_parameters")]
        public TestParametersClass TestParameters {get; set;}
        
        public partial class TestParametersClass {
        }
    }
    
    public partial class TestCloudStartTestRunResult {
        
        [Newtonsoft.Json.JsonProperty("accepted_devices")]
        public string[] AcceptedDevices {get; set;}
        
        [Newtonsoft.Json.JsonProperty("rejected_devices")]
        public string[] RejectedDevices {get; set;}
    }
    
    public partial class TestRunState {
        
        [Newtonsoft.Json.JsonProperty("message")]
        public string[] Message {get; set;}
        
        [Newtonsoft.Json.JsonProperty("wait_time")]
        public int WaitTime {get; set;}
        
        [Newtonsoft.Json.JsonProperty("exit_code")]
        public int ExitCode {get; set;}
    }
    
    public partial class Permission {
        
        [Newtonsoft.Json.JsonProperty("Name")]
        public string Name {get; set;}
        
        [Newtonsoft.Json.JsonProperty("Level")]
        public string Level {get; set;}
    }
    
    public partial class Table {
        
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name {get; set;}
        
        [Newtonsoft.Json.JsonProperty("permissions")]
        public Permission[] Permissions {get; set;}
        
        [Newtonsoft.Json.JsonProperty("extendedSettings")]
        public ExtendedSettingsClass ExtendedSettings {get; set;}
        
        [Newtonsoft.Json.JsonProperty("columns")]
        public TableColumn[] Columns {get; set;}
        
        public partial class ExtendedSettingsClass {
        }
    }
    
    public partial class TableColumn {
        
        [Newtonsoft.Json.JsonProperty("Name")]
        public string Name {get; set;}
        
        [Newtonsoft.Json.JsonProperty("IsIndexed")]
        public bool IsIndexed {get; set;}
        
        [Newtonsoft.Json.JsonProperty("Type")]
        public string Type {get; set;}
        
        [Newtonsoft.Json.JsonProperty("CanDelete")]
        public bool CanDelete {get; set;}
        
        [Newtonsoft.Json.JsonProperty("CanUpdateIndex")]
        public bool CanUpdateIndex {get; set;}
    }
    
    public partial class ImportDataContainer {
        
        [Newtonsoft.Json.JsonProperty("csvData")]
        public string CsvData {get; set;}
    }
    
    public partial class PushConfig {
        
        [Newtonsoft.Json.JsonProperty("apnsCredential")]
        public ApnsCredentialClass ApnsCredential {get; set;}
        
        [Newtonsoft.Json.JsonProperty("gcmCredential")]
        public GcmCredentialClass GcmCredential {get; set;}
        
        public partial class ApnsCredentialClass {
            
            [Newtonsoft.Json.JsonProperty("endpoint")]
            public string Endpoint {get; set;}
            
            [Newtonsoft.Json.JsonProperty("apnsCertificate")]
            public string ApnsCertificate {get; set;}
        }
        
        public partial class GcmCredentialClass {
            
            [Newtonsoft.Json.JsonProperty("googleApiKey")]
            public string GoogleApiKey {get; set;}
        }
    }
    
    public partial class MobileCenterAPIServiceApiKeyApi : SimpleAuth.ApiKeyApi {
        
        public MobileCenterAPIServiceApiKeyApi(string apiKey, System.Net.Http.HttpMessageHandler handler = null) : 
                base(apiKey, "X-API-Token", AuthLocation.Header, handler) {
            BaseAddress = new System.Uri("/");;
        }
        
        [Path("/v0.1/user/invitations/distribution_groups/accept")]
        public virtual Task PostAcceptGroupsInvitation() {
            return Post( body: null, authenticated: true );
        }
        
        [Path("/v0.1/user/invitations/apps/{invitation_token}/reject")]
        public virtual Task PostRejectInvitation(string invitation_token) {
            var queryParameters = new Dictionary<string,string>{ { "invitation_token" , invitation_token } };
            return Post( body: null, queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/user/invitations/apps/{invitation_token}/accept")]
        public virtual Task PostAcceptInvitation(string invitation_token) {
            var queryParameters = new Dictionary<string,string>{ { "invitation_token" , invitation_token } };
            return Post( body: null, queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/user")]
        public virtual Task<UserProfileResponse> GetUserProfile() {
            return Get<UserProfileResponse>( authenticated: true );
        }
        
        [Path("/v0.1/user")]
        public virtual Task<UserProfileResponse> PatchUpdateUserProfile(UserUpdateRequest user) {
            return Patch<UserProfileResponse>( user, authenticated: true );
        }
        
        [Path("/v0.1/management/crashes/apps/{owner_name}/{app_name}/crashes/{crash_id}/raw")]
        public virtual Task<RawCrashLog> GetCrashRaw(string crash_id, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "crash_id" , crash_id },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<RawCrashLog>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/xcode_versions")]
        public virtual Task<XcodeVersion[]> BuildGetXcodeVersions(string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<XcodeVersion[]>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/versions")]
        public virtual Task<AppVersion[]> GetAppVersions(string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<AppVersion[]>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/users/{user_email}")]
        public virtual Task DeleteAppUser(string owner_name, string app_name, string user_email) {
            var queryParameters = new Dictionary<string,string>{ { "owner_name" , owner_name },{ "app_name" , app_name },{ "user_email" , user_email } };
            return Delete( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/users")]
        public virtual Task<UserProfileResponse[]> GetAppUsers(string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<UserProfileResponse[]>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/testers")]
        public virtual Task<UserProfileResponse[]> GetAppTesters(string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<UserProfileResponse[]>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}/test_runs")]
        public virtual Task<TestRun[]> TestGetAllTestRunsForSeries(string test_series_slug, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "test_series_slug" , test_series_slug },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<TestRun[]>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}")]
        public virtual Task TestDeleteTestSeries(string test_series_slug, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "test_series_slug" , test_series_slug },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Delete( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}")]
        public virtual Task<TestSeries> TestPatchTestSeries(string test_series_slug, string name, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "test_series_slug" , test_series_slug },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            var formsParameters = new Dictionary<string,string>{ { "name" , name } };
            var formsContent = new FormUrlEncodedContent(formsParameters);;
            return Patch<TestSeries>( formsContent, queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/test_series")]
        public virtual Task<TestSeries[]> TestGetAllTestSeries(string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<TestSeries[]>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/test_series")]
        public virtual Task<TestSeries> PostTestCreateTestSeries(string name, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "owner_name" , owner_name },{ "app_name" , app_name } };
            var formsParameters = new Dictionary<string,string>{ { "name" , name } };
            var formsContent = new FormUrlEncodedContent(formsParameters);;
            return Post<TestSeries>( formsContent, queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/state")]
        public virtual Task<TestRunState> TestGetTestRunState(string test_run_id, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "test_run_id" , test_run_id },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<TestRunState>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/start")]
        public virtual Task<TestCloudStartTestRunResult> PostTestStartTestRun(string test_run_id, TestCloudStartTestRunOptions startOptions, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "test_run_id" , test_run_id },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Post<TestCloudStartTestRunResult>( startOptions, queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/report")]
        public virtual Task<TestReport> TestGetTestReport(string test_run_id, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "test_run_id" , test_run_id },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<TestReport>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/hashes/batch")]
        [ContentType("application/json")]
        public virtual Task<TestCloudFileHashResponse[]> PostTestUploadHashesBatch(string test_run_id, TestCloudFileHash[] file_info, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "test_run_id" , test_run_id },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Post<TestCloudFileHashResponse[]>( file_info, queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/hashes")]
        [ContentType("application/json")]
        public virtual Task PostTestUploadHash(string test_run_id, TestCloudFileHashDeprecated file_info, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "test_run_id" , test_run_id },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Post( file_info, queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/files")]
        [ContentType("application/json")]
        public virtual Task PostTestStartUploadingFile(string test_run_id, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "test_run_id" , test_run_id },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Post( body: null, queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}")]
        public virtual Task<TestRun> TestGetTestRun(string test_run_id, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "test_run_id" , test_run_id },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<TestRun>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/test_runs")]
        public virtual Task<TestRun[]> TestGetTestRuns(string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<TestRun[]>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/test_runs")]
        public virtual Task PostTestCreateTestRun(string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "owner_name" , owner_name },{ "app_name" , app_name } };
            return Post( body: null, queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/ignore")]
        public virtual Task<Symbol> PostIgnoreSymbol(string symbol_id, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "symbol_id" , symbol_id },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Post<Symbol>( body: null, queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}")]
        public virtual Task<Symbol> GetSymbol(string symbol_id, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "symbol_id" , symbol_id },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<Symbol>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/symbols")]
        public virtual Task<Symbol[]> GetSymbols(string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<Symbol[]>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}")]
        public virtual Task<SymbolUpload> GetSymbolUpload(string symbol_upload_id, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "symbol_upload_id" , symbol_upload_id },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<SymbolUpload>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}")]
        public virtual Task<SymbolUpload> PatchSymbolUpload(string symbol_upload_id, SymbolUploadEndRequest body, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "symbol_upload_id" , symbol_upload_id },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Patch<SymbolUpload>( body, queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}")]
        public virtual Task<SymbolUpload> DeleteSymbolUpload(string symbol_upload_id, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "symbol_upload_id" , symbol_upload_id },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Delete<SymbolUpload>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/symbol_uploads")]
        public virtual Task<SymbolUpload[]> GetSymbolUploads(string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<SymbolUpload[]>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/symbol_uploads")]
        public virtual Task<SymbolUploadBeginResponse> PostSymbolUpload(SymbolUploadBeginRequest body, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "owner_name" , owner_name },{ "app_name" , app_name } };
            return Post<SymbolUploadBeginResponse>( body, queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/symbol_groups/{symbol_group_id}")]
        public virtual Task<MissingSymbolCrashGroupsResponse> GetMissingSymbolCrashGroupById(string symbol_group_id, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "symbol_group_id" , symbol_group_id },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<MissingSymbolCrashGroupsResponse>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/symbol_groups")]
        public virtual Task<MissingSymbolCrashGroupsResponse> GetTopNFilteredMissingSymbolCrashGroups(int top, string filter, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "top" , top.ToString() },{ "filter" , filter },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<MissingSymbolCrashGroupsResponse>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/tables/{tableN" +
            "ame}/data/{id}")]
        public virtual Task<string> GetV01AppsSubscriptionsTablesData(string subscription_id, string tableName, string id, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "subscription_id" , subscription_id },{ "tableName" , tableName },{ "id" , id },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<string>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/tables/{tableN" +
            "ame}/data/{id}")]
        public virtual Task<string> DeleteV01AppsSubscriptionsTablesData(string subscription_id, string tableName, string id, string owner_name, string app_name, bool? permanent = null) {
            var queryParameters = new Dictionary<string,string>{ { "subscription_id" , subscription_id },{ "tableName" , tableName },{ "id" , id },{ "owner_name" , owner_name },{ "app_name" , app_name },{ "permanent" , permanent?.ToString() } };
            return Delete<string>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/tables/{tableN" +
            "ame}/data")]
        public virtual Task<string> GetV01AppsSubscriptionsTablesData(string subscription_id, string tableName, string owner_name, string app_name, int? skip = null, int? take = null, string sort = null) {
            var queryParameters = new Dictionary<string,string>{ { "subscription_id" , subscription_id },{ "tableName" , tableName },{ "owner_name" , owner_name },{ "app_name" , app_name },{ "skip" , skip?.ToString() },{ "take" , take?.ToString() },{ "sort" , sort } };
            return Get<string>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/tables/{tableN" +
            "ame}/data")]
        public virtual Task<string> PostV01AppsSubscriptionsTablesData(string subscription_id, string tableName, ImportDataContainer import, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "subscription_id" , subscription_id },{ "tableName" , tableName },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Post<string>( import, queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/tables/{tableN" +
            "ame}/data")]
        public virtual Task<string> DeleteV01AppsSubscriptionsTablesData(string subscription_id, string tableName, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "subscription_id" , subscription_id },{ "tableName" , tableName },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Delete<string>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/tables/{tableN" +
            "ame}/columns/{columnName}")]
        public virtual Task<string> TablesGetColumn(string subscription_id, string tableName, string columnName, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "subscription_id" , subscription_id },{ "tableName" , tableName },{ "columnName" , columnName },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<string>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/tables/{tableN" +
            "ame}/columns/{columnName}")]
        public virtual Task<string> PutTablesUpdateColumn(string subscription_id, string tableName, string columnName, TableColumn column, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "subscription_id" , subscription_id },{ "tableName" , tableName },{ "columnName" , columnName },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Put<string>( column, queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/tables/{tableN" +
            "ame}/columns/{columnName}")]
        public virtual Task<string> TablesDeleteColumn(string subscription_id, string tableName, string columnName, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "subscription_id" , subscription_id },{ "tableName" , tableName },{ "columnName" , columnName },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Delete<string>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/tables/{tableN" +
            "ame}/columns")]
        public virtual Task<string> GetV01AppsSubscriptionsTablesColumns(string subscription_id, string tableName, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "subscription_id" , subscription_id },{ "tableName" , tableName },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<string>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/tables/{tableN" +
            "ame}/columns")]
        public virtual Task<string> PostV01AppsSubscriptionsTablesColumns(string subscription_id, string tableName, TableColumn column, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "subscription_id" , subscription_id },{ "tableName" , tableName },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Post<string>( column, queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/tables/{tableN" +
            "ame}")]
        public virtual Task<string> TablesGetTable(string subscription_id, string tableName, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "subscription_id" , subscription_id },{ "tableName" , tableName },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<string>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/tables/{tableN" +
            "ame}")]
        public virtual Task<string> PutTablesUpdateTable(string subscription_id, string tableName, Table table, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "subscription_id" , subscription_id },{ "tableName" , tableName },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Put<string>( table, queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/tables/{tableN" +
            "ame}")]
        public virtual Task<string> TablesDeleteTable(string subscription_id, string tableName, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "subscription_id" , subscription_id },{ "tableName" , tableName },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Delete<string>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/tables")]
        public virtual Task<string> TablesGetTableList(string subscription_id, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "subscription_id" , subscription_id },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<string>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/tables")]
        public virtual Task<string> PostTablesCreateTable(string subscription_id, Table table, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "subscription_id" , subscription_id },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Post<string>( table, queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/resources/oper" +
            "ations")]
        public virtual Task<string> GetV01AppsSubscriptionsResourcesOperations(string subscription_id, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "subscription_id" , subscription_id },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<string>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/resources/grou" +
            "p")]
        public virtual Task<string> DeleteV01AppsSubscriptionsResourcesGroup(string subscription_id, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "subscription_id" , subscription_id },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Delete<string>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/resources/grou" +
            "p")]
        public virtual Task<string> GetV01AppsSubscriptionsResourcesGroup(string subscription_id, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "subscription_id" , subscription_id },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<string>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/resources/")]
        public virtual Task<string> PostV01AppsSubscriptionsResources(string subscription_id, string owner_name, string app_name, string deploymentType = null) {
            var queryParameters = new Dictionary<string,string>{ { "subscription_id" , subscription_id },{ "owner_name" , owner_name },{ "app_name" , app_name },{ "deploymentType" , deploymentType } };
            return Post<string>( body: null, queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/resources/")]
        public virtual Task<string> GetV01AppsSubscriptionsResources(string subscription_id, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "subscription_id" , subscription_id },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<string>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/resourceGroups" +
            "")]
        public virtual Task<string> AzureDeleteResourceGroup(string subscription_id, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "subscription_id" , subscription_id },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Delete<string>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/resourceGroups" +
            "")]
        public virtual Task<string> AzureGetResourceGroup(string subscription_id, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "subscription_id" , subscription_id },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<string>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/push/keys")]
        public virtual Task<string> GetV01AppsSubscriptionsPushKeys(string subscription_id, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "subscription_id" , subscription_id },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<string>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/push/config")]
        public virtual Task<string> GetV01AppsSubscriptionsPushConfig(string subscription_id, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "subscription_id" , subscription_id },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<string>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/push/config")]
        public virtual Task<string> PostV01AppsSubscriptionsPushConfig(string subscription_id, PushConfig hubDescription, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "subscription_id" , subscription_id },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Post<string>( hubDescription, queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/push")]
        public virtual Task<string> GetV01AppsSubscriptionsPush(string subscription_id, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "subscription_id" , subscription_id },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<string>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/ping/")]
        public virtual Task<string> GetAzurePing(string subscription_id, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "subscription_id" , subscription_id },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<string>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/identity")]
        public virtual Task<string> GetV01AppsSubscriptionsIdentity(string subscription_id, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "subscription_id" , subscription_id },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<string>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/identity")]
        public virtual Task<string> PostV01AppsSubscriptionsIdentity(string subscription_id, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "subscription_id" , subscription_id },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Post<string>( body: null, queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/deployments/{t" +
            "ype}/operations")]
        public virtual Task<string> AzureGetDeploymentOperations(string subscription_id, string type, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "subscription_id" , subscription_id },{ "type" , type },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<string>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/deployments/{t" +
            "ype}/")]
        public virtual Task<string> PostAzureSubmitDeployment(string subscription_id, string type, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "subscription_id" , subscription_id },{ "type" , type },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Post<string>( body: null, queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/deployments/{t" +
            "ype}/")]
        public virtual Task<string> AzureGetDeployment(string subscription_id, string type, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "subscription_id" , subscription_id },{ "type" , type },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<string>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/subscriptions")]
        public virtual Task<Subscription> TestGetSubscriptions(string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<Subscription>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/subscriptions")]
        public virtual Task PostTestCreateSubscription(string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "owner_name" , owner_name },{ "app_name" , app_name } };
            return Post( body: null, queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/source_hosts/{source_host}/repositories")]
        public virtual Task<SourceRepository[]> BuildGetRepositories(string source_host, string owner_name, string app_name, string form = null) {
            var queryParameters = new Dictionary<string,string>{ { "source_host" , source_host },{ "owner_name" , owner_name },{ "app_name" , app_name },{ "form" , form } };
            return Get<SourceRepository[]>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/repo_config")]
        public virtual Task<RepoConfig[]> BuildGetRepositoryConfiguration(string owner_name, string app_name, bool? includeInactive = null) {
            var queryParameters = new Dictionary<string,string>{ { "owner_name" , owner_name },{ "app_name" , app_name },{ "includeInactive" , includeInactive?.ToString() } };
            return Get<RepoConfig[]>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/repo_config")]
        public virtual Task<SuccessResponse> PostBuildCreateRepositoryConfiguration(RepoInfo repo, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "owner_name" , owner_name },{ "app_name" , app_name } };
            return Post<SuccessResponse>( repo, queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/repo_config")]
        public virtual Task<SuccessResponse> BuildDeleteRepositoryConfiguration(string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "owner_name" , owner_name },{ "app_name" , app_name } };
            return Delete<SuccessResponse>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}")]
        public virtual Task<ReleaseDetails> GetReleaseOrLatestRelease(string release_id, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "release_id" , release_id },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<ReleaseDetails>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}")]
        public virtual Task<ReleaseDetails> PatchV01AppsReleases(double release_id, ReleaseUpdateRequest body, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "release_id" , release_id.ToString() },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Patch<ReleaseDetails>( body, queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}")]
        public virtual Task DeleteV01AppsReleases(string release_id, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "release_id" , release_id },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Delete( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/releases")]
        public virtual Task<ReleaseDetails[]> GetV01AppsReleases(string owner_name, string app_name, bool? published_only = null, string filter = null) {
            var queryParameters = new Dictionary<string,string>{ { "owner_name" , owner_name },{ "app_name" , app_name },{ "published_only" , published_only?.ToString() },{ "$filter" , filter } };
            return Get<ReleaseDetails[]>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/release_uploads/{upload_id}")]
        public virtual Task<ReleaseUploadEndResponse> PatchV01AppsReleaseUploads(string upload_id, ReleaseUploadEndRequest body, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "upload_id" , upload_id },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Patch<ReleaseUploadEndResponse>( body, queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/release_uploads")]
        public virtual Task PostV01AppsReleaseUploads(string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "owner_name" , owner_name },{ "app_name" , app_name } };
            return Post( body: null, queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/recent_releases")]
        public virtual Task<BasicReleaseDetails[]> GetLatestReleases(string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<BasicReleaseDetails[]>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/recent_packages")]
        public virtual Task<BasicPackageDetails[]> GetLatestPackages(string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<BasicPackageDetails[]>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/packages/{package_id}")]
        public virtual Task<PackageDetails> GetPackageOrLatestPackage(string package_id, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "package_id" , package_id },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<PackageDetails>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/packages/{package_id}")]
        public virtual Task<PackageDetails> PatchV01AppsPackages(double package_id, PackageUpdateRequest body, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "package_id" , package_id.ToString() },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Patch<PackageDetails>( body, queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/packages/{package_id}")]
        public virtual Task DeleteV01AppsPackages(string package_id, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "package_id" , package_id },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Delete( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/packages")]
        public virtual Task<PackageDetails[]> GetV01AppsPackages(string owner_name, string app_name, bool? published_only = null, string filter = null) {
            var queryParameters = new Dictionary<string,string>{ { "owner_name" , owner_name },{ "app_name" , app_name },{ "published_only" , published_only?.ToString() },{ "$filter" , filter } };
            return Get<PackageDetails[]>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/package_uploads/{upload_id}")]
        public virtual Task<PackageUploadEndResponse> PatchV01AppsPackageUploads(string upload_id, PackageUploadEndRequest body, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "upload_id" , upload_id },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Patch<PackageUploadEndResponse>( body, queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/package_uploads")]
        public virtual Task PostV01AppsPackageUploads(string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "owner_name" , owner_name },{ "app_name" , app_name } };
            return Post( body: null, queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/invitations/{user_email}")]
        public virtual Task PostInviteAppUser(string owner_name, string app_name, string user_email) {
            var queryParameters = new Dictionary<string,string>{ { "owner_name" , owner_name },{ "app_name" , app_name },{ "user_email" , user_email } };
            return Post( body: null, queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/invitations/{user_email}")]
        public virtual Task DeleteAppInvitation(string owner_name, string app_name, string user_email) {
            var queryParameters = new Dictionary<string,string>{ { "owner_name" , owner_name },{ "app_name" , app_name },{ "user_email" , user_email } };
            return Delete( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/invitations")]
        public virtual Task<AppInvitationDetailResponse> GetAppInvitations(string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<AppInvitationDetailResponse>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/" +
            "releases/{release_id}")]
        public virtual Task<ReleaseDetails> GetLatestReleaseForDistributionGroup(string distribution_group_name, string release_id, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "distribution_group_name" , distribution_group_name },{ "release_id" , release_id },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<ReleaseDetails>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/" +
            "releases/{release_id}")]
        public virtual Task<ReleaseDeleteResponse> DeleteReleaseForDistributionGroup(string distribution_group_name, string release_id, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "distribution_group_name" , distribution_group_name },{ "release_id" , release_id },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Delete<ReleaseDeleteResponse>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/" +
            "releases")]
        public virtual Task<ReleaseDetails[]> GetReleasesForDistributionGroup(string distribution_group_name, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "distribution_group_name" , distribution_group_name },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<ReleaseDetails[]>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/" +
            "packages/{package_id}")]
        public virtual Task<PackageDetails> GetLatestPackageForDistributionGroup(string distribution_group_name, string package_id, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "distribution_group_name" , distribution_group_name },{ "package_id" , package_id },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<PackageDetails>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/" +
            "packages")]
        public virtual Task<PackageDetails[]> GetPackagesForDistributionGroup(string distribution_group_name, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "distribution_group_name" , distribution_group_name },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<PackageDetails[]>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/" +
            "members")]
        public virtual Task<DistributionGroupUserGetResponse[]> GetDistributionGroupUsers(string owner_name, string app_name, string distribution_group_name, bool? exclude_pending_invitations = null) {
            var queryParameters = new Dictionary<string,string>{ { "owner_name" , owner_name },{ "app_name" , app_name },{ "distribution_group_name" , distribution_group_name },{ "exclude_pending_invitations" , exclude_pending_invitations?.ToString() } };
            return Get<DistributionGroupUserGetResponse[]>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/" +
            "members")]
        public virtual Task<DistributionGroupUserPostResponse[]> PostCreateDistributionGroupUsers(string owner_name, string app_name, string distribution_group_name, DistributionGroupUserRequest members) {
            var queryParameters = new Dictionary<string,string>{ { "owner_name" , owner_name },{ "app_name" , app_name },{ "distribution_group_name" , distribution_group_name } };
            return Post<DistributionGroupUserPostResponse[]>( members, queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/" +
            "members")]
        public virtual Task<DistributionGroupUserDeleteResponse> DeleteDistributionGroupUsers(string owner_name, string app_name, string distribution_group_name, DistributionGroupUserRequest members) {
            var queryParameters = new Dictionary<string,string>{ { "owner_name" , owner_name },{ "app_name" , app_name },{ "distribution_group_name" , distribution_group_name } };
            return Delete<DistributionGroupUserDeleteResponse>( members, queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}")]
        public virtual Task<DistributionGroupResponse> GetDistributionGroup(string owner_name, string app_name, string distribution_group_name) {
            var queryParameters = new Dictionary<string,string>{ { "owner_name" , owner_name },{ "app_name" , app_name },{ "distribution_group_name" , distribution_group_name } };
            return Get<DistributionGroupResponse>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}")]
        public virtual Task<DistributionGroupResponse> PatchUpdateDistributionGroup(string owner_name, string app_name, string distribution_group_name, DistributionGroupPatchRequest distribution_group) {
            var queryParameters = new Dictionary<string,string>{ { "owner_name" , owner_name },{ "app_name" , app_name },{ "distribution_group_name" , distribution_group_name } };
            return Patch<DistributionGroupResponse>( distribution_group, queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}")]
        public virtual Task DeleteDistributionGroup(string app_name, string owner_name, string distribution_group_name) {
            var queryParameters = new Dictionary<string,string>{ { "app_name" , app_name },{ "owner_name" , owner_name },{ "distribution_group_name" , distribution_group_name } };
            return Delete( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/distribution_groups")]
        public virtual Task<DistributionGroupResponse[]> GetDistributionGroups(string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<DistributionGroupResponse[]>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/distribution_groups")]
        public virtual Task PostCreateDistributionGroup(string owner_name, string app_name, DistributionGroupRequest distribution_group) {
            var queryParameters = new Dictionary<string,string>{ { "owner_name" , owner_name },{ "app_name" , app_name } };
            return Post( distribution_group, queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/device_selection")]
        public virtual Task<DeviceSelection> PostTestCreateDeviceSelection(string[] devices, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "owner_name" , owner_name },{ "app_name" , app_name } };
            var formsParameters = new Dictionary<string,string>{ { "devices" , string.Join(",",devices) } };
            var formsContent = new FormUrlEncodedContent(formsParameters);;
            return Post<DeviceSelection>( formsContent, queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/device_configurations")]
        public virtual Task<DeviceConfiguration[]> TestGetDeviceConfigurations(string owner_name, string app_name, string app_upload_id = null) {
            var queryParameters = new Dictionary<string,string>{ { "owner_name" , owner_name },{ "app_name" , app_name },{ "app_upload_id" , app_upload_id } };
            return Get<DeviceConfiguration[]>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/stacktrace")]
        public virtual Task<Stacktrace> GetGroupStacktrace(string crash_group_id, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "crash_group_id" , crash_group_id },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<Stacktrace>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_i" +
            "d}/stacktrace")]
        public virtual Task<Stacktrace> GetErrorStacktrace(string crash_group_id, string crash_id, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "crash_group_id" , crash_group_id },{ "crash_id" , crash_id },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<Stacktrace>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_i" +
            "d}")]
        public virtual Task<Failure> GetCrash(string crash_group_id, string crash_id, string owner_name, string app_name, bool? include_report = false, bool? include_log = false) {
            var queryParameters = new Dictionary<string,string>{ { "crash_group_id" , crash_group_id },{ "crash_id" , crash_id },{ "owner_name" , owner_name },{ "app_name" , app_name },{ "include_report" , include_report?.ToString() },{ "include_log" , include_log?.ToString() } };
            return Get<Failure>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes")]
        public virtual Task<Crash[]> GetCrashes(string crash_group_id, string owner_name, string app_name, bool? include_report = false, bool? include_log = false, string date_from = null, string date_to = null, string app_version = null, string error_type = null) {
            var queryParameters = new Dictionary<string,string>{ { "crash_group_id" , crash_group_id },{ "owner_name" , owner_name },{ "app_name" , app_name },{ "include_report" , include_report?.ToString() },{ "include_log" , include_log?.ToString() },{ "date_from" , date_from },{ "date_to" , date_to },{ "app_version" , app_version },{ "error_type" , error_type } };
            return Get<Crash[]>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}")]
        public virtual Task<CrashGroup> GetCrashGroup(string crash_group_id, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "crash_group_id" , crash_group_id },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<CrashGroup>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}")]
        public virtual Task<CrashGroup> PatchCrashGroup(string crash_group_id, CrashGroupChange group, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "crash_group_id" , crash_group_id },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Patch<CrashGroup>( group, queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/crash_groups")]
        public virtual Task<CrashGroup[]> GetCrashGroups(string owner_name, string app_name, string last_occurrence_from = null, string last_occurrence_to = null, string app_version = null, string group_type = null, string group_status = null, string group_text_search = null) {
            var queryParameters = new Dictionary<string,string>{ { "owner_name" , owner_name },{ "app_name" , app_name },{ "last_occurrence_from" , last_occurrence_from },{ "last_occurrence_to" , last_occurrence_to },{ "app_version" , app_version },{ "group_type" , group_type },{ "group_status" , group_status },{ "group_text_search" , group_text_search } };
            return Get<CrashGroup[]>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/crash_group_counts")]
        public virtual Task<CrashGroupCounts> GetCrashGroupCounts(string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<CrashGroupCounts>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/commits/batch/{sha_collection}")]
        public virtual Task<Branch[]> BuildGetCommits(string sha_collection, string owner_name, string app_name, string form = null) {
            var queryParameters = new Dictionary<string,string>{ { "sha_collection" , sha_collection },{ "owner_name" , owner_name },{ "app_name" , app_name },{ "form" , form } };
            return Get<Branch[]>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}/logs")]
        public virtual Task BuildGetBuildLogs(int build_id, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "build_id" , build_id.ToString() },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}/downloads/{download_type}")]
        public virtual Task BuildGetBuildDownload(int build_id, string download_type, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "build_id" , build_id.ToString() },{ "download_type" , download_type },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}")]
        public virtual Task<Build> BuildGetBuild(int build_id, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "build_id" , build_id.ToString() },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<Build>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}")]
        public virtual Task<Build> PatchBuildUpdateBuildStatus(int build_id, BuildPatch properties, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "build_id" , build_id.ToString() },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Patch<Build>( properties, queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/toolset_projects")]
        public virtual Task<ToolsetProjects> BuildGetProjectInformation(string branch, string os, string platform, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "branch" , branch },{ "os" , os },{ "platform" , platform },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<ToolsetProjects>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config")]
        public virtual Task<BranchConfiguration> BuildGetBranchConfiguration(string branch, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "branch" , branch },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<BranchConfiguration>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config")]
        public virtual Task<BranchConfiguration> PostBuildCreateBranchConfiguration(string branch, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "branch" , branch },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Post<BranchConfiguration>( body: null, queryParameters: queryParameters, authenticated: true );
        }
        
        //[Path("/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config")]
        //public virtual Task<BranchConfiguration> PutBuildUpdateBranchConfiguration(string branch, string owner_name, string app_name) {
        //    var queryParameters = new Dictionary<string,string>{ { "branch" , branch },{ "owner_name" , owner_name },{ "app_name" , app_name } };
        //    return Put<BranchConfiguration>( queryParameters: queryParameters, authenticated: true );
        //}
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config")]
        public virtual Task<SuccessResponse> BuildDeleteBranchConfiguration(string branch, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "branch" , branch },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Delete<SuccessResponse>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/builds")]
        public virtual Task<Build[]> BuildGetBranchBuilds(string branch, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "branch" , branch },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<Build[]>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/builds")]
        public virtual Task<Build[]> PostBuildQueueBuild(string branch, string owner_name, string app_name, BuildParams parameters = null) {
            var queryParameters = new Dictionary<string,string>{ { "branch" , branch },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Post<Build[]>(parameters, queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/branches")]
        public virtual Task<BranchStatus[]> BuildGetBranches(string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<BranchStatus[]>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/analytics/versions")]
        public virtual Task<Versions> GetAnalyticsVersions(string start, string owner_name, string app_name, string end = null, int? count = null, string[] versions = null) {
            var queryParameters = new Dictionary<string,string>{ { "start" , start },{ "owner_name" , owner_name },{ "app_name" , app_name },{ "end" , end },{ "count" , count?.ToString() },{ "versions" , string.Join(",",versions) } };
            return Get<Versions>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/analytics/sessions_per_device")]
        public virtual Task<SessionsPerDevice> GetAnalyticsPerDeviceCounts(string start, string interval, string owner_name, string app_name, string end = null, string[] versions = null) {
            var queryParameters = new Dictionary<string,string>{ { "start" , start },{ "interval" , interval },{ "owner_name" , owner_name },{ "app_name" , app_name },{ "end" , end },{ "versions" , string.Join(",",versions) } };
            return Get<SessionsPerDevice>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/analytics/session_durations_distribution")]
        public virtual Task<SessionDurationsDistribution> GetAnalyticsSessionDurationsDistribution(string start, string owner_name, string app_name, string end = null, string[] versions = null) {
            var queryParameters = new Dictionary<string,string>{ { "start" , start },{ "owner_name" , owner_name },{ "app_name" , app_name },{ "end" , end },{ "versions" , string.Join(",",versions) } };
            return Get<SessionDurationsDistribution>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/analytics/session_counts")]
        public virtual Task<SessionCounts> GetAnalyticsSessionCounts(string start, string interval, string owner_name, string app_name, string end = null, string[] versions = null) {
            var queryParameters = new Dictionary<string,string>{ { "start" , start },{ "interval" , interval },{ "owner_name" , owner_name },{ "app_name" , app_name },{ "end" , end },{ "versions" , string.Join(",",versions) } };
            return Get<SessionCounts>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/analytics/places")]
        public virtual Task<Places> GetAnalyticsPlaceCounts(string start, string owner_name, string app_name, string end = null, int? count = null, string[] versions = null) {
            var queryParameters = new Dictionary<string,string>{ { "start" , start },{ "owner_name" , owner_name },{ "app_name" , app_name },{ "end" , end },{ "count" , count?.ToString() },{ "versions" , string.Join(",",versions) } };
            return Get<Places>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/analytics/oses")]
        public virtual Task<OSes> GetAnalyticsOperatingSystemCounts(string start, string owner_name, string app_name, string end = null, int? count = null, string[] versions = null) {
            var queryParameters = new Dictionary<string,string>{ { "start" , start },{ "owner_name" , owner_name },{ "app_name" , app_name },{ "end" , end },{ "count" , count?.ToString() },{ "versions" , string.Join(",",versions) } };
            return Get<OSes>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/analytics/models")]
        public virtual Task<AnalyticsModels> GetAnalyticsModelCounts(string start, string owner_name, string app_name, string end = null, int? count = null, string[] versions = null) {
            var queryParameters = new Dictionary<string,string>{ { "start" , start },{ "owner_name" , owner_name },{ "app_name" , app_name },{ "end" , end },{ "count" , count?.ToString() },{ "versions" , string.Join(",",versions) } };
            return Get<AnalyticsModels>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/analytics/log_flow")]
        public virtual Task<LogContainer> GetAnalyticsLogFlow(string owner_name, string app_name, string start = null) {
            var queryParameters = new Dictionary<string,string>{ { "owner_name" , owner_name },{ "app_name" , app_name },{ "start" , start } };
            return Get<LogContainer>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/analytics/languages")]
        public virtual Task<Languages> GetAnalyticsLanguageCounts(string start, string owner_name, string app_name, string end = null, int? count = null, string[] versions = null) {
            var queryParameters = new Dictionary<string,string>{ { "start" , start },{ "owner_name" , owner_name },{ "app_name" , app_name },{ "end" , end },{ "count" , count?.ToString() },{ "versions" , string.Join(",",versions) } };
            return Get<Languages>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/properties/{even" +
            "t_property_name}/counts")]
        public virtual Task<EventPropertyValues> GetAnalyticsEventPropertyCounts(string event_name, string event_property_name, string start, string owner_name, string app_name, string end = null, string[] versions = null, int? count = 5) {
            var queryParameters = new Dictionary<string,string>{ { "event_name" , event_name },{ "event_property_name" , event_property_name },{ "start" , start },{ "owner_name" , owner_name },{ "app_name" , app_name },{ "end" , end },{ "versions" , string.Join(",",versions) },{ "count" , count?.ToString() } };
            return Get<EventPropertyValues>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/properties")]
        public virtual Task<EventProperties> GetAnalyticsEventProperties(string event_name, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "event_name" , event_name },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<EventProperties>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/event_count")]
        public virtual Task<EventCount> GetAnalyticsEventCount(string event_name, string start, string owner_name, string app_name, string end = null, string[] versions = null) {
            var queryParameters = new Dictionary<string,string>{ { "event_name" , event_name },{ "start" , start },{ "owner_name" , owner_name },{ "app_name" , app_name },{ "end" , end },{ "versions" , string.Join(",",versions) } };
            return Get<EventCount>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/device_count")]
        public virtual Task<EventDeviceCount> GetAnalyticsEventDeviceCount(string event_name, string start, string owner_name, string app_name, string end = null, string[] versions = null) {
            var queryParameters = new Dictionary<string,string>{ { "event_name" , event_name },{ "start" , start },{ "owner_name" , owner_name },{ "app_name" , app_name },{ "end" , end },{ "versions" , string.Join(",",versions) } };
            return Get<EventDeviceCount>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/count_per_sessio" +
            "n")]
        public virtual Task<EventCountPerSession> GetAnalyticsEventPerSessionCount(string event_name, string start, string owner_name, string app_name, string end = null, string[] versions = null) {
            var queryParameters = new Dictionary<string,string>{ { "event_name" , event_name },{ "start" , start },{ "owner_name" , owner_name },{ "app_name" , app_name },{ "end" , end },{ "versions" , string.Join(",",versions) } };
            return Get<EventCountPerSession>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/count_per_device" +
            "")]
        public virtual Task<EventCountPerDevice> GetAnalyticsEventPerDeviceCount(string event_name, string start, string owner_name, string app_name, string end = null, string[] versions = null) {
            var queryParameters = new Dictionary<string,string>{ { "event_name" , event_name },{ "start" , start },{ "owner_name" , owner_name },{ "app_name" , app_name },{ "end" , end },{ "versions" , string.Join(",",versions) } };
            return Get<EventCountPerDevice>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/analytics/events")]
        public virtual Task<Events> GetAnalyticsEvents(string start, string owner_name, string app_name, string end = null, string[] versions = null, string[] event_name = null, int? top = 30, int? skip = 0, string inlinecount = "none", string orderby = "count desc") {
            var queryParameters = new Dictionary<string,string>{ { "start" , start },{ "owner_name" , owner_name },{ "app_name" , app_name },{ "end" , end },{ "versions" , string.Join(",",versions) },{ "event_name" , string.Join(",",event_name) },{ "$top" , top?.ToString() },{ "$skip" , skip?.ToString() },{ "$inlinecount" , inlinecount },{ "$orderby" , orderby } };
            return Get<Events>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/analytics/crashfree_device_percentages")]
        public virtual Task<CrashFreeDevicePercentages> GetAnalyticsCrashFreeDevicePercentages(string start, string owner_name, string app_name, string end = null, string[] versions = null) {
            var queryParameters = new Dictionary<string,string>{ { "start" , start },{ "owner_name" , owner_name },{ "app_name" , app_name },{ "end" , end },{ "versions" , string.Join(",",versions) } };
            return Get<CrashFreeDevicePercentages>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/overal" +
            "l")]
        public virtual Task<CrashOverall> GetAnalyticsCrashGroupTotals(string crash_group_id, string version, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "crash_group_id" , crash_group_id },{ "version" , version },{ "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<CrashOverall>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/operat" +
            "ing_systems")]
        public virtual Task<CrashGroupOperatingSystems> GetAnalyticsCrashGroupOperatingSystemCounts(string crash_group_id, string version, string owner_name, string app_name, int? top = 30) {
            var queryParameters = new Dictionary<string,string>{ { "crash_group_id" , crash_group_id },{ "version" , version },{ "owner_name" , owner_name },{ "app_name" , app_name },{ "$top" , top?.ToString() } };
            return Get<CrashGroupOperatingSystems>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/models" +
            "")]
        public virtual Task<CrashGroupModels> GetAnalyticsCrashGroupModelCounts(string crash_group_id, string version, string owner_name, string app_name, int? top = 30) {
            var queryParameters = new Dictionary<string,string>{ { "crash_group_id" , crash_group_id },{ "version" , version },{ "owner_name" , owner_name },{ "app_name" , app_name },{ "$top" , top?.ToString() } };
            return Get<CrashGroupModels>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/crash_" +
            "counts")]
        public virtual Task<CrashCounts> GetAnalyticsCrashGroupCounts(string crash_group_id, string version, string start, string owner_name, string app_name, string end = null) {
            var queryParameters = new Dictionary<string,string>{ { "crash_group_id" , crash_group_id },{ "version" , version },{ "start" , start },{ "owner_name" , owner_name },{ "app_name" , app_name },{ "end" , end } };
            return Get<CrashCounts>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups")]
        public virtual Task<CrashesOverall[]> PostAnalyticsCrashGroupsTotals(CrashGroupContainer crash_groups, string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "owner_name" , owner_name },{ "app_name" , app_name } };
            return Post<CrashesOverall[]>( crash_groups, queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/analytics/crash_counts")]
        public virtual Task<CrashCounts> GetAnalyticsCrashCounts(string start, string owner_name, string app_name, string end = null, string[] versions = null) {
            var queryParameters = new Dictionary<string,string>{ { "start" , start },{ "owner_name" , owner_name },{ "app_name" , app_name },{ "end" , end },{ "versions" , string.Join(",",versions) } };
            return Get<CrashCounts>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}/analytics/active_device_counts")]
        public virtual Task<ActiveDeviceCounts> GetAnalyticsDeviceCounts(string start, string owner_name, string app_name, string end = null, string[] versions = null) {
            var queryParameters = new Dictionary<string,string>{ { "start" , start },{ "owner_name" , owner_name },{ "app_name" , app_name },{ "end" , end },{ "versions" , string.Join(",",versions) } };
            return Get<ActiveDeviceCounts>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}")]
        public virtual Task<AppResponse> GetApp(string owner_name, string app_name) {
            var queryParameters = new Dictionary<string,string>{ { "owner_name" , owner_name },{ "app_name" , app_name } };
            return Get<AppResponse>( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}")]
        public virtual Task<AppResponse> PatchUpdateApp(string app_name, string owner_name, AppPatchRequest app = null) {
            var queryParameters = new Dictionary<string,string>{ { "app_name" , app_name },{ "owner_name" , owner_name } };
            return Patch<AppResponse>( app, queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps/{owner_name}/{app_name}")]
        public virtual Task DeleteApp(string app_name, string owner_name) {
            var queryParameters = new Dictionary<string,string>{ { "app_name" , app_name },{ "owner_name" , owner_name } };
            return Delete( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/apps")]
        public virtual Task<AppResponse> PostCreateApp(AppRequest app) {
            return Post<AppResponse>( app, authenticated: true );
        }
        
        [Path("/v0.1/apps")]
        public virtual Task<AppResponse[]> GetApps() {
            return Get<AppResponse[]>( authenticated: true );
        }
    }
    
    public partial class MobileCenterAPIServiceBasicAuthApi : SimpleAuth.BasicAuthApi {
        
        public MobileCenterAPIServiceBasicAuthApi(string identifier, string encryptionKey, string loginUrl, System.Net.Http.HttpMessageHandler handler = null) : 
                base(identifier, encryptionKey, loginUrl, handler) {
            BaseAddress = new System.Uri("/");;
        }
        
        [Path("/v0.1/api_tokens/{api_token_id}")]
        public virtual Task DeleteApiToken(string api_token_id) {
            var queryParameters = new Dictionary<string,string>{ { "api_token_id" , api_token_id } };
            return Delete( queryParameters: queryParameters, authenticated: true );
        }
        
        [Path("/v0.1/api_tokens")]
        public virtual Task<ApiTokensGetResponse[]> GetApiTokens() {
            return Get<ApiTokensGetResponse[]>( authenticated: true );
        }
        
        [Path("/v0.1/api_tokens")]
        public virtual Task PostCreateApiToken(ApiTokensCreateRequest description = null) {
            return Post( description, authenticated: true );
        }
    }
}
